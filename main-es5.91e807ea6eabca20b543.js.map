{"version":3,"sources":["webpack:///src/showdown.component.ts","webpack:///src/showdown-converter.provider.ts","webpack:///src/showdown-config.provider.ts","webpack:///src/showdown.module.ts","webpack:///src/app/editor/editor.component.html","webpack:///src/app/app-routing.module.ts","webpack:///src/app/editor/editor.component.ts","webpack:///src/app/app.module.ts","webpack:///src/app/app.component.ts","webpack:///src/app/app.component.html","webpack:///src/main.ts","webpack:///$_lazy_route_resource lazy namespace object"],"names":["ShowdownConverter","ShowdownComponent","hasOwnProperty","ShowdownConfig","options","this","merge","key","call","config","super","extensions","setFlavor","flavor","setOptions","setOption","MAP_OPTION","true","false","_toOption","value","_elementRef","_domSanitizer","nativeElement","innerHTML","trim","render","result","makeHtml","_sanitize","sanitize","HTML","getOptions","Object","defineProperty","prototype","set","configurable","ShowdownModule","ngModule","providers","provide","useValue","EditorComponent","AppModule","AppComponent","AppRoutingModule","ROUTES","path","component","http","schema","optionsKeys","keys","flavors","markdown","showdownComponent","getFlavor","get","responseType","subscribe","res","flavorChange","forRoot","mdToSdExtension","type","regex","RegExp","replace","underline","bootstrapModule","err","console","error","webpackEmptyAsyncContext","req","Promise","resolve","then","e","Error","code","module","exports","id"],"mappings":"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","file":"x","sourcesContent":["import { Component, ElementRef, Input, OnChanges, OnInit, Optional, SecurityContext } from '@angular/core';\nimport { DomSanitizer } from '@angular/platform-browser';\nimport * as Showdown from 'showdown';\nimport { ShowdownConfig } from './showdown-config.provider';\nimport { ShowdownConverter } from './showdown-converter.provider';\n\n/**\n * @internal\n */\nconst MAP_OPTION = {\n  '': true,\n  true: true,\n  false: false\n};\n\n/**\n * @internal\n */\nlet _toOption = (value: any) => MAP_OPTION.hasOwnProperty(value) ? MAP_OPTION[value] : value;\n\n/**\n * The options keys for the dynamic properties set.\n * @internal\n */\nconst OPTIONS_PROPERTIES_KEYS: string[] = [\n  'backslashEscapesHTMLTags',\n  'completeHTMLDocument',\n  'disableForced4SpacesIndentedSublists',\n  'emoji',\n  'encodeEmails',\n  'ghCodeBlocks',\n  'ghCompatibleHeaderId',\n  'ghMentions',\n  'ghMentionsLink',\n  'headerLevelStart',\n  'literalMidWordAsterisks',\n  'literalMidWordUnderscores',\n  'metadata',\n  'noHeaderId',\n  'omitExtraWLInCodeBlocks',\n  'openLinksInNewWindow',\n  'parseImgDimensions',\n  'prefixHeaderId',\n  'rawHeaderId',\n  'rawPrefixHeaderId',\n  'requireSpaceBeforeHeadingText',\n  'simpleLineBreaks',\n  'simplifiedAutoLink',\n  'smartIndentationFix',\n  'smoothLivePreview',\n  'splitAdjacentBlockquotes',\n  'strikethrough',\n  'tables',\n  'tablesHeaderId',\n  'tasklists',\n  'underline'\n];\n\n// For the options setter properties that dynamic definition (the code after the class)\nexport interface ShowdownComponent extends Showdown.ShowdownOptions {\n}\n\n/**\n * A angular component for render `Markdown` to `HTML`.\n *\n * ### Example\n *\n * Setup as standalone\n * ```typescript\n * import { NgModule } from '@angular/core';\n * import { ShowdownComponent } from 'ngx-showdown';\n *\n * @NgModule({\n *   declarations: [ ShowdownComponent ];\n * })\n * export class AppModule {}\n * ```\n *\n * Bind markdown value and options object\n * ```typescript\n * import { Component } from '@angular/core';\n * import * as Showdown from 'showdown';\n *\n * @Component({\n *   selector: 'some',\n *   template: '<showdown [value]=\"text\" [options]=\"options\"></showdown>'\n * })\n * export class SomeComponent {\n *   text: string = `\n *     # Some header\n *     ---\n *     **Some bold**\n *   `;\n *   options: Showdown.ShowdownOptions = { smartIndentationFix: true };\n *   // ...\n * }\n * ```\n * Bind single option (it have properties for all showdown options).\n * ```html\n * <showdown emoji=\"true\"  noHeaderId># Some text :+1:</showdown>\n * ```\n *\n * Set static markdown value.\n * ```html\n * <showdown value=\"___Some static value___\" underline></showdown>\n * ```\n *\n * Use as directive on anther element.\n * ```html\n * <div showdown=\"# Div Element\" headerLevelStart=\"2\"></div>\n * ```\n *\n * Static markdown value in the element content.\n * ```html\n * <div>\n *    <showdown smartIndentationFix>\n *       # List:\n *       * a\n *            * A\n *       * b\n *    </showdown>\n * </div>\n * ```\n *\n * Set template reference variable.\n * ```html\n * <showdown #sd></showdown>\n * ```\n * Or\n * ```html\n * <div showdown #sd=\"showdown\"></div>\n * ```\n */\n@Component({\n  selector: 'showdown,[showdown]',\n  template: '<ng-content></ng-content>',\n  exportAs: 'showdown',\n  inputs: OPTIONS_PROPERTIES_KEYS\n})\nexport class ShowdownComponent extends ShowdownConverter implements OnInit, OnChanges, Showdown.ShowdownOptions {\n\n  /**\n   * The input markdown value.\n   *\n   * __Example :__\n   *\n   * Set some static markdown value.\n   * ```html\n   * <showdown value=\"**Some bold value**\"></showdown>\n   * ```\n   *\n   * Bind property with markdown value.\n   * ```html\n   * <textarea [(ngModel)]=\"text\"></textarea>\n   * <showdown [value]=\"text\"></showdown>\n   * ```\n   */\n  @Input() value: string;\n\n  /**\n   * Input alias to `value`.\n   *\n   * __Example :__\n   *\n   * ```html\n   * <div [showdown]=\"# Some Header\"></div>\n   * ```\n   *\n   * Equivalent to\n   * ```html\n   * <showdown [value]=\"# Some Header\"></showdown>\n   * ```\n   */\n  @Input() set showdown(value: string) {\n    this.value = value;\n  }\n\n  /**\n   * The showdown options of the converter.\n   *\n   * __Example :__\n   *\n   * Bind options\n   * ```typescript\n   * import { Component } from '@angular/core';\n   * import * as Showdown from 'showdown';\n   *\n   * @Component({\n   *   selector: `some`,\n   *   template: `<showdown [options]=\"options\"># Some Header<showdown>`\n   * })\n   * export class SomeComponent {\n   *   options: Showdown.ShowdownOptions = {headerLevelStart: 3};\n   *   // ...\n   * }\n   * ```\n   * Or\n   * ```html\n   * <showdown [options]=\"{smartIndentationFix: true}\"> # Indentation Fix<showdown>\n   * ```\n   */\n  @Input()\n  get options(): Showdown.ShowdownOptions {\n    return this.getOptions();\n  }\n\n  set options(options: Showdown.ShowdownOptions) {\n    this.setOptions(options);\n  }\n\n  private _sanitize: boolean;\n\n  /**\n   * Enables html sanitize, it will sanitize the converter html output by [`DomSanitizer`](https://angular.io/api/platform-browser/DomSanitizer#sanitize).\n   *\n   * __Example :__\n   *\n   * ```typescript\n   * import { Component } from '@angular/core';\n   *\n   * @Component({\n   *   selector: 'some',\n   *   styles: [`.box { width: 95%; padding: 5px; border: 1px solid black;}`],\n   *   template: `\n   *     <h3>Input</h3>\n   *     <textarea class=\"box\" [(ngModel)]=\"text\"></textarea>\n   *     <input type=\"checkbox\" [(ngModel)]=\"sanitize\"/> <b>Sanitize</b>\n   *     <h3>Markdown</h3>\n   *     <pre class=\"box\"><code>{{ text }}</code></pre>\n   *     <h3>Preview</h3>\n   *     <div class=\"box\">\n   *       <showdown #sd [value]=\"text\" [sanitize]=\"sanitize\"></showdown>\n   *     </div>\n   *   `;\n   * })\n   * export class SomeComponent {\n   *    text: string = `# A cool link\n   * <a href=\"javascript:alert('Hello!')\">click me</a>`;\n   * }\n   * ```\n   */\n  @Input()\n  set sanitize(sanitize: boolean) {\n    this._sanitize = _toOption(sanitize);\n  }\n\n  constructor(private _elementRef: ElementRef, @Optional() private _domSanitizer?: DomSanitizer, @Optional() config?: ShowdownConfig) {\n    super(config);\n  }\n\n  /**\n   * A angular lifecycle method, Use on init to check if it `content` type and load the element `content` to `value`.\n   * @internal\n   */\n  ngOnInit(): void {\n    if (this.value === undefined && this._elementRef.nativeElement.innerHTML.trim() !== '') {\n      this.render(this._elementRef.nativeElement.innerHTML);\n    }\n  }\n\n  /**\n   * A angular lifecycle method, Use to call to render method after changes.\n   * @internal\n   */\n  ngOnChanges(): void {\n    this.render();\n  }\n\n  /**\n   * Convert the markdown value of {@link ShowdownComponent#value} to html and set the html result to the element content.\n   *\n   * __Example :__\n   *\n   * ```html\n   * <textarea #textarea (change)=\"showdown.render(textarea.value)\"/># Some Header</textarea>\n   * <showdown #showdown></showdown>\n   * ```\n   * @param value - A markdown value to render (it will override the current value of `ShowdownComponent#value`)\n   */\n  public render(value?: string): void {\n    if (typeof value === 'string') {\n      this.value = value;\n    }\n\n    if (typeof this.value === 'string') {\n      let result = this.makeHtml(this.value);\n\n      if (this._sanitize) {\n        result = this._domSanitizer.sanitize(SecurityContext.HTML, result);\n      }\n\n      this._elementRef.nativeElement.innerHTML = result;\n    }\n  }\n\n}\n\n// Define options properties setter for angular directive and direct access\nfor (let key of OPTIONS_PROPERTIES_KEYS) {\n  Object.defineProperty(ShowdownComponent.prototype, key, {\n    set(value: any): void {\n      this.setOption(key, _toOption(value));\n    },\n    configurable: true\n  });\n}\n","import { Injectable, Optional } from '@angular/core';\nimport * as Showdown from 'showdown';\nimport { ShowdownConfig } from './showdown-config.provider';\n\n/**\n * @internal\n */\nlet {hasOwnProperty} = {};\n\n/**\n * ### Example\n *\n * Setup as standalone\n * ```typescript\n * import { NgModule } from '@angular/core';\n * import { ShowdownConverter } from 'ngx-showdown';\n *\n * @NgModule({\n *   providers: [ ShowdownConverter ];\n * })\n * export class AppModule {}\n * ```\n *\n * Use the converter instance.\n * ```typescript\n * import { Injectable } from '@angular/core';\n * import { ShowdownConverter } from 'ngx-showdown';\n *\n * @Injectable()\n * export class SomeService {\n *   constructor(showdownConverter: ShowdownConverter) {\n *     let markdown: string = \"**Some**\";\n *     let html: string = showdownConverter.makeHtml(markdown);\n *     console.log(`some:\\nmarkdown: ${markdown)\\nhtml: ${html}\\n`);\n *   }\n * }\n * ```\n */\n@Injectable()\nexport class ShowdownConverter extends Showdown.Converter {\n\n  constructor(@Optional() config?: ShowdownConfig) {\n    super(config && {extensions: config.extensions});\n    this.setFlavor((config && config.flavor) || 'vanilla');\n    this.setOptions(config);\n  }\n\n  /**\n   * Set options to the converter.\n   *\n   * @param options - A options object to set.\n   */\n  public setOptions(options: Showdown.ShowdownOptions): void {\n    for (let key in options) {\n      if (hasOwnProperty.call(options, key)) {\n        this.setOption(key, options[key]);\n      }\n    }\n  }\n\n}\n","import * as Showdown from 'showdown';\n\n/**\n * @internal\n */\nlet {hasOwnProperty} = {};\n\nexport interface ShowdownConfig extends Showdown.ConverterOptions {\n}\n\n/**\n * A config provider\n *\n * ### Example\n *\n * Set custom config provider.\n * ```typescript\n * import { NgModel } from '@angular/core';\n * import { ShowdownModule, ShowdownConfig } from 'ngx-showdown';\n *\n * export class MyShowdownConfig extends ShowdownConfig {\n *   emoji = true;\n *   underscore = false;\n *   flavor = 'github';\n * }\n *\n * @NgModel({\n *   imports: [ ShowdownModule ],\n *   providers: [ {provide: ShowdownConfig, useClass: MyConverterOptions} ]\n * })\n * export class AppModule {}\n * ```\n */\nexport class ShowdownConfig implements Showdown.ConverterOptions {\n\n  /**\n   * @see https://github.com/showdownjs/showdown/blob/master/README.md#flavors\n   */\n  flavor?: Showdown.Flavor;\n\n  constructor(options?: ShowdownConfig | Showdown.ConverterOptions) {\n    this.merge(options);\n  }\n\n  /**\n   * Merge options\n   *\n   * @param options - A options object to merge.\n   */\n  public merge?(options: ShowdownConfig | Showdown.ConverterOptions) {\n    for (let key in options) {\n      if (hasOwnProperty.call(options, key)) {\n        this[key] = options[key];\n      }\n    }\n  }\n\n}\n","import { ModuleWithProviders, NgModule } from '@angular/core';\nimport * as Showdown from 'showdown';\nimport { ShowdownConfig } from './showdown-config.provider';\nimport { ShowdownConverter } from './showdown-converter.provider';\nimport { ShowdownComponent } from './showdown.component';\nimport { ShowdownPipe } from './showdown.pipe';\nimport { SourceDirective } from './source.directive';\n\n/**\n * @internal\n */\nconst DECLARATIONS = [\n  ShowdownComponent,\n  ShowdownPipe,\n  SourceDirective\n];\n\n/**\n * ### Example\n *\n * Add `ShowdownModule` to app `imports`.\n * ```typescript\n * import { NgModule } from '@angular/core';\n * import { ShowdownModule } from 'ngx-showdown';\n *\n * @NgModule({\n *   imports: [ ShowdownModule ];\n * })\n * export class AppModule {}\n * ```\n */\n@NgModule({\n  declarations: DECLARATIONS,\n  providers: [ShowdownConverter],\n  exports: DECLARATIONS\n})\nexport class ShowdownModule {\n\n  /**\n   * __Example :__\n   *\n   * Add `ShowdownModule` to app `imports` with config.\n   * ```typescript\n   * import { NgModule } from '@angular/core';\n   * import { ShowdownModule } from 'ngx-showdown';\n   *\n   * @NgModule({\n   *   imports: [ ShowdownModule.forRoot({\n   *     smartIndentationFix: true,\n   *     foo: 'bar',\n   *     flavor: 'github',\n   *     extensions: [ {type:'listener', listeners: {'codeBlocks.after': console.log}} ]\n   *   }) ];\n   * })\n   * export class AppModule {}\n   * ```\n   * @param config - A root converter config for all converter instances.\n   */\n  static forRoot(config: ShowdownConfig | Showdown.ConverterOptions): ModuleWithProviders<ShowdownModule> {\n    return {\n      ngModule: ShowdownModule,\n      providers: [{provide: ShowdownConfig, useValue: config}]\n    };\n  }\n\n}\n","<mat-sidenav-container class=\"editor-container\">\n  <mat-sidenav #config fixedInViewport fixedTopGap=\"50\" mode=\"side\">\n    <mat-nav-list>\n      <mat-list-item *ngFor=\"let key of optionsKeys\" [matTooltip]=\"schema[key].description\"\n                     [ngSwitch]=\"schema[key].type\">\n        <mat-slide-toggle (ngModelChange)=\"optionChange(key, $event)\" *ngSwitchCase=\"'boolean'\"\n                          [ngModel]=\"options[key]\">\n          {{key}}\n        </mat-slide-toggle>\n        <mat-form-field *ngSwitchCase=\"'integer'\" matLine>\n          <input (ngModelChange)=\"optionChange(key, $event)\" [ngModel]=\"options[key]\" [placeholder]=\"key\" matInput\n                 type=\"number\"/>\n        </mat-form-field>\n        <mat-form-field *ngSwitchCase=\"'string'\" matLine>\n          <input (ngModelChange)=\"optionChange(key, $event)\" [ngModel]=\"options[key]\" [placeholder]=\"key\" matInput\n                 type=\"text\"/>\n        </mat-form-field>\n      </mat-list-item>\n      <mat-list-item>\n        <mat-slide-toggle [(ngModel)]=\"sanitize\"\n                          matTooltip=\"Enables html sanitize, it will sanitize the converter html output by `DomSanitizer`.\">\n          sanitize\n        </mat-slide-toggle>\n      </mat-list-item>\n      <mat-list-item>\n        <mat-form-field matLine>\n          <mat-select (ngModelChange)=\"flavorChange($event)\" [ngModel]=\"flavor\" placeholder=\"Flavor\">\n            <mat-option *ngFor=\"let flavor of flavors\" [value]=\"flavor\">\n              {{flavor}}\n            </mat-option>\n          </mat-select>\n        </mat-form-field>\n      </mat-list-item>\n      <mat-list-item>\n        <button mat-button matLine (click)=\"config.close()\">Close</button>\n      </mat-list-item>\n    </mat-nav-list>\n  </mat-sidenav>\n  <mat-sidenav-content class=\"editor-content\">\n    <div class=\"editor-col\">\n      <textarea [(ngModel)]=\"markdown\" class=\"editor-box\"></textarea>\n    </div>\n    <div class=\"editor-col\">\n      <showdown [sanitize]=\"sanitize\" [value]=\"markdown\" class=\"editor-box markdown-body\"></showdown>\n    </div>\n    <button mat-fab class=\"config-btn\" color=\"primary\" (click)=\"config.toggle()\">\n      <mat-icon>settings</mat-icon>\n    </button>\n  </mat-sidenav-content>\n</mat-sidenav-container>\n","import { NgModule } from '@angular/core';\nimport { RouterModule, Routes } from '@angular/router';\nimport { EditorComponent } from './editor/editor.component';\n\nconst ROUTES: Routes = [\n  {path: '**', component: EditorComponent}\n];\n\n@NgModule({\n  imports: [RouterModule.forRoot(ROUTES)],\n  exports: [RouterModule]\n})\nexport class AppRoutingModule {\n}\n","import { HttpClient } from '@angular/common/http';\nimport { Component, OnInit, ViewChild } from '@angular/core';\nimport { ShowdownComponent } from 'ngx-showdown';\nimport * as Showdown from 'showdown';\n\n@Component({\n  selector: 'editor',\n  templateUrl: './editor.component.html',\n  styleUrls: ['./editor.component.scss']\n})\nexport class EditorComponent implements OnInit {\n\n  @ViewChild(ShowdownComponent, {static: true}) showdownComponent: ShowdownComponent;\n\n  schema: any = Showdown.getDefaultOptions(false);\n  optionsKeys: string[] = Object.keys(this.schema);\n  flavors: Showdown.Flavor[] = ['allOn', 'ghost', 'github', 'original', 'vanilla'];\n\n  markdown: string = '';\n  options: Showdown.ShowdownOptions;\n  sanitize: boolean = false;\n  flavor: Showdown.Flavor;\n\n  constructor(public http: HttpClient) {\n  }\n\n  ngOnInit(): void {\n    this.flavor = this.showdownComponent.getFlavor();\n    this.options = this.showdownComponent.getOptions();\n    this\n      .http\n      .get('./assets/example.md', {responseType: 'text'})\n      .subscribe((res) => this.markdown = res);\n  }\n\n  optionChange(key: string, value: any): void {\n    this.showdownComponent.setOption(key, value);\n    this.showdownComponent.render();\n  }\n\n  flavorChange(flavor: Showdown.Flavor): void {\n    if (flavor !== 'vanilla' && flavor !== 'allOn') {\n      this.showdownComponent.setFlavor('vanilla');\n    }\n    this.showdownComponent.setFlavor(flavor);\n    this.showdownComponent.render();\n  }\n\n}\n","import { HttpClientModule } from '@angular/common/http';\nimport { NgModule } from '@angular/core';\nimport { FormsModule } from '@angular/forms';\nimport { BrowserModule } from '@angular/platform-browser';\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations';\nimport { RouterModule } from '@angular/router';\n\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatFormFieldModule } from '@angular/material/form-field';\nimport { MatIconModule } from '@angular/material/icon';\nimport { MatInputModule } from '@angular/material/input';\nimport { MatListModule } from '@angular/material/list';\nimport { MatSelectModule } from '@angular/material/select';\nimport { MatSidenavModule } from '@angular/material/sidenav';\nimport { MatSlideToggleModule } from '@angular/material/slide-toggle';\nimport { MatSliderModule } from '@angular/material/slider';\nimport { MatToolbarModule } from '@angular/material/toolbar';\nimport { MatTooltipModule } from '@angular/material/tooltip';\n\nimport { ShowdownModule } from 'ngx-showdown';\nimport * as Showdown from 'showdown';\nimport highlightExtension from 'showdown-highlight';\n\nimport { AppRoutingModule } from './app-routing.module';\nimport { AppComponent } from './app.component';\nimport { EditorComponent } from './editor/editor.component';\n\nlet mdToSdExtension: Showdown.RegexReplaceExtension = {\n  type: 'lang',\n  regex: new RegExp('`Markdown`', 'g'),\n  replace: '`Showdown`'\n};\n\n@NgModule({\n  imports: [\n    BrowserModule,\n    BrowserAnimationsModule,\n    FormsModule,\n    HttpClientModule,\n\n    // material\n    MatInputModule,\n    MatSlideToggleModule,\n    MatSliderModule,\n    MatToolbarModule,\n    MatButtonModule,\n    MatListModule,\n    MatSidenavModule,\n    MatIconModule,\n    MatSelectModule,\n    MatFormFieldModule,\n    MatTooltipModule,\n    RouterModule,\n\n    ShowdownModule.forRoot({\n      flavor: 'github',\n      underline: true,\n      extensions: [mdToSdExtension, highlightExtension]\n    }),\n\n    AppRoutingModule\n  ],\n  declarations: [AppComponent, EditorComponent],\n  bootstrap: [AppComponent]\n})\nexport class AppModule {\n}\n","import { Component } from '@angular/core';\n\n@Component({\n  selector: 'app-demo',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.scss']\n})\nexport class AppComponent {\n\n}\n","<div class=\"app-container\">\n  <mat-toolbar class=\"app-header\" color=\"primary\">\n    <a aria-label=\"Angular Showdown\" class=\"header-title\" href=\"/\" mat-button>\n      <img alt=\"ngx-showdown\" class=\"title-logo\" src=\"assets/logo.png\"/>\n      <span class=\"title-text\">\n        <span>how</span>\n        <span class=\"title-text-end\">down</span>\n      </span>\n    </a>\n    <div class=\"header-space\"></div>\n    <a aria-label=\"Documentation\" href=\"docs/index.html\" mat-button target=\"_blank\"><i class=\"fas fa-file-alt\"></i> Docs</a>\n    <a aria-label=\"GitHub Repository\" href=\"https://github.com/yisraelx/ngx-showdown\" mat-button target=\"_blank\"><i\n      class=\"fab fa-github\"></i> Github</a>\n  </mat-toolbar>\n  <div class=\"app-content\">\n    <router-outlet></router-outlet>\n  </div>\n</div>\n","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nimport './vendor';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.error(err));\n","function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"zn8P\";"]}