var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.5","fields":["title","body"],"fieldVectors":[["title/components/ShowdownComponent.html",[0,0.494,1,0.645]],["body/components/ShowdownComponent.html",[0,0.866,1,1.031,2,1.608,3,0.366,4,0.287,5,0.975,6,0.975,7,0.287,8,0.736,9,0.603,10,1.241,11,2.259,12,1.46,13,1.503,14,1.217,15,0.603,16,0.758,17,0.093,18,1.139,19,0.701,20,0.755,21,0.474,22,0.896,23,0.603,24,1.031,25,1.01,26,0.474,27,1.855,28,2.438,29,1.835,30,0.953,31,1.616,32,1.616,33,1.413,34,1.576,35,1.437,36,2.136,37,1.608,38,1.53,39,1.215,40,1.336,41,1.213,42,1.213,43,1.985,44,0.953,45,1.65,46,1.678,47,1.174,48,0.701,49,1.213,50,2.52,51,1.678,52,1.608,53,1.213,54,1.213,55,1.213,56,1.215,57,0.34,58,0.953,59,2.051,60,1.547,61,0.953,62,1.213,63,2.051,64,0.46,65,0.474,66,1.215,67,1.547,68,2.731,69,1.608,70,0.578,71,0.975,72,2.379,73,2.051,74,2.136,75,0.967,76,1.122,77,1.217,78,0.975,79,0.987,80,1.174,81,0.733,82,1.174,83,1.608,84,0.967,85,0.975,86,0.987,87,2.051,88,1.608,89,1.213,90,1.213,91,2.632,92,1.608,93,2.051,94,1.215,95,2.051,96,2.051,97,2.051,98,2.051,99,2.051,100,2.051,101,2.051,102,2.051,103,2.051,104,2.051,105,2.111,106,2.051,107,2.051,108,1.855,109,1.547,110,1.608,111,2.051,112,2.051,113,0.975,114,1.547,115,1.608,116,0.975,117,1.213,118,0.061,119,0.953,120,1.213,121,1.547,122,0.893,123,1.98,124,0.975,125,0.736,126,0.975,127,0.975,128,0.975,129,0.578,130,0.46,131,0.578,132,0.578,133,1.241,134,1.213,135,0.975,136,0.953,137,0.975,138,0.975,139,0.975,140,0.975,141,1.608,142,2.051,143,0.975,144,0.975,145,0.975,146,0.736,147,0.975,148,0.975,149,0.975,150,0.975,151,0.975,152,0.975,153,0.975,154,0.736,155,0.975,156,0.975,157,0.975,158,0.975,159,0.975,160,0.975,161,0.975,162,0.975,163,0.975,164,0.975,165,0.975,166,0.975,167,0.975,168,0.975,169,0.975,170,0.578,171,1.608,172,0.975,173,0.736,174,0.736,175,0.701,176,1.559,177,1.559,178,0.975,179,2.379,180,0.46,181,0.975,182,0.975,183,0.736,184,1.213,185,0.975,186,0.975,187,0.975,188,0.975,189,1.608,190,0.975,191,0.736,192,0.736,193,1.213,194,1.985,195,0.736,196,0.975,197,0.578,198,0.975,199,0.975,200,0.975,201,0.975,202,0.736,203,0.736,204,0.736,205,0.975,206,0.366,207,1.547,208,0.975,209,0.975,210,0.975,211,1.559,212,1.559,213,1.559,214,0.975,215,1.795,216,0.975,217,0.975,218,0.975,219,0.975,220,0.975,221,1.608,222,0.975,223,0.975,224,0.975,225,0.975,226,0.736,227,1.608,228,0.736,229,0.975,230,0.975,231,0.975,232,1.213,233,0.975,234,0.975,235,0.736,236,0.975,237,0.975,238,0.578,239,2.379,240,0.975,241,0.736,242,0.287,243,0.736,244,0.975,245,0.033,246,0.02]],["title/injectables/ShowdownConverter.html",[57,0.363,247,0.82]],["body/injectables/ShowdownConverter.html",[3,0.801,4,0.629,7,0.629,9,1.092,12,1.092,13,1.092,14,1.092,15,1.092,16,1.373,17,0.093,18,1.222,19,1.049,20,0.842,21,1.049,22,0.889,24,1.16,25,1.098,26,0.858,29,1.855,30,1.725,35,1.335,38,1.756,45,1.678,47,1.335,56,1.963,57,0.681,64,1.007,65,0.858,66,1.963,70,1.265,75,1.373,76,1.678,77,1.092,79,1.092,80,1.092,81,0.658,82,1.243,84,1.007,86,1.335,108,1.725,118,0.044,122,0.801,123,1.725,125,2.196,131,1.265,133,1.007,174,2.196,175,0.858,192,1.61,206,0.801,211,1.725,212,1.725,213,1.725,215,2.196,232,2.196,235,1.61,245,0.06,246,0.044,247,1.442,248,2.135,249,2.499,250,1.61,251,1.373,252,2.911,253,2.196,254,2.196,255,2.911,256,2.911,257,2.911,258,2.911,259,2.911,260,2.135,261,2.135,262,2.135,263,2.135,264,2.135,265,2.135,266,1.265,267,2.135,268,2.135,269,2.135,270,1.61,271,2.135,272,2.135,273,2.135,274,2.196,275,2.135,276,2.135]],["title/modules/ShowdownModule.html",[277,1.296,278,0.82]],["body/modules/ShowdownModule.html",[1,0.84,3,0.776,4,0.61,7,0.61,9,1.069,14,1.223,17,0.093,18,1.248,19,1.215,20,0.832,21,1.035,22,0.898,23,1.588,24,1.086,25,1.086,26,1.035,39,1.689,40,1.344,46,1.689,57,0.631,65,0.61,75,1.84,76,1.737,77,0.776,79,0.776,80,0.776,81,0.468,82,0.776,86,1.318,118,0.042,122,0.776,131,1.226,132,1.226,133,0.976,134,1.561,175,0.84,176,1.226,177,1.226,180,0.976,206,0.776,238,1.226,242,0.84,245,0.058,246,0.042,251,1.657,266,1.689,274,2.459,277,1.226,278,1.618,279,1.226,280,0.776,281,1.561,282,2.459,283,1.561,284,1.561,285,1.561,286,1.561,287,2.15,288,1.561,289,1.226,290,2.07,291,2.649,292,2.649,293,2.354,294,2.07,295,2.85,296,2.07,297,2.15,298,2.85,299,2.85,300,2.15,301,2.15,302,2.85,303,2.85,304,2.85,305,2.85,306,2.15,307,2.85,308,3.26,309,1.561,310,1.069,311,2.07,312,2.07,313,1.561,314,1.561]],["title/pipes/ShowdownPipe.html",[310,0.82,315,0.82]],["body/pipes/ShowdownPipe.html",[0,0.667,3,0.817,4,0.642,7,0.642,9,1.107,10,1.392,12,1.546,13,1.582,14,1.107,15,1.107,16,1.392,17,0.093,18,1.202,19,1.058,20,0.757,21,0.87,22,0.953,23,1.107,24,1.106,25,1.106,26,0.87,28,2.483,29,1.944,31,1.392,32,1.392,33,1.392,34,1.392,35,1.483,38,1.769,40,1.392,56,1.291,57,0.489,58,1.291,61,1.291,65,0.642,77,0.817,79,0.817,80,1.256,81,0.492,82,0.817,84,1.027,86,1.107,118,0.069,122,1.346,132,1.291,136,1.291,170,1.749,175,0.87,180,1.027,183,1.643,206,1.107,245,0.06,246,0.045,310,1.45,315,1.346,316,2.178,317,1.643,318,3.182,319,2.951,320,2.951,321,2.951,322,2.178,323,2.951,324,2.178,325,2.178]],["title/directives/SourceDirective.html",[48,0.645,242,0.645]],["body/directives/SourceDirective.html",[0,0.723,1,1.166,3,0.63,4,0.943,7,0.495,9,0.922,10,1.371,12,1.412,13,1.377,14,1.276,15,0.922,16,1.159,17,0.093,18,1.166,19,0.943,20,0.769,21,0.725,22,0.555,23,0.922,24,0.943,25,1.003,26,0.725,27,1.895,31,1.508,32,1.508,33,1.159,34,0.792,35,1.412,45,1.676,46,1.895,47,0.63,48,1.151,51,2.23,54,1.854,55,1.854,58,1.456,60,2.192,61,0.995,62,1.267,64,0.792,65,0.725,66,1.722,67,1.854,70,0.995,77,1.2,79,0.922,80,0.922,81,0.723,82,0.922,84,0.792,94,1.456,105,1.456,108,1.722,118,0.034,119,1.456,120,1.854,121,1.267,122,0.63,123,1.722,133,0.792,175,0.725,176,1.722,177,1.722,184,1.267,191,1.267,193,1.267,194,1.854,197,2.344,202,1.267,204,1.267,206,0.63,207,1.267,211,0.995,212,0.995,213,0.995,226,1.267,228,1.267,241,1.267,242,1.132,243,1.854,245,0.05,246,0.034,293,1.456,309,1.267,326,1.267,327,1.854,328,2.457,329,2.457,330,3.197,331,2.192,332,3.2,333,2.944,334,2.412,335,2.457,336,2.457,337,2.457,338,2.839,339,2.457,340,2.457,341,1.68,342,3.197,343,2.412,344,2.457,345,2.457,346,1.68,347,3.197,348,2.457,349,2.457,350,2.457,351,1.68,352,2.906,353,2.457,354,0.995,355,1.68,356,1.68,357,2.457,358,1.68,359,1.68,360,1.68,361,1.68,362,1.68,363,2.457]],["title/coverage.html",[364,2.232]],["body/coverage.html",[0,0.739,1,0.963,7,0.963,8,2.465,17,0.088,48,0.963,57,0.542,81,0.739,118,0.067,242,0.963,245,0.078,246,0.067,247,1.226,249,2.465,250,2.465,310,1.226,315,1.226,317,2.465,326,2.465,354,1.936,364,2.465,365,1.936,366,3.268,367,3.268,368,3.268,369,3.268,370,3.268,371,3.268,372,3.268,373,3.268,374,3.268,375,3.268,376,3.268,377,3.268]],["title/dependencies.html",[280,0.984,378,1.387]],["body/dependencies.html",[17,0.089,20,0.76,22,0.76,118,0.069,129,1.993,130,1.587,245,0.079,246,0.069,280,1.262,379,2.537,380,2.537,381,4.085,382,2.537,383,3.364,384,3.364]],["title/index.html",[64,0.867,385,1.387,386,1.387]],["body/index.html",[0,0.881,1,0.861,4,0.633,10,1.378,11,1.967,12,1.371,13,1.338,15,0.526,17,0.092,18,1.254,19,0.861,20,0.87,21,1.119,22,0.974,24,1.135,25,1.135,26,0.979,27,1.866,28,2.309,29,1.815,30,0.831,31,1.485,32,1.76,33,1.485,34,1.631,35,1.181,36,1.619,38,1.23,39,1.731,40,1.682,41,1.057,42,1.619,43,1.057,44,1.545,45,1.724,47,1.246,48,0.769,49,1.967,50,1.619,51,2.248,53,1.967,57,0.551,65,0.413,68,1.619,74,1.057,75,1.485,76,1.567,81,0.589,86,1.096,89,1.057,90,1.057,94,1.731,105,1.545,109,1.057,114,1.967,117,1.967,118,0.029,119,1.272,129,0.831,130,0.661,136,1.272,146,1.967,154,1.619,170,0.831,173,1.619,175,0.413,180,0.661,195,1.967,197,0.831,203,1.057,242,0.633,245,0.044,246,0.053,247,0.805,251,0.661,253,1.057,254,1.057,266,1.731,270,1.057,278,1.371,280,0.805,291,1.057,292,1.967,293,2.048,297,1.057,300,2.506,301,1.619,306,2.608,310,0.805,313,1.057,314,1.057,315,0.526,318,1.619,327,1.057,331,1.619,332,1.967,333,2.69,334,1.057,338,1.057,343,1.057,354,0.831,365,0.831,378,1.057,379,1.057,380,1.057,382,1.057,387,2.922,388,1.402,389,2.146,390,1.402,391,1.402,392,1.402,393,1.402,394,3.457,395,2.922,396,2.146,397,1.402,398,1.402,399,1.402,400,1.402,401,1.402,402,1.402,403,1.402,404,2.607,405,1.402,406,2.146,407,2.607,408,2.607,409,1.402,410,1.402,411,1.402,412,1.402,413,1.402,414,1.402,415,1.402,416,2.607,417,2.146,418,2.146,419,1.402,420,1.402,421,1.402,422,1.402,423,1.402,424,1.402,425,1.402,426,1.402,427,3.566,428,2.146,429,1.402,430,1.402,431,1.402,432,1.402,433,1.402,434,1.402,435,1.402,436,1.402,437,1.402,438,2.607,439,2.146,440,2.146,441,1.402,442,1.402,443,1.402,444,1.402,445,1.402,446,1.402,447,1.402,448,2.607,449,2.146,450,1.402,451,2.607,452,1.402,453,2.146,454,1.402,455,2.146,456,1.057,457,1.402,458,1.402,459,2.146,460,1.402,461,1.402,462,1.402,463,1.402,464,1.402,465,1.402,466,1.402,467,2.146,468,1.402,469,1.402,470,1.402,471,1.402,472,2.146,473,1.402,474,1.402,475,1.402,476,1.402,477,2.607,478,1.402,479,1.402,480,1.402,481,2.607,482,1.402,483,2.146,484,1.402,485,1.402,486,1.402,487,1.402,488,1.402,489,1.402,490,1.402,491,1.402,492,2.146,493,1.402,494,1.402,495,2.607,496,1.402,497,1.402,498,1.402,499,1.402,500,1.402,501,1.402,502,1.272,503,1.057,504,1.057,505,1.057,506,1.402,507,1.402,508,1.057]],["title/license.html",[385,1.387,386,1.387,502,1.09]],["body/license.html",[17,0.079,47,1.347,118,0.06,245,0.074,246,0.06,289,1.752,365,1.752,456,2.23,502,1.752,503,2.918,504,2.23,505,2.23,508,2.709,509,3.591,510,2.956,511,2.956,512,2.956,513,2.956,514,2.956,515,2.956,516,3.591,517,4.312,518,2.956,519,2.956,520,2.956,521,3.869,522,2.956,523,3.591,524,2.956,525,2.956,526,2.956,527,2.956,528,2.956,529,2.956,530,2.956,531,2.956,532,2.956,533,3.591,534,2.956,535,2.956,536,2.956,537,2.956,538,2.956,539,2.956,540,2.956,541,3.591,542,3.591,543,2.956,544,2.956,545,2.956,546,2.956,547,2.956,548,2.956,549,2.956,550,2.956,551,2.956,552,2.956,553,2.956,554,2.956,555,2.956,556,2.956,557,2.956,558,2.956,559,2.956,560,2.956,561,2.956,562,2.956,563,2.956,564,2.956,565,2.956,566,2.956,567,2.956,568,2.956,569,2.956,570,2.956,571,2.956]],["title/modules.html",[279,1.753]],["body/modules.html",[17,0.08,118,0.07,130,1.622,245,0.08,246,0.07,278,1.29,279,2.038,572,3.44,573,3.44,574,3.44]],["title/overview.html",[575,2.232]],["body/overview.html",[0,0.723,17,0.086,23,1.629,44,2.496,48,0.943,57,0.664,118,0.065,238,1.896,245,0.077,246,0.065,247,1.2,251,1.509,277,2.231,278,1.617,280,1.2,281,2.413,282,2.413,283,2.413,284,2.413,285,2.413,286,2.413,287,2.84,288,2.413,289,1.896,315,1.2,575,2.413]]],"invertedIndex":[["",{"_index":17,"title":{},"body":{"components/ShowdownComponent.html":{},"injectables/ShowdownConverter.html":{},"modules/ShowdownModule.html":{},"pipes/ShowdownPipe.html":{},"directives/SourceDirective.html":{},"coverage.html":{},"dependencies.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{}}}],["1",{"_index":44,"title":{},"body":{"components/ShowdownComponent.html":{},"index.html":{},"overview.html":{}}}],["1.9.1",{"_index":384,"title":{},"body":{"dependencies.html":{}}}],["1.9.3",{"_index":383,"title":{},"body":{"dependencies.html":{}}}],["1/1",{"_index":373,"title":{},"body":{"coverage.html":{}}}],["100",{"_index":372,"title":{},"body":{"coverage.html":{}}}],["1px",{"_index":102,"title":{},"body":{"components/ShowdownComponent.html":{}}}],["2",{"_index":387,"title":{},"body":{"index.html":{}}}],["2/3",{"_index":369,"title":{},"body":{"coverage.html":{}}}],["3",{"_index":88,"title":{},"body":{"components/ShowdownComponent.html":{}}}],["4/5",{"_index":375,"title":{},"body":{"coverage.html":{}}}],["5px",{"_index":100,"title":{},"body":{"components/ShowdownComponent.html":{}}}],["6/7",{"_index":371,"title":{},"body":{"coverage.html":{}}}],["66",{"_index":368,"title":{},"body":{"coverage.html":{}}}],["80",{"_index":374,"title":{},"body":{"coverage.html":{}}}],["85",{"_index":370,"title":{},"body":{"coverage.html":{}}}],["9.0.1",{"_index":381,"title":{},"body":{"dependencies.html":{}}}],["95",{"_index":98,"title":{},"body":{"components/ShowdownComponent.html":{}}}],["__",{"_index":177,"title":{},"body":{"components/ShowdownComponent.html":{},"modules/ShowdownModule.html":{},"directives/SourceDirective.html":{}}}],["__example",{"_index":176,"title":{},"body":{"components/ShowdownComponent.html":{},"modules/ShowdownModule.html":{},"directives/SourceDirective.html":{}}}],["__foo__",{"_index":421,"title":{},"body":{"index.html":{}}}],["__some",{"_index":319,"title":{},"body":{"pipes/ShowdownPipe.html":{}}}],["_domsanitizer",{"_index":73,"title":{},"body":{"components/ShowdownComponent.html":{}}}],["_elementref",{"_index":83,"title":{},"body":{"components/ShowdownComponent.html":{}}}],["_http",{"_index":342,"title":{},"body":{"directives/SourceDirective.html":{}}}],["_sanitize",{"_index":185,"title":{},"body":{"components/ShowdownComponent.html":{}}}],["_showdowncomponent",{"_index":345,"title":{},"body":{"directives/SourceDirective.html":{}}}],["_tooption",{"_index":137,"title":{},"body":{"components/ShowdownComponent.html":{}}}],["_tooption(sanitize",{"_index":190,"title":{},"body":{"components/ShowdownComponent.html":{}}}],["_tooption(value",{"_index":236,"title":{},"body":{"components/ShowdownComponent.html":{}}}],["abcbind",{"_index":419,"title":{},"body":{"index.html":{}}}],["abcsanitize",{"_index":420,"title":{},"body":{"index.html":{}}}],["above",{"_index":540,"title":{},"body":{"license.html":{}}}],["access",{"_index":231,"title":{},"body":{"components/ShowdownComponent.html":{}}}],["accessors",{"_index":69,"title":{},"body":{"components/ShowdownComponent.html":{}}}],["action",{"_index":565,"title":{},"body":{"license.html":{}}}],["actual_component",{"_index":244,"title":{},"body":{"components/ShowdownComponent.html":{}}}],["add",{"_index":291,"title":{},"body":{"modules/ShowdownModule.html":{},"index.html":{}}}],["alias",{"_index":111,"title":{},"body":{"components/ShowdownComponent.html":{}}}],["and/or",{"_index":531,"title":{},"body":{"license.html":{}}}],["angular",{"_index":10,"title":{},"body":{"components/ShowdownComponent.html":{},"pipes/ShowdownPipe.html":{},"directives/SourceDirective.html":{},"index.html":{}}}],["angular/angular/#11859",{"_index":471,"title":{},"body":{"index.html":{}}}],["angular/common",{"_index":380,"title":{},"body":{"dependencies.html":{},"index.html":{}}}],["angular/common/http",{"_index":331,"title":{},"body":{"directives/SourceDirective.html":{},"index.html":{}}}],["angular/core",{"_index":20,"title":{},"body":{"components/ShowdownComponent.html":{},"injectables/ShowdownConverter.html":{},"modules/ShowdownModule.html":{},"pipes/ShowdownPipe.html":{},"directives/SourceDirective.html":{},"dependencies.html":{},"index.html":{}}}],["angular/platform",{"_index":129,"title":{},"body":{"components/ShowdownComponent.html":{},"dependencies.html":{},"index.html":{}}}],["anther",{"_index":49,"title":{},"body":{"components/ShowdownComponent.html":{},"index.html":{}}}],["aot",{"_index":478,"title":{},"body":{"index.html":{}}}],["app",{"_index":292,"title":{},"body":{"modules/ShowdownModule.html":{},"index.html":{}}}],["appmodule",{"_index":26,"title":{},"body":{"components/ShowdownComponent.html":{},"injectables/ShowdownConverter.html":{},"modules/ShowdownModule.html":{},"pipes/ShowdownPipe.html":{},"directives/SourceDirective.html":{},"index.html":{}}}],["arising",{"_index":569,"title":{},"body":{"license.html":{}}}],["associated",{"_index":518,"title":{},"body":{"license.html":{}}}],["authors",{"_index":558,"title":{},"body":{"license.html":{}}}],["b",{"_index":53,"title":{},"body":{"components/ShowdownComponent.html":{},"index.html":{}}}],["backslashescapeshtmltags",{"_index":143,"title":{},"body":{"components/ShowdownComponent.html":{}}}],["bar",{"_index":299,"title":{},"body":{"modules/ShowdownModule.html":{}}}],["bcontribute",{"_index":487,"title":{},"body":{"index.html":{}}}],["bind",{"_index":27,"title":{},"body":{"components/ShowdownComponent.html":{},"directives/SourceDirective.html":{},"index.html":{}}}],["bindentation",{"_index":484,"title":{},"body":{"index.html":{}}}],["binding",{"_index":406,"title":{},"body":{"index.html":{}}}],["black",{"_index":104,"title":{},"body":{"components/ShowdownComponent.html":{}}}],["bold",{"_index":37,"title":{},"body":{"components/ShowdownComponent.html":{}}}],["boolean",{"_index":91,"title":{},"body":{"components/ShowdownComponent.html":{}}}],["bootstrap",{"_index":281,"title":{},"body":{"modules/ShowdownModule.html":{},"overview.html":{}}}],["border",{"_index":101,"title":{},"body":{"components/ShowdownComponent.html":{}}}],["both",{"_index":416,"title":{},"body":{"index.html":{}}}],["box",{"_index":96,"title":{},"body":{"components/ShowdownComponent.html":{}}}],["browse",{"_index":574,"title":{},"body":{"modules.html":{}}}],["browser",{"_index":130,"title":{},"body":{"components/ShowdownComponent.html":{},"dependencies.html":{},"index.html":{},"modules.html":{}}}],["browser/domsanitizer#sanitize",{"_index":187,"title":{},"body":{"components/ShowdownComponent.html":{}}}],["buildcredits",{"_index":500,"title":{},"body":{"index.html":{}}}],["built",{"_index":493,"title":{},"body":{"index.html":{}}}],["bwithout",{"_index":483,"title":{},"body":{"index.html":{}}}],["c",{"_index":409,"title":{},"body":{"index.html":{}}}],["call",{"_index":202,"title":{},"body":{"components/ShowdownComponent.html":{},"directives/SourceDirective.html":{}}}],["causes",{"_index":470,"title":{},"body":{"index.html":{}}}],["changes",{"_index":203,"title":{},"body":{"components/ShowdownComponent.html":{},"index.html":{}}}],["char",{"_index":475,"title":{},"body":{"index.html":{}}}],["charge",{"_index":513,"title":{},"body":{"license.html":{}}}],["chars",{"_index":474,"title":{},"body":{"index.html":{}}}],["check",{"_index":196,"title":{},"body":{"components/ShowdownComponent.html":{}}}],["claim",{"_index":561,"title":{},"body":{"license.html":{}}}],["class",{"_index":25,"title":{},"body":{"components/ShowdownComponent.html":{},"injectables/ShowdownConverter.html":{},"modules/ShowdownModule.html":{},"pipes/ShowdownPipe.html":{},"directives/SourceDirective.html":{},"index.html":{}}}],["cli",{"_index":494,"title":{},"body":{"index.html":{}}}],["click",{"_index":109,"title":{},"body":{"components/ShowdownComponent.html":{},"index.html":{}}}],["cluster_showdownmodule",{"_index":283,"title":{},"body":{"modules/ShowdownModule.html":{},"overview.html":{}}}],["cluster_showdownmodule_declarations",{"_index":284,"title":{},"body":{"modules/ShowdownModule.html":{},"overview.html":{}}}],["cluster_showdownmodule_exports",{"_index":285,"title":{},"body":{"modules/ShowdownModule.html":{},"overview.html":{}}}],["cluster_showdownmodule_providers",{"_index":286,"title":{},"body":{"modules/ShowdownModule.html":{},"overview.html":{}}}],["code",{"_index":173,"title":{},"body":{"components/ShowdownComponent.html":{},"index.html":{}}}],["codeblocks.after",{"_index":304,"title":{},"body":{"modules/ShowdownModule.html":{}}}],["color",{"_index":435,"title":{},"body":{"index.html":{}}}],["colorextension",{"_index":428,"title":{},"body":{"index.html":{}}}],["compile",{"_index":223,"title":{},"body":{"components/ShowdownComponent.html":{}}}],["compiler",{"_index":479,"title":{},"body":{"index.html":{}}}],["completehtmldocument",{"_index":144,"title":{},"body":{"components/ShowdownComponent.html":{}}}],["component",{"_index":0,"title":{"components/ShowdownComponent.html":{}},"body":{"components/ShowdownComponent.html":{},"pipes/ShowdownPipe.html":{},"directives/SourceDirective.html":{},"coverage.html":{},"index.html":{},"overview.html":{}}}],["component_template",{"_index":240,"title":{},"body":{"components/ShowdownComponent.html":{}}}],["components",{"_index":2,"title":{},"body":{"components/ShowdownComponent.html":{}}}],["conditions",{"_index":539,"title":{},"body":{"license.html":{}}}],["config",{"_index":75,"title":{},"body":{"components/ShowdownComponent.html":{},"injectables/ShowdownConverter.html":{},"modules/ShowdownModule.html":{},"index.html":{}}}],["config.extensions",{"_index":267,"title":{},"body":{"injectables/ShowdownConverter.html":{}}}],["config.flavor",{"_index":269,"title":{},"body":{"injectables/ShowdownConverter.html":{}}}],["config.provider",{"_index":131,"title":{},"body":{"components/ShowdownComponent.html":{},"injectables/ShowdownConverter.html":{},"modules/ShowdownModule.html":{}}}],["configurable",{"_index":237,"title":{},"body":{"components/ShowdownComponent.html":{}}}],["connection",{"_index":570,"title":{},"body":{"license.html":{}}}],["console.log",{"_index":305,"title":{},"body":{"modules/ShowdownModule.html":{}}}],["console.log(`some:\\nmarkdown",{"_index":256,"title":{},"body":{"injectables/ShowdownConverter.html":{}}}],["console.log(showdownconverter.makehtml",{"_index":424,"title":{},"body":{"index.html":{}}}],["const",{"_index":134,"title":{},"body":{"components/ShowdownComponent.html":{},"modules/ShowdownModule.html":{}}}],["constructor",{"_index":70,"title":{},"body":{"components/ShowdownComponent.html":{},"injectables/ShowdownConverter.html":{},"directives/SourceDirective.html":{}}}],["constructor(@optional",{"_index":265,"title":{},"body":{"injectables/ShowdownConverter.html":{}}}],["constructor(_elementref",{"_index":71,"title":{},"body":{"components/ShowdownComponent.html":{}}}],["constructor(_showdowncomponent",{"_index":341,"title":{},"body":{"directives/SourceDirective.html":{}}}],["constructor(config",{"_index":260,"title":{},"body":{"injectables/ShowdownConverter.html":{}}}],["constructor(private",{"_index":191,"title":{},"body":{"components/ShowdownComponent.html":{},"directives/SourceDirective.html":{}}}],["constructor(showdowncomponent",{"_index":441,"title":{},"body":{"index.html":{}}}],["constructor(showdownconverter",{"_index":254,"title":{},"body":{"injectables/ShowdownConverter.html":{},"index.html":{}}}],["content",{"_index":51,"title":{},"body":{"components/ShowdownComponent.html":{},"directives/SourceDirective.html":{},"index.html":{}}}],["contentwhen",{"_index":417,"title":{},"body":{"index.html":{}}}],["contract",{"_index":566,"title":{},"body":{"license.html":{}}}],["convert",{"_index":117,"title":{},"body":{"components/ShowdownComponent.html":{},"index.html":{}}}],["converter",{"_index":86,"title":{},"body":{"components/ShowdownComponent.html":{},"injectables/ShowdownConverter.html":{},"modules/ShowdownModule.html":{},"pipes/ShowdownPipe.html":{},"index.html":{}}}],["converter.getoption('color",{"_index":432,"title":{},"body":{"index.html":{}}}],["converter.provider",{"_index":132,"title":{},"body":{"components/ShowdownComponent.html":{},"modules/ShowdownModule.html":{},"pipes/ShowdownPipe.html":{}}}],["converter.provider.ts",{"_index":250,"title":{},"body":{"injectables/ShowdownConverter.html":{},"coverage.html":{}}}],["converter.provider.ts:40",{"_index":261,"title":{},"body":{"injectables/ShowdownConverter.html":{}}}],["converter.provider.ts:53",{"_index":262,"title":{},"body":{"injectables/ShowdownConverter.html":{}}}],["converteroptions",{"_index":449,"title":{},"body":{"index.html":{}}}],["cool",{"_index":107,"title":{},"body":{"components/ShowdownComponent.html":{}}}],["copies",{"_index":533,"title":{},"body":{"license.html":{}}}],["copy",{"_index":516,"title":{},"body":{"license.html":{}}}],["copyright",{"_index":503,"title":{},"body":{"index.html":{},"license.html":{}}}],["coverage",{"_index":364,"title":{"coverage.html":{}},"body":{"coverage.html":{}}}],["created",{"_index":426,"title":{},"body":{"index.html":{}}}],["current",{"_index":120,"title":{},"body":{"components/ShowdownComponent.html":{},"directives/SourceDirective.html":{}}}],["damages",{"_index":562,"title":{},"body":{"license.html":{}}}],["deal",{"_index":520,"title":{},"body":{"license.html":{}}}],["dealings",{"_index":571,"title":{},"body":{"license.html":{}}}],["declarations",{"_index":23,"title":{},"body":{"components/ShowdownComponent.html":{},"modules/ShowdownModule.html":{},"pipes/ShowdownPipe.html":{},"directives/SourceDirective.html":{},"overview.html":{}}}],["declare",{"_index":228,"title":{},"body":{"components/ShowdownComponent.html":{},"directives/SourceDirective.html":{}}}],["default",{"_index":448,"title":{},"body":{"index.html":{}}}],["define",{"_index":229,"title":{},"body":{"components/ShowdownComponent.html":{}}}],["defined",{"_index":77,"title":{},"body":{"components/ShowdownComponent.html":{},"injectables/ShowdownConverter.html":{},"modules/ShowdownModule.html":{},"pipes/ShowdownPipe.html":{},"directives/SourceDirective.html":{}}}],["definition",{"_index":172,"title":{},"body":{"components/ShowdownComponent.html":{}}}],["demo",{"_index":389,"title":{},"body":{"index.html":{}}}],["dependencies",{"_index":280,"title":{"dependencies.html":{}},"body":{"modules/ShowdownModule.html":{},"dependencies.html":{},"index.html":{},"overview.html":{}}}],["deprecated",{"_index":212,"title":{},"body":{"components/ShowdownComponent.html":{},"injectables/ShowdownConverter.html":{},"directives/SourceDirective.html":{}}}],["description",{"_index":9,"title":{},"body":{"components/ShowdownComponent.html":{},"injectables/ShowdownConverter.html":{},"modules/ShowdownModule.html":{},"pipes/ShowdownPipe.html":{},"directives/SourceDirective.html":{}}}],["development",{"_index":491,"title":{},"body":{"index.html":{}}}],["devusage",{"_index":398,"title":{},"body":{"index.html":{}}}],["direct",{"_index":230,"title":{},"body":{"components/ShowdownComponent.html":{}}}],["directive",{"_index":48,"title":{"directives/SourceDirective.html":{}},"body":{"components/ShowdownComponent.html":{},"directives/SourceDirective.html":{},"coverage.html":{},"index.html":{},"overview.html":{}}}],["directives",{"_index":241,"title":{},"body":{"components/ShowdownComponent.html":{},"directives/SourceDirective.html":{}}}],["disableforced4spacesindentedsublists",{"_index":145,"title":{},"body":{"components/ShowdownComponent.html":{}}}],["distribute",{"_index":529,"title":{},"body":{"license.html":{}}}],["documentation",{"_index":365,"title":{},"body":{"coverage.html":{},"index.html":{},"license.html":{}}}],["dom",{"_index":5,"title":{},"body":{"components/ShowdownComponent.html":{}}}],["domsanitizer",{"_index":74,"title":{},"body":{"components/ShowdownComponent.html":{},"index.html":{}}}],["domsanitizer`](https://angular.io/api/platform",{"_index":186,"title":{},"body":{"components/ShowdownComponent.html":{}}}],["dynamic",{"_index":141,"title":{},"body":{"components/ShowdownComponent.html":{}}}],["element",{"_index":50,"title":{},"body":{"components/ShowdownComponent.html":{},"index.html":{}}}],["elementref",{"_index":72,"title":{},"body":{"components/ShowdownComponent.html":{}}}],["eliav",{"_index":505,"title":{},"body":{"index.html":{},"license.html":{}}}],["emoji",{"_index":146,"title":{},"body":{"components/ShowdownComponent.html":{},"index.html":{}}}],["enables",{"_index":93,"title":{},"body":{"components/ShowdownComponent.html":{}}}],["encodeemails",{"_index":147,"title":{},"body":{"components/ShowdownComponent.html":{}}}],["equivalent",{"_index":112,"title":{},"body":{"components/ShowdownComponent.html":{}}}],["error",{"_index":338,"title":{},"body":{"directives/SourceDirective.html":{},"index.html":{}}}],["es6",{"_index":486,"title":{},"body":{"index.html":{}}}],["escape",{"_index":473,"title":{},"body":{"index.html":{}}}],["etc",{"_index":476,"title":{},"body":{"index.html":{}}}],["event",{"_index":456,"title":{},"body":{"index.html":{},"license.html":{}}}],["event.message)\">**loading",{"_index":349,"title":{},"body":{"directives/SourceDirective.html":{}}}],["eventemitter",{"_index":347,"title":{},"body":{"directives/SourceDirective.html":{}}}],["events",{"_index":339,"title":{},"body":{"directives/SourceDirective.html":{}}}],["example",{"_index":14,"title":{},"body":{"components/ShowdownComponent.html":{},"injectables/ShowdownConverter.html":{},"modules/ShowdownModule.html":{},"pipes/ShowdownPipe.html":{},"directives/SourceDirective.html":{}}}],["existing",{"_index":458,"title":{},"body":{"index.html":{}}}],["explanations",{"_index":401,"title":{},"body":{"index.html":{}}}],["export",{"_index":24,"title":{},"body":{"components/ShowdownComponent.html":{},"injectables/ShowdownConverter.html":{},"modules/ShowdownModule.html":{},"pipes/ShowdownPipe.html":{},"directives/SourceDirective.html":{},"index.html":{}}}],["exportas",{"_index":62,"title":{},"body":{"components/ShowdownComponent.html":{},"directives/SourceDirective.html":{}}}],["exports",{"_index":282,"title":{},"body":{"modules/ShowdownModule.html":{},"overview.html":{}}}],["express",{"_index":549,"title":{},"body":{"license.html":{}}}],["extends",{"_index":56,"title":{},"body":{"components/ShowdownComponent.html":{},"injectables/ShowdownConverter.html":{},"pipes/ShowdownPipe.html":{}}}],["extension",{"_index":451,"title":{},"body":{"index.html":{}}}],["extensions",{"_index":266,"title":{},"body":{"injectables/ShowdownConverter.html":{},"modules/ShowdownModule.html":{},"index.html":{}}}],["false",{"_index":136,"title":{},"body":{"components/ShowdownComponent.html":{},"pipes/ShowdownPipe.html":{},"index.html":{}}}],["file",{"_index":7,"title":{},"body":{"components/ShowdownComponent.html":{},"injectables/ShowdownConverter.html":{},"modules/ShowdownModule.html":{},"pipes/ShowdownPipe.html":{},"directives/SourceDirective.html":{},"coverage.html":{}}}],["files",{"_index":519,"title":{},"body":{"license.html":{}}}],["filter(text",{"_index":430,"title":{},"body":{"index.html":{}}}],["fitness",{"_index":554,"title":{},"body":{"license.html":{}}}],["fix",{"_index":90,"title":{},"body":{"components/ShowdownComponent.html":{},"index.html":{}}}],["flavor",{"_index":300,"title":{},"body":{"modules/ShowdownModule.html":{},"index.html":{}}}],["flavors",{"_index":445,"title":{},"body":{"index.html":{}}}],["following",{"_index":538,"title":{},"body":{"license.html":{}}}],["foo",{"_index":298,"title":{},"body":{"modules/ShowdownModule.html":{}}}],["forroot",{"_index":294,"title":{},"body":{"modules/ShowdownModule.html":{}}}],["forroot(config",{"_index":295,"title":{},"body":{"modules/ShowdownModule.html":{}}}],["free",{"_index":512,"title":{},"body":{"license.html":{}}}],["full",{"_index":403,"title":{},"body":{"index.html":{}}}],["furnished",{"_index":536,"title":{},"body":{"license.html":{}}}],["g",{"_index":463,"title":{},"body":{"index.html":{}}}],["get(this.src",{"_index":358,"title":{},"body":{"directives/SourceDirective.html":{}}}],["getting",{"_index":385,"title":{"index.html":{},"license.html":{}},"body":{}}],["ghcodeblocks",{"_index":148,"title":{},"body":{"components/ShowdownComponent.html":{}}}],["ghcompatibleheaderid",{"_index":149,"title":{},"body":{"components/ShowdownComponent.html":{}}}],["ghmentions",{"_index":150,"title":{},"body":{"components/ShowdownComponent.html":{}}}],["ghmentionslink",{"_index":151,"title":{},"body":{"components/ShowdownComponent.html":{}}}],["github",{"_index":301,"title":{},"body":{"modules/ShowdownModule.html":{},"index.html":{}}}],["granted",{"_index":511,"title":{},"body":{"license.html":{}}}],["green",{"_index":433,"title":{},"body":{"index.html":{}}}],["h1",{"_index":407,"title":{},"body":{"index.html":{}}}],["h2",{"_index":408,"title":{},"body":{"index.html":{}}}],["hasownproperty",{"_index":263,"title":{},"body":{"injectables/ShowdownConverter.html":{}}}],["hasownproperty.call(options",{"_index":272,"title":{},"body":{"injectables/ShowdownConverter.html":{}}}],["header",{"_index":36,"title":{},"body":{"components/ShowdownComponent.html":{},"index.html":{}}}],["headerlevelstart",{"_index":87,"title":{},"body":{"components/ShowdownComponent.html":{}}}],["hereby",{"_index":510,"title":{},"body":{"license.html":{}}}],["highlight",{"_index":439,"title":{},"body":{"index.html":{}}}],["highlight.js/styles/default.css",{"_index":440,"title":{},"body":{"index.html":{}}}],["highlightextension",{"_index":438,"title":{},"body":{"index.html":{}}}],["holders",{"_index":559,"title":{},"body":{"license.html":{}}}],["html",{"_index":13,"title":{},"body":{"components/ShowdownComponent.html":{},"injectables/ShowdownConverter.html":{},"pipes/ShowdownPipe.html":{},"directives/SourceDirective.html":{},"index.html":{}}}],["html}\\n",{"_index":258,"title":{},"body":{"injectables/ShowdownConverter.html":{}}}],["http",{"_index":328,"title":{},"body":{"directives/SourceDirective.html":{}}}],["httpclient",{"_index":343,"title":{},"body":{"directives/SourceDirective.html":{},"index.html":{}}}],["httpclientmodule",{"_index":330,"title":{},"body":{"directives/SourceDirective.html":{}}}],["httperrorresponse",{"_index":353,"title":{},"body":{"directives/SourceDirective.html":{}}}],["https://unpkg.com/ngx",{"_index":335,"title":{},"body":{"directives/SourceDirective.html":{}}}],["iconverteroptions",{"_index":275,"title":{},"body":{"injectables/ShowdownConverter.html":{}}}],["iconverteroptionschangeable",{"_index":276,"title":{},"body":{"injectables/ShowdownConverter.html":{}}}],["identifier",{"_index":366,"title":{},"body":{"coverage.html":{}}}],["ignore",{"_index":211,"title":{},"body":{"components/ShowdownComponent.html":{},"injectables/ShowdownConverter.html":{},"directives/SourceDirective.html":{}}}],["implements",{"_index":58,"title":{},"body":{"components/ShowdownComponent.html":{},"pipes/ShowdownPipe.html":{},"directives/SourceDirective.html":{}}}],["implied",{"_index":550,"title":{},"body":{"license.html":{}}}],["import",{"_index":18,"title":{},"body":{"components/ShowdownComponent.html":{},"injectables/ShowdownConverter.html":{},"modules/ShowdownModule.html":{},"pipes/ShowdownPipe.html":{},"directives/SourceDirective.html":{},"index.html":{}}}],["imports",{"_index":293,"title":{},"body":{"modules/ShowdownModule.html":{},"directives/SourceDirective.html":{},"index.html":{}}}],["included",{"_index":543,"title":{},"body":{"license.html":{}}}],["including",{"_index":523,"title":{},"body":{"license.html":{}}}],["indentation",{"_index":89,"title":{},"body":{"components/ShowdownComponent.html":{},"index.html":{}}}],["index",{"_index":64,"title":{"index.html":{}},"body":{"components/ShowdownComponent.html":{},"injectables/ShowdownConverter.html":{},"directives/SourceDirective.html":{}}}],["info",{"_index":3,"title":{},"body":{"components/ShowdownComponent.html":{},"injectables/ShowdownConverter.html":{},"modules/ShowdownModule.html":{},"pipes/ShowdownPipe.html":{},"directives/SourceDirective.html":{}}}],["information",{"_index":400,"title":{},"body":{"index.html":{}}}],["init",{"_index":195,"title":{},"body":{"components/ShowdownComponent.html":{},"index.html":{}}}],["init/changes",{"_index":355,"title":{},"body":{"directives/SourceDirective.html":{}}}],["injectable",{"_index":247,"title":{"injectables/ShowdownConverter.html":{}},"body":{"injectables/ShowdownConverter.html":{},"coverage.html":{},"index.html":{},"overview.html":{}}}],["injectables",{"_index":248,"title":{},"body":{"injectables/ShowdownConverter.html":{}}}],["injected",{"_index":425,"title":{},"body":{"index.html":{}}}],["innerhtml",{"_index":224,"title":{},"body":{"components/ShowdownComponent.html":{}}}],["input",{"_index":105,"title":{},"body":{"components/ShowdownComponent.html":{},"directives/SourceDirective.html":{},"index.html":{}}}],["inputs",{"_index":67,"title":{},"body":{"components/ShowdownComponent.html":{},"directives/SourceDirective.html":{}}}],["install",{"_index":394,"title":{},"body":{"index.html":{}}}],["installrun",{"_index":496,"title":{},"body":{"index.html":{}}}],["instance",{"_index":252,"title":{},"body":{"injectables/ShowdownConverter.html":{}}}],["instances",{"_index":307,"title":{},"body":{"modules/ShowdownModule.html":{}}}],["instead",{"_index":215,"title":{},"body":{"components/ShowdownComponent.html":{},"injectables/ShowdownConverter.html":{}}}],["integration",{"_index":388,"title":{},"body":{"index.html":{}}}],["interface",{"_index":174,"title":{},"body":{"components/ShowdownComponent.html":{},"injectables/ShowdownConverter.html":{}}}],["internal",{"_index":133,"title":{},"body":{"components/ShowdownComponent.html":{},"injectables/ShowdownConverter.html":{},"modules/ShowdownModule.html":{},"directives/SourceDirective.html":{}}}],["interpolation",{"_index":467,"title":{},"body":{"index.html":{}}}],["key",{"_index":232,"title":{},"body":{"components/ShowdownComponent.html":{},"injectables/ShowdownConverter.html":{}}}],["keys",{"_index":140,"title":{},"body":{"components/ShowdownComponent.html":{}}}],["kind",{"_index":548,"title":{},"body":{"license.html":{}}}],["lang",{"_index":453,"title":{},"body":{"index.html":{}}}],["legend",{"_index":238,"title":{},"body":{"components/ShowdownComponent.html":{},"modules/ShowdownModule.html":{},"overview.html":{}}}],["liability",{"_index":563,"title":{},"body":{"license.html":{}}}],["liable",{"_index":560,"title":{},"body":{"license.html":{}}}],["library",{"_index":501,"title":{},"body":{"index.html":{}}}],["license",{"_index":502,"title":{"license.html":{}},"body":{"index.html":{},"license.html":{}}}],["licensed",{"_index":506,"title":{},"body":{"index.html":{}}}],["lifecycle",{"_index":193,"title":{},"body":{"components/ShowdownComponent.html":{},"directives/SourceDirective.html":{}}}],["limitation",{"_index":524,"title":{},"body":{"license.html":{}}}],["limited",{"_index":551,"title":{},"body":{"license.html":{}}}],["line:member",{"_index":218,"title":{},"body":{"components/ShowdownComponent.html":{}}}],["link",{"_index":108,"title":{},"body":{"components/ShowdownComponent.html":{},"injectables/ShowdownConverter.html":{},"directives/SourceDirective.html":{}}}],["list",{"_index":52,"title":{},"body":{"components/ShowdownComponent.html":{}}}],["listen",{"_index":454,"title":{},"body":{"index.html":{}}}],["listeners",{"_index":303,"title":{},"body":{"modules/ShowdownModule.html":{}}}],["listening",{"_index":337,"title":{},"body":{"directives/SourceDirective.html":{}}}],["literalmidwordasterisks",{"_index":152,"title":{},"body":{"components/ShowdownComponent.html":{}}}],["literalmidwordunderscores",{"_index":153,"title":{},"body":{"components/ShowdownComponent.html":{}}}],["live",{"_index":390,"title":{},"body":{"index.html":{}}}],["load",{"_index":197,"title":{},"body":{"components/ShowdownComponent.html":{},"directives/SourceDirective.html":{},"index.html":{}}}],["load(url",{"_index":350,"title":{},"body":{"directives/SourceDirective.html":{}}}],["loading",{"_index":334,"title":{},"body":{"directives/SourceDirective.html":{},"index.html":{}}}],["loads",{"_index":418,"title":{},"body":{"index.html":{}}}],["made",{"_index":452,"title":{},"body":{"index.html":{}}}],["make",{"_index":327,"title":{},"body":{"directives/SourceDirective.html":{},"index.html":{}}}],["manually",{"_index":437,"title":{},"body":{"index.html":{}}}],["map_option",{"_index":135,"title":{},"body":{"components/ShowdownComponent.html":{}}}],["map_option.hasownproperty(value",{"_index":138,"title":{},"body":{"components/ShowdownComponent.html":{}}}],["map_option[value",{"_index":139,"title":{},"body":{"components/ShowdownComponent.html":{}}}],["markdown",{"_index":12,"title":{},"body":{"components/ShowdownComponent.html":{},"injectables/ShowdownConverter.html":{},"pipes/ShowdownPipe.html":{},"directives/SourceDirective.html":{},"index.html":{}}}],["markdown)\\nhtml",{"_index":257,"title":{},"body":{"injectables/ShowdownConverter.html":{}}}],["matching",{"_index":245,"title":{},"body":{"components/ShowdownComponent.html":{},"injectables/ShowdownConverter.html":{},"modules/ShowdownModule.html":{},"pipes/ShowdownPipe.html":{},"directives/SourceDirective.html":{},"coverage.html":{},"dependencies.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{}}}],["md",{"_index":411,"title":{},"body":{"index.html":{}}}],["merchantability",{"_index":553,"title":{},"body":{"license.html":{}}}],["merge",{"_index":527,"title":{},"body":{"license.html":{}}}],["metadata",{"_index":61,"title":{},"body":{"components/ShowdownComponent.html":{},"pipes/ShowdownPipe.html":{},"directives/SourceDirective.html":{}}}],["method",{"_index":194,"title":{},"body":{"components/ShowdownComponent.html":{},"directives/SourceDirective.html":{}}}],["methods",{"_index":65,"title":{},"body":{"components/ShowdownComponent.html":{},"injectables/ShowdownConverter.html":{},"modules/ShowdownModule.html":{},"pipes/ShowdownPipe.html":{},"directives/SourceDirective.html":{},"index.html":{}}}],["mit",{"_index":508,"title":{},"body":{"index.html":{},"license.html":{}}}],["mixing",{"_index":414,"title":{},"body":{"index.html":{}}}],["modify",{"_index":526,"title":{},"body":{"license.html":{}}}],["module",{"_index":277,"title":{"modules/ShowdownModule.html":{}},"body":{"modules/ShowdownModule.html":{},"overview.html":{}}}],["modules",{"_index":279,"title":{"modules.html":{}},"body":{"modules/ShowdownModule.html":{},"modules.html":{}}}],["modulewithproviders",{"_index":308,"title":{},"body":{"modules/ShowdownModule.html":{}}}],["more",{"_index":399,"title":{},"body":{"index.html":{}}}],["name",{"_index":80,"title":{},"body":{"components/ShowdownComponent.html":{},"injectables/ShowdownConverter.html":{},"modules/ShowdownModule.html":{},"pipes/ShowdownPipe.html":{},"directives/SourceDirective.html":{}}}],["new",{"_index":354,"title":{},"body":{"directives/SourceDirective.html":{},"coverage.html":{},"index.html":{}}}],["next",{"_index":217,"title":{},"body":{"components/ShowdownComponent.html":{}}}],["ngmodel",{"_index":427,"title":{},"body":{"index.html":{}}}],["ngmodule",{"_index":19,"title":{},"body":{"components/ShowdownComponent.html":{},"injectables/ShowdownConverter.html":{},"modules/ShowdownModule.html":{},"pipes/ShowdownPipe.html":{},"directives/SourceDirective.html":{},"index.html":{}}}],["ngonchanges",{"_index":204,"title":{},"body":{"components/ShowdownComponent.html":{},"directives/SourceDirective.html":{}}}],["ngoninit",{"_index":198,"title":{},"body":{"components/ShowdownComponent.html":{}}}],["ngpreservewhitespaces",{"_index":481,"title":{},"body":{"index.html":{}}}],["ngx",{"_index":21,"title":{},"body":{"components/ShowdownComponent.html":{},"injectables/ShowdownConverter.html":{},"modules/ShowdownModule.html":{},"pipes/ShowdownPipe.html":{},"directives/SourceDirective.html":{},"index.html":{}}}],["noheaderid",{"_index":154,"title":{},"body":{"components/ShowdownComponent.html":{},"index.html":{}}}],["noninfringement",{"_index":557,"title":{},"body":{"license.html":{}}}],["note",{"_index":447,"title":{},"body":{"index.html":{}}}],["notice",{"_index":541,"title":{},"body":{"license.html":{}}}],["npm",{"_index":395,"title":{},"body":{"index.html":{}}}],["object",{"_index":30,"title":{},"body":{"components/ShowdownComponent.html":{},"injectables/ShowdownConverter.html":{},"index.html":{}}}],["object.defineproperty(showdowncomponent.prototype",{"_index":233,"title":{},"body":{"components/ShowdownComponent.html":{}}}],["obtaining",{"_index":515,"title":{},"body":{"license.html":{}}}],["occur",{"_index":348,"title":{},"body":{"directives/SourceDirective.html":{}}}],["omitextrawlincodeblocks",{"_index":155,"title":{},"body":{"components/ShowdownComponent.html":{}}}],["onchanges",{"_index":60,"title":{},"body":{"components/ShowdownComponent.html":{},"directives/SourceDirective.html":{}}}],["oninit",{"_index":59,"title":{},"body":{"components/ShowdownComponent.html":{}}}],["openlinksinnewwindow",{"_index":156,"title":{},"body":{"components/ShowdownComponent.html":{}}}],["option",{"_index":42,"title":{},"body":{"components/ShowdownComponent.html":{},"index.html":{}}}],["optional",{"_index":82,"title":{},"body":{"components/ShowdownComponent.html":{},"injectables/ShowdownConverter.html":{},"modules/ShowdownModule.html":{},"pipes/ShowdownPipe.html":{},"directives/SourceDirective.html":{}}}],["options",{"_index":29,"title":{},"body":{"components/ShowdownComponent.html":{},"injectables/ShowdownConverter.html":{},"pipes/ShowdownPipe.html":{},"index.html":{}}}],["options(options",{"_index":182,"title":{},"body":{"components/ShowdownComponent.html":{}}}],["options[key",{"_index":273,"title":{},"body":{"injectables/ShowdownConverter.html":{}}}],["options_properties_keys",{"_index":142,"title":{},"body":{"components/ShowdownComponent.html":{}}}],["ordering",{"_index":219,"title":{},"body":{"components/ShowdownComponent.html":{}}}],["original",{"_index":434,"title":{},"body":{"index.html":{}}}],["otherwise",{"_index":568,"title":{},"body":{"license.html":{}}}],["out",{"_index":289,"title":{},"body":{"modules/ShowdownModule.html":{},"license.html":{},"overview.html":{}}}],["output",{"_index":94,"title":{},"body":{"components/ShowdownComponent.html":{},"directives/SourceDirective.html":{},"index.html":{}}}],["outputs",{"_index":340,"title":{},"body":{"directives/SourceDirective.html":{}}}],["override",{"_index":119,"title":{},"body":{"components/ShowdownComponent.html":{},"directives/SourceDirective.html":{},"index.html":{}}}],["overview",{"_index":575,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["package",{"_index":378,"title":{"dependencies.html":{}},"body":{"index.html":{}}}],["padding",{"_index":99,"title":{},"body":{"components/ShowdownComponent.html":{}}}],["param",{"_index":206,"title":{},"body":{"components/ShowdownComponent.html":{},"injectables/ShowdownConverter.html":{},"modules/ShowdownModule.html":{},"pipes/ShowdownPipe.html":{},"directives/SourceDirective.html":{}}}],["parameters",{"_index":79,"title":{},"body":{"components/ShowdownComponent.html":{},"injectables/ShowdownConverter.html":{},"modules/ShowdownModule.html":{},"pipes/ShowdownPipe.html":{},"directives/SourceDirective.html":{}}}],["parse",{"_index":455,"title":{},"body":{"index.html":{}}}],["parseimgdimensions",{"_index":157,"title":{},"body":{"components/ShowdownComponent.html":{}}}],["particular",{"_index":555,"title":{},"body":{"license.html":{}}}],["peer",{"_index":379,"title":{},"body":{"dependencies.html":{},"index.html":{}}}],["permission",{"_index":509,"title":{},"body":{"license.html":{}}}],["permit",{"_index":534,"title":{},"body":{"license.html":{}}}],["person",{"_index":514,"title":{},"body":{"license.html":{}}}],["persons",{"_index":535,"title":{},"body":{"license.html":{}}}],["pipe",{"_index":315,"title":{"pipes/ShowdownPipe.html":{}},"body":{"pipes/ShowdownPipe.html":{},"coverage.html":{},"index.html":{},"overview.html":{}}}],["pipes",{"_index":316,"title":{},"body":{"pipes/ShowdownPipe.html":{}}}],["pipetransform",{"_index":323,"title":{},"body":{"pipes/ShowdownPipe.html":{}}}],["play",{"_index":391,"title":{},"body":{"index.html":{}}}],["plunker",{"_index":393,"title":{},"body":{"index.html":{}}}],["portions",{"_index":545,"title":{},"body":{"license.html":{}}}],["prefixheaderid",{"_index":158,"title":{},"body":{"components/ShowdownComponent.html":{}}}],["preserve",{"_index":482,"title":{},"body":{"index.html":{}}}],["preview",{"_index":106,"title":{},"body":{"components/ShowdownComponent.html":{}}}],["private",{"_index":184,"title":{},"body":{"components/ShowdownComponent.html":{},"directives/SourceDirective.html":{}}}],["problems",{"_index":485,"title":{},"body":{"index.html":{}}}],["project",{"_index":492,"title":{},"body":{"index.html":{}}}],["properties",{"_index":43,"title":{},"body":{"components/ShowdownComponent.html":{},"index.html":{}}}],["property",{"_index":114,"title":{},"body":{"components/ShowdownComponent.html":{},"index.html":{}}}],["provide",{"_index":313,"title":{},"body":{"modules/ShowdownModule.html":{},"index.html":{}}}],["provided",{"_index":546,"title":{},"body":{"license.html":{}}}],["provider",{"_index":404,"title":{},"body":{"index.html":{}}}],["providers",{"_index":251,"title":{},"body":{"injectables/ShowdownConverter.html":{},"modules/ShowdownModule.html":{},"index.html":{},"overview.html":{}}}],["public",{"_index":66,"title":{},"body":{"components/ShowdownComponent.html":{},"injectables/ShowdownConverter.html":{},"directives/SourceDirective.html":{}}}],["publish",{"_index":528,"title":{},"body":{"license.html":{}}}],["pull",{"_index":488,"title":{},"body":{"index.html":{}}}],["pure",{"_index":324,"title":{},"body":{"pipes/ShowdownPipe.html":{}}}],["purpose",{"_index":556,"title":{},"body":{"license.html":{}}}],["rawheaderid",{"_index":159,"title":{},"body":{"components/ShowdownComponent.html":{}}}],["rawprefixheaderid",{"_index":160,"title":{},"body":{"components/ShowdownComponent.html":{}}}],["red",{"_index":436,"title":{},"body":{"index.html":{}}}],["reference",{"_index":54,"title":{},"body":{"components/ShowdownComponent.html":{},"directives/SourceDirective.html":{}}}],["regex",{"_index":461,"title":{},"body":{"index.html":{}}}],["regexp('markdown",{"_index":462,"title":{},"body":{"index.html":{}}}],["release",{"_index":499,"title":{},"body":{"index.html":{}}}],["remove",{"_index":480,"title":{},"body":{"index.html":{}}}],["renamed",{"_index":226,"title":{},"body":{"components/ShowdownComponent.html":{},"directives/SourceDirective.html":{}}}],["render",{"_index":11,"title":{},"body":{"components/ShowdownComponent.html":{},"index.html":{}}}],["render(value",{"_index":115,"title":{},"body":{"components/ShowdownComponent.html":{}}}],["replace",{"_index":464,"title":{},"body":{"index.html":{}}}],["request",{"_index":329,"title":{},"body":{"directives/SourceDirective.html":{}}}],["requests",{"_index":489,"title":{},"body":{"index.html":{}}}],["requires",{"_index":413,"title":{},"body":{"index.html":{}}}],["requirespacebeforeheadingtext",{"_index":161,"title":{},"body":{"components/ShowdownComponent.html":{}}}],["reset",{"_index":288,"title":{},"body":{"modules/ShowdownModule.html":{},"overview.html":{}}}],["responsetype",{"_index":359,"title":{},"body":{"directives/SourceDirective.html":{}}}],["restriction",{"_index":522,"title":{},"body":{"license.html":{}}}],["result",{"_index":118,"title":{},"body":{"components/ShowdownComponent.html":{},"injectables/ShowdownConverter.html":{},"modules/ShowdownModule.html":{},"pipes/ShowdownPipe.html":{},"directives/SourceDirective.html":{},"coverage.html":{},"dependencies.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{}}}],["results",{"_index":246,"title":{},"body":{"components/ShowdownComponent.html":{},"injectables/ShowdownConverter.html":{},"modules/ShowdownModule.html":{},"pipes/ShowdownPipe.html":{},"directives/SourceDirective.html":{},"coverage.html":{},"dependencies.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{}}}],["return",{"_index":180,"title":{},"body":{"components/ShowdownComponent.html":{},"modules/ShowdownModule.html":{},"pipes/ShowdownPipe.html":{},"index.html":{}}}],["returns",{"_index":122,"title":{},"body":{"components/ShowdownComponent.html":{},"injectables/ShowdownConverter.html":{},"modules/ShowdownModule.html":{},"pipes/ShowdownPipe.html":{},"directives/SourceDirective.html":{}}}],["rights",{"_index":525,"title":{},"body":{"license.html":{}}}],["root",{"_index":306,"title":{},"body":{"modules/ShowdownModule.html":{},"index.html":{}}}],["sanitize",{"_index":68,"title":{},"body":{"components/ShowdownComponent.html":{},"index.html":{}}}],["sanitize(sanitize",{"_index":188,"title":{},"body":{"components/ShowdownComponent.html":{}}}],["save",{"_index":397,"title":{},"body":{"index.html":{}}}],["saveand",{"_index":396,"title":{},"body":{"index.html":{}}}],["search",{"_index":457,"title":{},"body":{"index.html":{}}}],["securitycontext",{"_index":128,"title":{},"body":{"components/ShowdownComponent.html":{}}}],["see",{"_index":402,"title":{},"body":{"index.html":{}}}],["selector",{"_index":31,"title":{},"body":{"components/ShowdownComponent.html":{},"pipes/ShowdownPipe.html":{},"directives/SourceDirective.html":{},"index.html":{}}}],["sell",{"_index":532,"title":{},"body":{"license.html":{}}}],["service",{"_index":423,"title":{},"body":{"index.html":{}}}],["set",{"_index":45,"title":{},"body":{"components/ShowdownComponent.html":{},"injectables/ShowdownConverter.html":{},"directives/SourceDirective.html":{},"index.html":{}}}],["set(value",{"_index":234,"title":{},"body":{"components/ShowdownComponent.html":{}}}],["setoptions",{"_index":259,"title":{},"body":{"injectables/ShowdownConverter.html":{}}}],["setoptions(options",{"_index":125,"title":{},"body":{"components/ShowdownComponent.html":{},"injectables/ShowdownConverter.html":{}}}],["setsanitize(sanitize",{"_index":127,"title":{},"body":{"components/ShowdownComponent.html":{}}}],["setshowdown(value",{"_index":124,"title":{},"body":{"components/ShowdownComponent.html":{}}}],["setter",{"_index":171,"title":{},"body":{"components/ShowdownComponent.html":{}}}],["setup",{"_index":15,"title":{},"body":{"components/ShowdownComponent.html":{},"injectables/ShowdownConverter.html":{},"pipes/ShowdownPipe.html":{},"directives/SourceDirective.html":{},"index.html":{}}}],["setvalue?(value",{"_index":222,"title":{},"body":{"components/ShowdownComponent.html":{}}}],["shall",{"_index":542,"title":{},"body":{"license.html":{}}}],["showdown",{"_index":22,"title":{},"body":{"components/ShowdownComponent.html":{},"injectables/ShowdownConverter.html":{},"modules/ShowdownModule.html":{},"pipes/ShowdownPipe.html":{},"directives/SourceDirective.html":{},"dependencies.html":{},"index.html":{}}}],["showdown(value",{"_index":178,"title":{},"body":{"components/ShowdownComponent.html":{}}}],["showdown,[showdown",{"_index":63,"title":{},"body":{"components/ShowdownComponent.html":{}}}],["showdown.component",{"_index":309,"title":{},"body":{"modules/ShowdownModule.html":{},"directives/SourceDirective.html":{}}}],["showdown.converter",{"_index":264,"title":{},"body":{"injectables/ShowdownConverter.html":{}}}],["showdown.converteroptions",{"_index":274,"title":{},"body":{"injectables/ShowdownConverter.html":{},"modules/ShowdownModule.html":{}}}],["showdown.filterextension",{"_index":429,"title":{},"body":{"index.html":{}}}],["showdown.pipe",{"_index":311,"title":{},"body":{"modules/ShowdownModule.html":{}}}],["showdown.showdownextension",{"_index":460,"title":{},"body":{"index.html":{}}}],["showdown.showdownoptions",{"_index":38,"title":{},"body":{"components/ShowdownComponent.html":{},"injectables/ShowdownConverter.html":{},"pipes/ShowdownPipe.html":{},"index.html":{}}}],["showdown/readme.md",{"_index":336,"title":{},"body":{"directives/SourceDirective.html":{}}}],["showdown:**howdown**load",{"_index":410,"title":{},"body":{"index.html":{}}}],["showdown:options",{"_index":422,"title":{},"body":{"index.html":{}}}],["showdown[src],[showdown][src",{"_index":243,"title":{},"body":{"components/ShowdownComponent.html":{},"directives/SourceDirective.html":{}}}],["showdowncomponent",{"_index":1,"title":{"components/ShowdownComponent.html":{}},"body":{"components/ShowdownComponent.html":{},"modules/ShowdownModule.html":{},"directives/SourceDirective.html":{},"coverage.html":{},"index.html":{}}}],["showdowncomponent#render",{"_index":221,"title":{},"body":{"components/ShowdownComponent.html":{}}}],["showdowncomponent#smartindentationfix",{"_index":214,"title":{},"body":{"components/ShowdownComponent.html":{}}}],["showdowncomponent#value",{"_index":121,"title":{},"body":{"components/ShowdownComponent.html":{},"directives/SourceDirective.html":{}}}],["showdowncomponent.addextension(highlightextension",{"_index":442,"title":{},"body":{"index.html":{}}}],["showdowncomponent.setflavor('ghost",{"_index":443,"title":{},"body":{"index.html":{}}}],["showdowncomponent.setoptions({emoji",{"_index":444,"title":{},"body":{"index.html":{}}}],["showdownconfig",{"_index":76,"title":{},"body":{"components/ShowdownComponent.html":{},"injectables/ShowdownConverter.html":{},"modules/ShowdownModule.html":{},"index.html":{}}}],["showdownconverter",{"_index":57,"title":{"injectables/ShowdownConverter.html":{}},"body":{"components/ShowdownComponent.html":{},"injectables/ShowdownConverter.html":{},"modules/ShowdownModule.html":{},"pipes/ShowdownPipe.html":{},"coverage.html":{},"index.html":{},"overview.html":{}}}],["showdownconverter.makehtml(markdown",{"_index":255,"title":{},"body":{"injectables/ShowdownConverter.html":{}}}],["showdowndirective",{"_index":227,"title":{},"body":{"components/ShowdownComponent.html":{}}}],["showdownmodule",{"_index":278,"title":{"modules/ShowdownModule.html":{}},"body":{"modules/ShowdownModule.html":{},"index.html":{},"modules.html":{},"overview.html":{}}}],["showdownmodule.forroot",{"_index":297,"title":{},"body":{"modules/ShowdownModule.html":{},"index.html":{}}}],["showdownmodule.forroot({emoji",{"_index":405,"title":{},"body":{"index.html":{}}}],["showdownmodule.forroot({extensions",{"_index":465,"title":{},"body":{"index.html":{}}}],["showdownmodule.forroot({flavor",{"_index":446,"title":{},"body":{"index.html":{}}}],["showdownmodule.forroot({underline",{"_index":450,"title":{},"body":{"index.html":{}}}],["showdownpipe",{"_index":310,"title":{"pipes/ShowdownPipe.html":{}},"body":{"modules/ShowdownModule.html":{},"pipes/ShowdownPipe.html":{},"coverage.html":{},"index.html":{}}}],["simplelinebreaks",{"_index":162,"title":{},"body":{"components/ShowdownComponent.html":{}}}],["simplifiedautolink",{"_index":163,"title":{},"body":{"components/ShowdownComponent.html":{}}}],["single",{"_index":41,"title":{},"body":{"components/ShowdownComponent.html":{},"index.html":{}}}],["smartindentationfix",{"_index":39,"title":{},"body":{"components/ShowdownComponent.html":{},"modules/ShowdownModule.html":{},"index.html":{}}}],["smoothlivepreview",{"_index":164,"title":{},"body":{"components/ShowdownComponent.html":{}}}],["software",{"_index":517,"title":{},"body":{"license.html":{}}}],["solid",{"_index":103,"title":{},"body":{"components/ShowdownComponent.html":{}}}],["solution",{"_index":472,"title":{},"body":{"index.html":{}}}],["somecomponent",{"_index":33,"title":{},"body":{"components/ShowdownComponent.html":{},"pipes/ShowdownPipe.html":{},"directives/SourceDirective.html":{},"index.html":{}}}],["someextension",{"_index":459,"title":{},"body":{"index.html":{}}}],["someservice",{"_index":253,"title":{},"body":{"injectables/ShowdownConverter.html":{},"index.html":{}}}],["source",{"_index":4,"title":{},"body":{"components/ShowdownComponent.html":{},"injectables/ShowdownConverter.html":{},"modules/ShowdownModule.html":{},"pipes/ShowdownPipe.html":{},"directives/SourceDirective.html":{},"index.html":{}}}],["source.directive",{"_index":312,"title":{},"body":{"modules/ShowdownModule.html":{}}}],["sourcedirective",{"_index":242,"title":{"directives/SourceDirective.html":{}},"body":{"components/ShowdownComponent.html":{},"modules/ShowdownModule.html":{},"directives/SourceDirective.html":{},"coverage.html":{},"index.html":{}}}],["sourcedirective#src",{"_index":352,"title":{},"body":{"directives/SourceDirective.html":{}}}],["sources",{"_index":415,"title":{},"body":{"index.html":{}}}],["splitadjacentblockquotes",{"_index":165,"title":{},"body":{"components/ShowdownComponent.html":{}}}],["src",{"_index":333,"title":{},"body":{"directives/SourceDirective.html":{},"index.html":{}}}],["src/showdown",{"_index":249,"title":{},"body":{"injectables/ShowdownConverter.html":{},"coverage.html":{}}}],["src/showdown.component.ts",{"_index":8,"title":{},"body":{"components/ShowdownComponent.html":{},"coverage.html":{}}}],["src/showdown.component.ts:158",{"_index":113,"title":{},"body":{"components/ShowdownComponent.html":{}}}],["src/showdown.component.ts:174",{"_index":110,"title":{},"body":{"components/ShowdownComponent.html":{}}}],["src/showdown.component.ts:203",{"_index":85,"title":{},"body":{"components/ShowdownComponent.html":{}}}],["src/showdown.component.ts:207",{"_index":126,"title":{},"body":{"components/ShowdownComponent.html":{}}}],["src/showdown.component.ts:243",{"_index":92,"title":{},"body":{"components/ShowdownComponent.html":{}}}],["src/showdown.component.ts:245",{"_index":78,"title":{},"body":{"components/ShowdownComponent.html":{}}}],["src/showdown.component.ts:280",{"_index":116,"title":{},"body":{"components/ShowdownComponent.html":{}}}],["src/showdown.module.ts",{"_index":290,"title":{},"body":{"modules/ShowdownModule.html":{}}}],["src/showdown.module.ts:59",{"_index":296,"title":{},"body":{"modules/ShowdownModule.html":{}}}],["src/showdown.pipe.ts",{"_index":317,"title":{},"body":{"pipes/ShowdownPipe.html":{},"coverage.html":{}}}],["src/showdown.pipe.ts:55",{"_index":322,"title":{},"body":{"pipes/ShowdownPipe.html":{}}}],["src/source.directive.ts",{"_index":326,"title":{},"body":{"directives/SourceDirective.html":{},"coverage.html":{}}}],["src/source.directive.ts:112",{"_index":351,"title":{},"body":{"directives/SourceDirective.html":{}}}],["src/source.directive.ts:75",{"_index":346,"title":{},"body":{"directives/SourceDirective.html":{}}}],["src/source.directive.ts:87",{"_index":344,"title":{},"body":{"directives/SourceDirective.html":{}}}],["srcdirective",{"_index":363,"title":{},"body":{"directives/SourceDirective.html":{}}}],["stackblitz",{"_index":392,"title":{},"body":{"index.html":{}}}],["standalone",{"_index":16,"title":{},"body":{"components/ShowdownComponent.html":{},"injectables/ShowdownConverter.html":{},"pipes/ShowdownPipe.html":{},"directives/SourceDirective.html":{}}}],["started",{"_index":386,"title":{"index.html":{},"license.html":{}},"body":{}}],["statements",{"_index":367,"title":{},"body":{"coverage.html":{}}}],["static",{"_index":46,"title":{},"body":{"components/ShowdownComponent.html":{},"modules/ShowdownModule.html":{},"directives/SourceDirective.html":{}}}],["strikethrough",{"_index":166,"title":{},"body":{"components/ShowdownComponent.html":{}}}],["string",{"_index":35,"title":{},"body":{"components/ShowdownComponent.html":{},"injectables/ShowdownConverter.html":{},"pipes/ShowdownPipe.html":{},"directives/SourceDirective.html":{},"index.html":{}}}],["styles",{"_index":95,"title":{},"body":{"components/ShowdownComponent.html":{}}}],["subject",{"_index":537,"title":{},"body":{"license.html":{}}}],["sublicense",{"_index":530,"title":{},"body":{"license.html":{}}}],["subscribe((response",{"_index":360,"title":{},"body":{"directives/SourceDirective.html":{}}}],["substantial",{"_index":544,"title":{},"body":{"license.html":{}}}],["super(config",{"_index":192,"title":{},"body":{"components/ShowdownComponent.html":{},"injectables/ShowdownConverter.html":{}}}],["support",{"_index":572,"title":{},"body":{"modules.html":{}}}],["svg",{"_index":573,"title":{},"body":{"modules.html":{}}}],["table",{"_index":377,"title":{},"body":{"coverage.html":{}}}],["tables",{"_index":167,"title":{},"body":{"components/ShowdownComponent.html":{}}}],["tablesheaderid",{"_index":168,"title":{},"body":{"components/ShowdownComponent.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":376,"title":{},"body":{"coverage.html":{}}}],["tasklists",{"_index":169,"title":{},"body":{"components/ShowdownComponent.html":{}}}],["template",{"_index":32,"title":{},"body":{"components/ShowdownComponent.html":{},"pipes/ShowdownPipe.html":{},"directives/SourceDirective.html":{},"index.html":{}}}],["test",{"_index":497,"title":{},"body":{"index.html":{}}}],["testbuild",{"_index":498,"title":{},"body":{"index.html":{}}}],["text",{"_index":34,"title":{},"body":{"components/ShowdownComponent.html":{},"pipes/ShowdownPipe.html":{},"directives/SourceDirective.html":{},"index.html":{}}}],["text.replace('$color",{"_index":431,"title":{},"body":{"index.html":{}}}],["this._domsanitizer.sanitize(securitycontext.html",{"_index":209,"title":{},"body":{"components/ShowdownComponent.html":{}}}],["this._elementref.nativeelement.innerhtml",{"_index":210,"title":{},"body":{"components/ShowdownComponent.html":{}}}],["this._elementref.nativeelement.innerhtml.trim",{"_index":200,"title":{},"body":{"components/ShowdownComponent.html":{}}}],["this._sanitize",{"_index":189,"title":{},"body":{"components/ShowdownComponent.html":{}}}],["this._showdowncomponent.render(response",{"_index":361,"title":{},"body":{"directives/SourceDirective.html":{}}}],["this.error.emit(error",{"_index":362,"title":{},"body":{"directives/SourceDirective.html":{}}}],["this.getoptions",{"_index":181,"title":{},"body":{"components/ShowdownComponent.html":{}}}],["this.load",{"_index":356,"title":{},"body":{"directives/SourceDirective.html":{}}}],["this.makehtml(this.value",{"_index":208,"title":{},"body":{"components/ShowdownComponent.html":{}}}],["this.makehtml(value",{"_index":325,"title":{},"body":{"pipes/ShowdownPipe.html":{}}}],["this.render",{"_index":205,"title":{},"body":{"components/ShowdownComponent.html":{}}}],["this.render(this._elementref.nativeelement.innerhtml",{"_index":201,"title":{},"body":{"components/ShowdownComponent.html":{}}}],["this.setflavor((config",{"_index":268,"title":{},"body":{"injectables/ShowdownConverter.html":{}}}],["this.setoption(key",{"_index":235,"title":{},"body":{"components/ShowdownComponent.html":{},"injectables/ShowdownConverter.html":{}}}],["this.setoptions(config",{"_index":271,"title":{},"body":{"injectables/ShowdownConverter.html":{}}}],["this.setoptions(options",{"_index":183,"title":{},"body":{"components/ShowdownComponent.html":{},"pipes/ShowdownPipe.html":{}}}],["this.src",{"_index":357,"title":{},"body":{"directives/SourceDirective.html":{}}}],["this.value",{"_index":179,"title":{},"body":{"components/ShowdownComponent.html":{}}}],["tohtml",{"_index":225,"title":{},"body":{"components/ShowdownComponent.html":{}}}],["tort",{"_index":567,"title":{},"body":{"license.html":{}}}],["transform",{"_index":318,"title":{},"body":{"pipes/ShowdownPipe.html":{},"index.html":{}}}],["transform(value",{"_index":321,"title":{},"body":{"pipes/ShowdownPipe.html":{}}}],["tree",{"_index":6,"title":{},"body":{"components/ShowdownComponent.html":{}}}],["trimeachline",{"_index":220,"title":{},"body":{"components/ShowdownComponent.html":{}}}],["troubleshoot",{"_index":466,"title":{},"body":{"index.html":{}}}],["true",{"_index":40,"title":{},"body":{"components/ShowdownComponent.html":{},"modules/ShowdownModule.html":{},"pipes/ShowdownPipe.html":{},"index.html":{}}}],["tslint:disable",{"_index":216,"title":{},"body":{"components/ShowdownComponent.html":{}}}],["type",{"_index":81,"title":{},"body":{"components/ShowdownComponent.html":{},"injectables/ShowdownConverter.html":{},"modules/ShowdownModule.html":{},"pipes/ShowdownPipe.html":{},"directives/SourceDirective.html":{},"coverage.html":{},"index.html":{}}}],["type:'listener",{"_index":302,"title":{},"body":{"modules/ShowdownModule.html":{}}}],["typeof",{"_index":207,"title":{},"body":{"components/ShowdownComponent.html":{},"directives/SourceDirective.html":{}}}],["types/showdown",{"_index":382,"title":{},"body":{"dependencies.html":{},"index.html":{}}}],["typescript",{"_index":175,"title":{},"body":{"components/ShowdownComponent.html":{},"injectables/ShowdownConverter.html":{},"modules/ShowdownModule.html":{},"pipes/ShowdownPipe.html":{},"directives/SourceDirective.html":{},"index.html":{}}}],["undefined",{"_index":199,"title":{},"body":{"components/ShowdownComponent.html":{}}}],["under",{"_index":507,"title":{},"body":{"index.html":{}}}],["underline",{"_index":170,"title":{},"body":{"components/ShowdownComponent.html":{},"pipes/ShowdownPipe.html":{},"index.html":{}}}],["underline__",{"_index":320,"title":{},"body":{"pipes/ShowdownPipe.html":{}}}],["unescaped",{"_index":469,"title":{},"body":{"index.html":{}}}],["url",{"_index":332,"title":{},"body":{"directives/SourceDirective.html":{},"index.html":{}}}],["url..**note",{"_index":412,"title":{},"body":{"index.html":{}}}],["use",{"_index":47,"title":{},"body":{"components/ShowdownComponent.html":{},"injectables/ShowdownConverter.html":{},"directives/SourceDirective.html":{},"index.html":{},"license.html":{}}}],["usevalue",{"_index":314,"title":{},"body":{"modules/ShowdownModule.html":{},"index.html":{}}}],["using",{"_index":468,"title":{},"body":{"index.html":{}}}],["v5",{"_index":213,"title":{},"body":{"components/ShowdownComponent.html":{},"injectables/ShowdownConverter.html":{},"directives/SourceDirective.html":{}}}],["value",{"_index":28,"title":{},"body":{"components/ShowdownComponent.html":{},"pipes/ShowdownPipe.html":{},"index.html":{}}}],["vanilla",{"_index":270,"title":{},"body":{"injectables/ShowdownConverter.html":{},"index.html":{}}}],["var",{"_index":239,"title":{},"body":{"components/ShowdownComponent.html":{}}}],["variable",{"_index":55,"title":{},"body":{"components/ShowdownComponent.html":{},"directives/SourceDirective.html":{}}}],["void",{"_index":123,"title":{},"body":{"components/ShowdownComponent.html":{},"injectables/ShowdownConverter.html":{},"directives/SourceDirective.html":{}}}],["warranties",{"_index":552,"title":{},"body":{"license.html":{}}}],["warranty",{"_index":547,"title":{},"body":{"license.html":{}}}],["welcome",{"_index":490,"title":{},"body":{"index.html":{}}}],["whether",{"_index":564,"title":{},"body":{"license.html":{}}}],["whitespaces",{"_index":477,"title":{},"body":{"index.html":{}}}],["width",{"_index":97,"title":{},"body":{"components/ShowdownComponent.html":{}}}],["without",{"_index":521,"title":{},"body":{"license.html":{}}}],["yarn",{"_index":495,"title":{},"body":{"index.html":{}}}],["yes",{"_index":84,"title":{},"body":{"components/ShowdownComponent.html":{},"injectables/ShowdownConverter.html":{},"pipes/ShowdownPipe.html":{},"directives/SourceDirective.html":{}}}],["yisrael",{"_index":504,"title":{},"body":{"index.html":{},"license.html":{}}}],["zoom",{"_index":287,"title":{},"body":{"modules/ShowdownModule.html":{},"overview.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"components/ShowdownComponent.html":{"url":"components/ShowdownComponent.html","title":"component - ShowdownComponent","body":"\n                   \n\n\n\n\n\n  Components\n  ShowdownComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/showdown.component.ts\n\n\n    \n        Description\n    \n    \n        A angular component for render Markdown to HTML.\nExample\nSetup as standalone\n * import { NgModule } from '@angular/core';\n * import { ShowdownComponent } from 'ngx-showdown';\n *\n * @NgModule({\n *   declarations: [ ShowdownComponent ];\n * })\n * export class AppModule {}\n *Bind markdown value and options object\n * import { Component } from '@angular/core';\n * import * as Showdown from 'showdown';\n *\n * @Component({\n *   selector: 'some',\n *   template: ''\n * })\n * export class SomeComponent {\n *   text: string = `\n     # Some header\n     ---\n     **Some bold**\n   `;\n *   options: Showdown.ShowdownOptions = { smartIndentationFix: true };\n *   // ...\n * }\n *Bind single option (it have properties for all showdown options).\n * # Some text :+1:\n *Set static markdown value.\n * \n *Use as directive on anther element.\n * \n *Static markdown value in the element content.\n * \n *    \n *       # List:\n *       * a\n *            * A\n *       * b\n *    \n * \n *Set template reference variable.\n * \n *Or\n * \n *\n    \n\n    \n        Extends\n    \n    \n            ShowdownConverter\n    \n\n    \n        Implements\n    \n    \n                OnInit\n                OnChanges\n                \n    \n\n\n\n    Metadata\n    \n        \n\n\n\n\n            \n                exportAs\n                showdown\n            \n\n\n\n\n\n\n\n            \n                selector\n                showdown,[showdown]\n            \n\n\n\n            \n                template\n                \n            \n\n\n\n\n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                render\n                            \n                        \n                    \n                \n\n                \n                    \n                        Inputs\n                    \n                \n                \n                    \n                        \n                            \n                                options\n                            \n                            \n                                sanitize\n                            \n                            \n                                showdown\n                            \n                            \n                                value\n                            \n                        \n                    \n                \n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    showdown\n                                \n                                \n                                    options\n                                \n                                \n                                    sanitize\n                                \n                            \n                        \n                    \n        \n    \n\n\n    \n    Constructor\n        \n            \n                \n                    \nconstructor(_elementRef: ElementRef, _domSanitizer?: DomSanitizer, config?: ShowdownConfig)\n                    \n                \n                        \n                            \n                                Defined in src/showdown.component.ts:245\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        _elementRef\n                                                  \n                                                        \n                                                                    ElementRef\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        _domSanitizer\n                                                  \n                                                        \n                                                                    DomSanitizer\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                                \n                                                        config\n                                                  \n                                                        \n                                                                    ShowdownConfig\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n    \n    Inputs\n        \n            \n                \n                    \n                        \n                        options\n                    \n                \n                \n                    \n                        Type :     Showdown.ShowdownOptions\n\n                    \n                \n                        \n                            \n                                    Defined in src/showdown.component.ts:203\n                            \n                        \n                \n                    \n                        The showdown options of the converter.\nExample :\nBind options\n   * import { Component } from '@angular/core';\n   * import * as Showdown from 'showdown';\n   *\n   * @Component({\n   *   selector: `some`,\n   *   template: `# Some Header`\n   * })\n   * export class SomeComponent {\n   *   options: Showdown.ShowdownOptions = {headerLevelStart: 3};\n   *   // ...\n   * }\n   *Or\n   *  # Indentation Fix\n   *\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        sanitize\n                    \n                \n                \n                    \n                        Type :     boolean\n\n                    \n                \n                        \n                            \n                                    Defined in src/showdown.component.ts:243\n                            \n                        \n                \n                    \n                        Enables html sanitize, it will sanitize the converter html output by DomSanitizer.\nExample :\n   * import { Component } from '@angular/core';\n   *\n   * @Component({\n   *   selector: 'some',\n   *   styles: [`.box { width: 95%; padding: 5px; border: 1px solid black;}`],\n   *   template: `\n     Input\n     \n      Sanitize\n     Markdown\n     {{ text }}\n     Preview\n     \n       \n     \n   `;\n   * })\n   * export class SomeComponent {\n   *    text: string = `# A cool link\nclick me`;\n   * }\n   *\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        showdown\n                    \n                \n                \n                    \n                        Type :     string\n\n                    \n                \n                        \n                            \n                                    Defined in src/showdown.component.ts:174\n                            \n                        \n                \n                    \n                        Input alias to value.\nExample :\n   * \n   *Equivalent to\n   * \n   *\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        value\n                    \n                \n                \n                    \n                        Type :     string\n\n                    \n                \n                        \n                            \n                                    Defined in src/showdown.component.ts:158\n                            \n                        \n                \n                    \n                        The input markdown value.\nExample :\nSet some static markdown value.\n   * \n   *Bind property with markdown value.\n   * \n   * \n   *\n                    \n                \n            \n        \n\n\n\n\n    \n    \n        \n            Methods\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            render\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        render(value?: string)\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/showdown.component.ts:280\n                            \n                        \n\n\n                \n                    \n                            Convert the markdown value of ShowdownComponent to html and set the html result to the element content.\nExample :\n   * # Some Header\n   * \n   *\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        value\n                                                        \n                                                                    string\n                                                        \n                                                    \n                                                    \n                                                            Yes\n                                                    \n                                                    \n\n                                                        \n                                                                \nA markdown value to render (it will override the current value of ShowdownComponent#value)\n\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     void\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n\n\n\n    \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        showdown\n                    \n                \n\n\n                \n                    \n                        setshowdown(value: string)\n                    \n                \n                            \n                                \n                                    Defined in src/showdown.component.ts:174\n                                \n                            \n                    \n                        \n                                Input alias to value.\nExample :\n   * \n   *Equivalent to\n   * \n   *\n\n                                \n                                        Parameters :\n                                        \n                                            \n                                                \n                                                    Name\n                                                        Type\n                                                    Optional\n                                                \n                                            \n                                            \n                                                    \n                                                            value\n                                                    \n                                                            \n                                                                        string\n                                                            \n                                                    \n                                                        \n                                                                No\n                                                        \n                                                        \n                                                    \n                                            \n                                        \n                                \n                                \n                                \n                                \n                                    Returns :     void\n\n                                \n                        \n                    \n            \n        \n        \n            \n                \n                    \n                        \n                        options\n                    \n                \n\n\n                \n                    \n                        setoptions(options)\n                    \n                \n                            \n                                \n                                    Defined in src/showdown.component.ts:207\n                                \n                            \n                    \n                        \n\n                                \n                                        Parameters :\n                                        \n                                            \n                                                \n                                                    Name\n                                                    Optional\n                                                \n                                            \n                                            \n                                                    \n                                                            options\n                                                    \n                                                    \n                                                        \n                                                                No\n                                                        \n                                                        \n                                                    \n                                            \n                                        \n                                \n                                \n                                \n                                \n                                    Returns :     void\n\n                                \n                        \n                    \n            \n        \n        \n            \n                \n                    \n                        \n                        sanitize\n                    \n                \n\n\n                \n                    \n                        setsanitize(sanitize: boolean)\n                    \n                \n                            \n                                \n                                    Defined in src/showdown.component.ts:243\n                                \n                            \n                    \n                        \n                                Enables html sanitize, it will sanitize the converter html output by DomSanitizer.\nExample :\n   * import { Component } from '@angular/core';\n   *\n   * @Component({\n   *   selector: 'some',\n   *   styles: [`.box { width: 95%; padding: 5px; border: 1px solid black;}`],\n   *   template: `\n     Input\n     \n      Sanitize\n     Markdown\n     {{ text }}\n     Preview\n     \n       \n     \n   `;\n   * })\n   * export class SomeComponent {\n   *    text: string = `# A cool link\nclick me`;\n   * }\n   *\n\n                                \n                                        Parameters :\n                                        \n                                            \n                                                \n                                                    Name\n                                                        Type\n                                                    Optional\n                                                \n                                            \n                                            \n                                                    \n                                                            sanitize\n                                                    \n                                                            \n                                                                        boolean\n                                                            \n                                                    \n                                                        \n                                                                No\n                                                        \n                                                        \n                                                    \n                                            \n                                        \n                                \n                                \n                                \n                                \n                                    Returns :     void\n\n                                \n                        \n                    \n            \n        \n\n\n\n\n    \n        import { Component, ElementRef, Input, OnChanges, OnInit, Optional, SecurityContext } from '@angular/core';\nimport { DomSanitizer } from '@angular/platform-browser';\nimport * as Showdown from 'showdown';\nimport { ShowdownConfig } from './showdown-config.provider';\nimport { ShowdownConverter } from './showdown-converter.provider';\n\n/**\n * @internal\n */\nconst MAP_OPTION = {\n  '': true,\n  true: true,\n  false: false\n};\n\n/**\n * @internal\n */\nlet _toOption = (value: any) => MAP_OPTION.hasOwnProperty(value) ? MAP_OPTION[value] : value;\n\n/**\n * The options keys for the dynamic properties set.\n * @internal\n */\nconst OPTIONS_PROPERTIES_KEYS: string[] = [\n  'backslashEscapesHTMLTags',\n  'completeHTMLDocument',\n  'disableForced4SpacesIndentedSublists',\n  'emoji',\n  'encodeEmails',\n  'ghCodeBlocks',\n  'ghCompatibleHeaderId',\n  'ghMentions',\n  'ghMentionsLink',\n  'headerLevelStart',\n  'literalMidWordAsterisks',\n  'literalMidWordUnderscores',\n  'metadata',\n  'noHeaderId',\n  'omitExtraWLInCodeBlocks',\n  'openLinksInNewWindow',\n  'parseImgDimensions',\n  'prefixHeaderId',\n  'rawHeaderId',\n  'rawPrefixHeaderId',\n  'requireSpaceBeforeHeadingText',\n  'simpleLineBreaks',\n  'simplifiedAutoLink',\n  'smartIndentationFix',\n  'smoothLivePreview',\n  'splitAdjacentBlockquotes',\n  'strikethrough',\n  'tables',\n  'tablesHeaderId',\n  'tasklists',\n  'underline'\n];\n\n// For the options setter properties that dynamic definition (the code after the class)\nexport interface ShowdownComponent extends Showdown.ShowdownOptions {\n}\n\n/**\n * A angular component for render `Markdown` to `HTML`.\n *\n * ### Example\n *\n * Setup as standalone\n * ```typescript\n * import { NgModule } from '@angular/core';\n * import { ShowdownComponent } from 'ngx-showdown';\n *\n * @NgModule({\n *   declarations: [ ShowdownComponent ];\n * })\n * export class AppModule {}\n * ```\n *\n * Bind markdown value and options object\n * ```typescript\n * import { Component } from '@angular/core';\n * import * as Showdown from 'showdown';\n *\n * @Component({\n *   selector: 'some',\n *   template: ''\n * })\n * export class SomeComponent {\n *   text: string = `\n *     # Some header\n *     ---\n *     **Some bold**\n *   `;\n *   options: Showdown.ShowdownOptions = { smartIndentationFix: true };\n *   // ...\n * }\n * ```\n * Bind single option (it have properties for all showdown options).\n * ```html\n * # Some text :+1:\n * ```\n *\n * Set static markdown value.\n * ```html\n * \n * ```\n *\n * Use as directive on anther element.\n * ```html\n * \n * ```\n *\n * Static markdown value in the element content.\n * ```html\n * \n *    \n *       # List:\n *       * a\n *            * A\n *       * b\n *    \n * \n * ```\n *\n * Set template reference variable.\n * ```html\n * \n * ```\n * Or\n * ```html\n * \n * ```\n */\n@Component({\n  selector: 'showdown,[showdown]',\n  template: '',\n  exportAs: 'showdown',\n  inputs: OPTIONS_PROPERTIES_KEYS\n})\nexport class ShowdownComponent extends ShowdownConverter implements OnInit, OnChanges, Showdown.ShowdownOptions {\n\n  /**\n   * The input markdown value.\n   *\n   * __Example :__\n   *\n   * Set some static markdown value.\n   * ```html\n   * \n   * ```\n   *\n   * Bind property with markdown value.\n   * ```html\n   * \n   * \n   * ```\n   */\n  @Input() value: string;\n\n  /**\n   * Input alias to `value`.\n   *\n   * __Example :__\n   *\n   * ```html\n   * \n   * ```\n   *\n   * Equivalent to\n   * ```html\n   * \n   * ```\n   */\n  @Input() set showdown(value: string) {\n    this.value = value;\n  }\n\n  /**\n   * The showdown options of the converter.\n   *\n   * __Example :__\n   *\n   * Bind options\n   * ```typescript\n   * import { Component } from '@angular/core';\n   * import * as Showdown from 'showdown';\n   *\n   * @Component({\n   *   selector: `some`,\n   *   template: `# Some Header`\n   * })\n   * export class SomeComponent {\n   *   options: Showdown.ShowdownOptions = {headerLevelStart: 3};\n   *   // ...\n   * }\n   * ```\n   * Or\n   * ```html\n   *  # Indentation Fix\n   * ```\n   */\n  @Input()\n  get options(): Showdown.ShowdownOptions {\n    return this.getOptions();\n  }\n\n  set options(options: Showdown.ShowdownOptions) {\n    this.setOptions(options);\n  }\n\n  private _sanitize: boolean;\n\n  /**\n   * Enables html sanitize, it will sanitize the converter html output by [`DomSanitizer`](https://angular.io/api/platform-browser/DomSanitizer#sanitize).\n   *\n   * __Example :__\n   *\n   * ```typescript\n   * import { Component } from '@angular/core';\n   *\n   * @Component({\n   *   selector: 'some',\n   *   styles: [`.box { width: 95%; padding: 5px; border: 1px solid black;}`],\n   *   template: `\n   *     Input\n   *     \n   *      Sanitize\n   *     Markdown\n   *     {{ text }}\n   *     Preview\n   *     \n   *       \n   *     \n   *   `;\n   * })\n   * export class SomeComponent {\n   *    text: string = `# A cool link\n   * click me`;\n   * }\n   * ```\n   */\n  @Input()\n  set sanitize(sanitize: boolean) {\n    this._sanitize = _toOption(sanitize);\n  }\n\n  constructor(private _elementRef: ElementRef, @Optional() private _domSanitizer?: DomSanitizer, @Optional() config?: ShowdownConfig) {\n    super(config);\n  }\n\n  /**\n   * A angular lifecycle method, Use on init to check if it `content` type and load the element `content` to `value`.\n   * @internal\n   */\n  ngOnInit(): void {\n    if (this.value === undefined && this._elementRef.nativeElement.innerHTML.trim() !== '') {\n      this.render(this._elementRef.nativeElement.innerHTML);\n    }\n  }\n\n  /**\n   * A angular lifecycle method, Use to call to render method after changes.\n   * @internal\n   */\n  ngOnChanges(): void {\n    this.render();\n  }\n\n  /**\n   * Convert the markdown value of {@link ShowdownComponent#value} to html and set the html result to the element content.\n   *\n   * __Example :__\n   *\n   * ```html\n   * # Some Header\n   * \n   * ```\n   * @param value - A markdown value to render (it will override the current value of `ShowdownComponent#value`)\n   */\n  public render(value?: string): void {\n    if (typeof value === 'string') {\n      this.value = value;\n    }\n\n    if (typeof this.value === 'string') {\n      let result = this.makeHtml(this.value);\n\n      if (this._sanitize) {\n        result = this._domSanitizer.sanitize(SecurityContext.HTML, result);\n      }\n\n      this._elementRef.nativeElement.innerHTML = result;\n    }\n  }\n\n  /**\n   * @ignore\n   * @deprecated from v5, use {@link ShowdownComponent#smartIndentationFix} instead.\n   */\n  // tslint:disable-next-line:member-ordering\n  trimEachLine;\n\n  /**\n   * @ignore\n   * @deprecated from v5,  use {@link ShowdownComponent#render} method instead.\n   */\n  setValue?(value: string): void;\n\n  /**\n   * @ignore\n   * @deprecated from v5, use {@link ShowdownComponent#render} method instead.\n   */\n  compile?(): void;\n\n  /**\n   * @ignore\n   * @deprecated from v5, use `innerHTML` property of the element instead.\n   */\n  toHTML?(): string;\n\n}\n\n/**\n * @ignore\n * @deprecated from v5, renamed `ShowdownDirective` to {@link ShowdownComponent}.\n */\nexport declare let ShowdownDirective: typeof ShowdownComponent;\n\n// Define options properties setter for angular directive and direct access\nfor (let key of OPTIONS_PROPERTIES_KEYS) {\n  Object.defineProperty(ShowdownComponent.prototype, key, {\n    set(value: any): void {\n      this.setOption(key, _toOption(value));\n    },\n    configurable: true\n  });\n}\n\n    \n\n\n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = ''\n    var COMPONENTS = [{'name': 'ShowdownComponent', 'selector': 'showdown,[showdown]'}];\n    var DIRECTIVES = [{'name': 'SourceDirective', 'selector': 'showdown[src],[showdown][src]'}];\n    var ACTUAL_COMPONENT = {'name': 'ShowdownComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/ShowdownConverter.html":{"url":"injectables/ShowdownConverter.html","title":"injectable - ShowdownConverter","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  ShowdownConverter\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/showdown-converter.provider.ts\n        \n\n            \n                Description\n            \n            \n                Example\nSetup as standalone\n * import { NgModule } from '@angular/core';\n * import { ShowdownConverter } from 'ngx-showdown';\n *\n * @NgModule({\n *   providers: [ ShowdownConverter ];\n * })\n * export class AppModule {}\n *Use the converter instance.\n * import { Injectable } from '@angular/core';\n * import { ShowdownConverter } from 'ngx-showdown';\n *\n * @Injectable()\n * export class SomeService {\n *   constructor(showdownConverter: ShowdownConverter) {\n *     let markdown: string = \"**Some**\";\n *     let html: string = showdownConverter.makeHtml(markdown);\n *     console.log(`some:\\nmarkdown: ${markdown)\\nhtml: ${html}\\n`);\n *   }\n * }\n *\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                setOptions\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(config?: ShowdownConfig)\n                    \n                \n                        \n                            \n                                Defined in src/showdown-converter.provider.ts:40\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        config\n                                                  \n                                                        \n                                                                    ShowdownConfig\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Methods\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            setOptions\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        setOptions(options: Showdown.ShowdownOptions)\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/showdown-converter.provider.ts:53\n                            \n                        \n\n\n                \n                    \n                            Set options to the converter.\n\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        options\n                                                        \n                                                                    Showdown.ShowdownOptions\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                        \n                                                                \nA options object to set.\n\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     void\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n\n\n\n    \n\n\n    \n        import { Injectable, Optional } from '@angular/core';\nimport * as Showdown from 'showdown';\nimport { ShowdownConfig } from './showdown-config.provider';\n\n/**\n * @internal\n */\nlet {hasOwnProperty} = {};\n\n/**\n * ### Example\n *\n * Setup as standalone\n * ```typescript\n * import { NgModule } from '@angular/core';\n * import { ShowdownConverter } from 'ngx-showdown';\n *\n * @NgModule({\n *   providers: [ ShowdownConverter ];\n * })\n * export class AppModule {}\n * ```\n *\n * Use the converter instance.\n * ```typescript\n * import { Injectable } from '@angular/core';\n * import { ShowdownConverter } from 'ngx-showdown';\n *\n * @Injectable()\n * export class SomeService {\n *   constructor(showdownConverter: ShowdownConverter) {\n *     let markdown: string = \"**Some**\";\n *     let html: string = showdownConverter.makeHtml(markdown);\n *     console.log(`some:\\nmarkdown: ${markdown)\\nhtml: ${html}\\n`);\n *   }\n * }\n * ```\n */\n@Injectable()\nexport class ShowdownConverter extends Showdown.Converter {\n\n  constructor(@Optional() config?: ShowdownConfig) {\n    super(config && {extensions: config.extensions});\n    this.setFlavor((config && config.flavor) || 'vanilla');\n    this.setOptions(config);\n  }\n\n  /**\n   * Set options to the converter.\n   *\n   * @param options - A options object to set.\n   */\n  public setOptions(options: Showdown.ShowdownOptions): void {\n    for (let key in options) {\n      if (hasOwnProperty.call(options, key)) {\n        this.setOption(key, options[key]);\n      }\n    }\n  }\n\n}\n\n/**\n * @ignore\n * @deprecated from v5, use {@link Showdown.ConverterOptions} instead.\n */\nexport interface IConverterOptions extends Showdown.ConverterOptions {\n}\n\n/**\n * @ignore\n * @deprecated from v5, use {@link Showdown.ShowdownOptions} instead.\n */\nexport interface IConverterOptionsChangeable extends Showdown.ShowdownOptions {\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/ShowdownModule.html":{"url":"modules/ShowdownModule.html","title":"module - ShowdownModule","body":"\n                   \n\n\n\n\n    Modules\n    ShowdownModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_ShowdownModule\n\n\n\ncluster_ShowdownModule_declarations\n\n\n\ncluster_ShowdownModule_exports\n\n\n\ncluster_ShowdownModule_providers\n\n\n\n\nDECLARATIONS\n\nDECLARATIONS\n\n\n\nShowdownModule\n\nShowdownModule\n\nShowdownModule -->\n\nDECLARATIONS->ShowdownModule\n\n\n\n\n\nDECLARATIONS \n\nDECLARATIONS \n\nDECLARATIONS  -->\n\nShowdownModule->DECLARATIONS \n\n\n\n\n\nShowdownConverter\n\nShowdownConverter\n\nShowdownModule -->\n\nShowdownConverter->ShowdownModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/showdown.module.ts\n        \n\n\n        \n            Description\n        \n        \n            Example\nAdd ShowdownModule to app imports.\n * import { NgModule } from '@angular/core';\n * import { ShowdownModule } from 'ngx-showdown';\n *\n * @NgModule({\n *   imports: [ ShowdownModule ];\n * })\n * export class AppModule {}\n *\n        \n\n\n        \n            \n                \n                    Declarations\n                    \n                        \n                            DECLARATIONS\n                        \n                    \n                \n                \n                    Providers\n                    \n                        \n                            ShowdownConverter\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            DECLARATIONS\n                        \n                    \n                \n            \n        \n\n        \n    \n        \n            Methods\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Static\n                            forRoot\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        forRoot(config: ShowdownConfig | Showdown.ConverterOptions)\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/showdown.module.ts:59\n                            \n                        \n\n\n                \n                    \n                            Example :\nAdd ShowdownModule to app imports with config.\n   * import { NgModule } from '@angular/core';\n   * import { ShowdownModule } from 'ngx-showdown';\n   *\n   * @NgModule({\n   *   imports: [ ShowdownModule.forRoot({\n   *     smartIndentationFix: true,\n   *     foo: 'bar',\n   *     flavor: 'github',\n   *     extensions: [ {type:'listener', listeners: {'codeBlocks.after': console.log}} ]\n   *   }) ];\n   * })\n   * export class AppModule {}\n   *\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        config\n                                                        \n                                                                    ShowdownConfig | Showdown.ConverterOptions\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                        \n                                                                \nA root converter config for all converter instances.\n\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     ModuleWithProviders\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { ModuleWithProviders, NgModule } from '@angular/core';\nimport * as Showdown from 'showdown';\nimport { ShowdownConfig } from './showdown-config.provider';\nimport { ShowdownConverter } from './showdown-converter.provider';\nimport { ShowdownComponent } from './showdown.component';\nimport { ShowdownPipe } from './showdown.pipe';\nimport { SourceDirective } from './source.directive';\n\n/**\n * @internal\n */\nconst DECLARATIONS = [\n  ShowdownComponent,\n  ShowdownPipe,\n  SourceDirective\n];\n\n/**\n * ### Example\n *\n * Add `ShowdownModule` to app `imports`.\n * ```typescript\n * import { NgModule } from '@angular/core';\n * import { ShowdownModule } from 'ngx-showdown';\n *\n * @NgModule({\n *   imports: [ ShowdownModule ];\n * })\n * export class AppModule {}\n * ```\n */\n@NgModule({\n  declarations: DECLARATIONS,\n  providers: [ShowdownConverter],\n  exports: DECLARATIONS\n})\nexport class ShowdownModule {\n\n  /**\n   * __Example :__\n   *\n   * Add `ShowdownModule` to app `imports` with config.\n   * ```typescript\n   * import { NgModule } from '@angular/core';\n   * import { ShowdownModule } from 'ngx-showdown';\n   *\n   * @NgModule({\n   *   imports: [ ShowdownModule.forRoot({\n   *     smartIndentationFix: true,\n   *     foo: 'bar',\n   *     flavor: 'github',\n   *     extensions: [ {type:'listener', listeners: {'codeBlocks.after': console.log}} ]\n   *   }) ];\n   * })\n   * export class AppModule {}\n   * ```\n   * @param config - A root converter config for all converter instances.\n   */\n  static forRoot(config: ShowdownConfig | Showdown.ConverterOptions): ModuleWithProviders {\n    return {\n      ngModule: ShowdownModule,\n      providers: [{provide: ShowdownConfig, useValue: config}]\n    };\n  }\n\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"pipes/ShowdownPipe.html":{"url":"pipes/ShowdownPipe.html","title":"pipe - ShowdownPipe","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n  Pipes\n  ShowdownPipe\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n\n        \n            File\n        \n        \n            src/showdown.pipe.ts\n        \n\n            \n                Description\n            \n            \n                A angular pipe to transform Markdown to HTML.\nExample\nSetup as standalone\n * import { NgModule } from '@angular/core';\n * import { ShowdownPipe } from 'ngx-showdown';\n *\n * @NgModule({\n *   declarations: [ ShowdownPipe ];\n * })\n * export class AppModule {}\n *Transform markdown value to html.\n * \n * \n *Transform markdown value to html with options.\n * import * as Showdown from 'showdown';\n *\n * @Component({\n *   selector: 'some',\n *   template: ``\n * })\n * export class SomeComponent {\n *   text: string = \"__Some Underline__\";\n *   options: Showdown.ShowdownOptions = { underline: true };\n *   // ...\n * }\n *\n            \n\n\n        \n            Metadata\n            \n                \n                    \n                        Name\n                        showdown\n                    \n                \n            \n        \n\n            \n    \n        \n            Methods\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            transform\n                            \n                            \n                        \n                    \n                \n                \n                    \ntransform(value: string, options?: Showdown.ShowdownOptions)\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/showdown.pipe.ts:55\n                            \n                        \n\n\n                \n                    \n                            Transform markdown value to html.\n\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        value\n                                                        \n                                                                    string\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                        \n                                                                \nThe markdown value to transform to html.\n\n\n                                                        \n                                                \n                                                \n                                                        options\n                                                        \n                                                                    Showdown.ShowdownOptions\n                                                        \n                                                    \n                                                    \n                                                            Yes\n                                                    \n                                                    \n\n                                                        \n                                                                \nA Showdown converter options.\n\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     string\n\n                            \n                                \n                                    Returns the transform result of value to html.\n\n                                \n                    \n                \n            \n        \n\n\n\n    \n\n\n    \n        import { Pipe, PipeTransform } from '@angular/core';\nimport * as Showdown from 'showdown';\nimport { ShowdownConverter } from './showdown-converter.provider';\n\n/**\n * A angular pipe to transform `Markdown` to `HTML`.\n *\n * ### Example\n *\n * Setup as standalone\n * ```typescript\n * import { NgModule } from '@angular/core';\n * import { ShowdownPipe } from 'ngx-showdown';\n *\n * @NgModule({\n *   declarations: [ ShowdownPipe ];\n * })\n * export class AppModule {}\n * ```\n *\n * Transform markdown value to html.\n * ```html\n * \n * \n * ```\n *\n * Transform markdown value to html with `options`.\n * ```typescript\n * import * as Showdown from 'showdown';\n *\n * @Component({\n *   selector: 'some',\n *   template: ``\n * })\n * export class SomeComponent {\n *   text: string = \"__Some Underline__\";\n *   options: Showdown.ShowdownOptions = { underline: true };\n *   // ...\n * }\n * ```\n */\n@Pipe({\n  name: 'showdown',\n  pure: false\n})\nexport class ShowdownPipe extends ShowdownConverter implements PipeTransform {\n\n  /**\n   * Transform markdown value to html.\n   *\n   * @param value - The markdown value to transform to html.\n   * @param options - A `Showdown` converter options.\n   * @returns Returns the transform result of `value` to html.\n   */\n  transform(value: string, options?: Showdown.ShowdownOptions): string {\n    this.setOptions(options);\n    return this.makeHtml(value);\n  }\n\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"directives/SourceDirective.html":{"url":"directives/SourceDirective.html","title":"directive - SourceDirective","body":"\n                   \n\n\n\n\n\n\n\n  Directives\n  SourceDirective\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/source.directive.ts\n        \n\n            \n                Description\n            \n            \n                A angular directive to ShowdownComponent for make http request of markdown content.\nExample\nSetup as standalone\n * import { NgModule } from '@angular/core';\n * import { HttpClientModule } from '@angular/common/http';\n * import { ShowdownComponent, SourceDirective } from 'ngx-showdown';\n *\n * @NgModule({\n *    declarations: [ ShowdownComponent, SourceDirective ],\n *    imports: [ HttpClientModule ]\n * })\n * export class AppModule {}\n *Bind url src directive\n * import { Component } from '@angular/core';\n *\n * @Component({\n *     selector: 'some',\n *     template: '**Loading...**\n * })\n * class SomeComponent {\n *     url: string = 'https://unpkg.com/ngx-showdown/README.md';\n *     // ...\n * }\n *Set static url\n * \n *Set template reference variable\n * \n *Listening to error events.\n * \n *\n            \n\n            \n                Implements\n            \n            \n                        OnChanges\n            \n\n\n        \n            Metadata\n            \n                \n\n                    \n                        Selector\n                        showdown[src],[showdown][src]\n                    \n\n                \n            \n        \n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                load\n                            \n                        \n                    \n                \n\n                \n                    \n                        Inputs\n                    \n                \n                \n                    \n                        \n                            \n                                src\n                            \n                        \n                    \n                \n\n                \n                    \n                        Outputs\n                    \n                \n                \n                    \n                        \n                            \n                                error\n                            \n                        \n                    \n                \n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(_showdownComponent: ShowdownComponent, _http: HttpClient)\n                    \n                \n                        \n                            \n                                Defined in src/source.directive.ts:87\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        _showdownComponent\n                                                  \n                                                        \n                                                                    ShowdownComponent\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        _http\n                                                  \n                                                        \n                                                                    HttpClient\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    Inputs\n        \n            \n                \n                    \n                        \n                        src\n                    \n                \n                \n                    \n                        Type :     string\n\n                    \n                \n                        \n                            \n                                    Defined in src/source.directive.ts:75\n                            \n                        \n                \n                    \n                        The source url of the markdown content.\nExample :\nSet static url to src directive.\n   * \n   *Bind url to src directive.\n   * \n   * Load\n   * **Loading...**\n   *\n                    \n                \n            \n        \n\n            \n    Outputs\n        \n            \n                \n                    \n                        \n                        error\n                    \n                \n                \n                    \n                        Type :     EventEmitter\n\n                    \n                \n                        \n                            \n                                    Defined in src/source.directive.ts:87\n                            \n                        \n                \n                    \n                        On error occur.\nExample :\n   * \n   *  '+$event.message)\">**Loading...**\n   *\n                    \n                \n            \n        \n\n\n\n            \n    \n        \n            Methods\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            load\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        load(url?: string)\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/source.directive.ts:112\n                            \n                        \n\n\n                \n                    \n                            Load the markdown content of SourceDirective url to ShowdownComponent.\nExample :\n   * \n   * Load\n   * \n   *\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        url\n                                                        \n                                                                    string\n                                                        \n                                                    \n                                                    \n                                                            Yes\n                                                    \n                                                    \n\n                                                        \n                                                                \nA url of markdown content to load (it will override the current url of SourceDirective#src)\n\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     void\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n\n\n\n\n    \n\n\n    \n        import { HttpClient, HttpErrorResponse } from '@angular/common/http';\nimport { Directive, EventEmitter, Input, OnChanges, Output } from '@angular/core';\nimport { ShowdownComponent } from './showdown.component';\n\n/**\n * A angular directive to `ShowdownComponent` for make http request of markdown content.\n *\n * ### Example\n *\n * Setup as standalone\n * ```typescript\n * import { NgModule } from '@angular/core';\n * import { HttpClientModule } from '@angular/common/http';\n * import { ShowdownComponent, SourceDirective } from 'ngx-showdown';\n *\n * @NgModule({\n *    declarations: [ ShowdownComponent, SourceDirective ],\n *    imports: [ HttpClientModule ]\n * })\n * export class AppModule {}\n * ```\n *\n * Bind url `src` directive\n * ```typescript\n * import { Component } from '@angular/core';\n *\n * @Component({\n *     selector: 'some',\n *     template: '**Loading...**\n * })\n * class SomeComponent {\n *     url: string = 'https://unpkg.com/ngx-showdown/README.md';\n *     // ...\n * }\n * ```\n *\n * Set static url\n * ```html\n * \n * ```\n *\n * Set template reference variable\n * ```html\n * \n * ```\n *\n * Listening to `error` events.\n * ```html\n * \n * ```\n */\n@Directive({\n  selector: 'showdown[src],[showdown][src]',\n  exportAs: 'source'\n})\nexport class SourceDirective implements OnChanges {\n\n  /**\n   * The source url of the markdown content.\n   *\n   * __Example :__\n   *\n   * Set static url to `src` directive.\n   * ```html\n   * \n   * ```\n   *\n   * Bind url to `src` directive.\n   * ```html\n   * \n   * Load\n   * **Loading...**\n   * ```\n   */\n  @Input() src: string;\n\n  /**\n   * On error occur.\n   *\n   * __Example :__\n   *\n   * ```html\n   * \n   *  '+$event.message)\">**Loading...**\n   * ```\n   */\n  @Output() error: EventEmitter = new EventEmitter();\n\n  constructor(private _showdownComponent: ShowdownComponent, private _http: HttpClient) {\n  }\n\n  /**\n   * A angular lifecycle method, Use to call to `load` method on src init/changes\n   * @internal\n   */\n  ngOnChanges(): void {\n    this.load();\n  }\n\n  /**\n   * Load the markdown content of {@link SourceDirective#src} url to {@link ShowdownComponent#value}.\n   *\n   * __Example :__\n   *\n   * ```html\n   * \n   * Load\n   * \n   * ```\n   * @param url - A url of markdown content to load (it will override the current url of `SourceDirective#src`)\n   */\n  public load(url?: string): void {\n    if (url) {\n      this.src = url;\n    }\n\n    if (this.src) {\n      this\n        ._http\n        .get(this.src, {responseType: 'text'})\n        .subscribe((response: string) => {\n          this._showdownComponent.render(response);\n        }, (error: HttpErrorResponse) => {\n          this.error.emit(error);\n        });\n    }\n  }\n\n}\n\n/**\n * @ignore\n * @deprecated from v5, renamed `SrcDirective` to {@link SourceDirective}.\n */\nexport declare let SrcDirective: typeof SourceDirective;\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                src/showdown-converter.provider.ts\n            \n            injectable\n            ShowdownConverter\n            \n                66 %\n                (2/3)\n            \n        \n        \n            \n                \n                src/showdown.component.ts\n            \n            component\n            ShowdownComponent\n            \n                85 %\n                (6/7)\n            \n        \n        \n            \n                \n                src/showdown.pipe.ts\n            \n            pipe\n            ShowdownPipe\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/source.directive.ts\n            \n            directive\n            SourceDirective\n            \n                80 %\n                (4/5)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Peer dependencies\n    \n    \n        \n            @angular/common : ^9.0.1\n        \n            @angular/core : ^9.0.1\n        \n            @angular/platform-browser : ^9.0.1\n        \n            @types/showdown : ^1.9.3\n        \n            showdown : ^1.9.1\n    \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\n\n  \n  Angular Showdown\n\n\n\n\n\n\n\n\n\n\n\nngx-showdown is an Angular (>=2) integration for Showdown, A Markdown to HTML converter.\n\nDemo\n\nDemo app in source code (live).\nYou can play with it in Stackblitz and Plunker.\n\nInstall\n$ npm install ngx-showdown --saveand install peer dependencies (@angular/common/http for SourceDirective)\n$ npm install showdown @angular/common @angular/platform-browser --saveand install type package of Showdown for TypeScript \n$ npm install @types/showdown --save-devUsage\nFor more information and explanations, see the full documentation.\nSetup ShowdownModule in your app.\nAdd ShowdownModule to imports of App.\nimport { NgModule } from '@angular/core';\nimport { ShowdownModule } from 'ngx-showdown';\n\n@NgModule({\n  imports: [ ShowdownModule ]\n})\nexport class AppModule {}Or with config (it will init ShowdownConfig provider)\nimport { NgModule } from '@angular/core';\nimport { ShowdownModule } from 'ngx-showdown';\n\n@NgModule({\n  imports: [ ShowdownModule.forRoot({emoji: true, noHeaderId: true, flavor: 'github'}) ]\n})\nexport class AppModule {}Use ShowdownComponent in the template\nBinding to [value] property\nBind markdown value to value property of showdown component.\n\nBind value and options.\nimport { Component } from '@angular/core';\nimport * as Showdown from 'showdown';\n\n@Component({\n  selector: 'some',\n  template: ''\n})\nexport class SomeComponent {\n  text: string = `\n# h1\n## h2\n`;\n  options: Showdown.ShowdownOptions = {...};\n  // ...\n}As directive on anther element \nMarkdown in component content\nA markdown value in the component content.  \n\n# H1\n## H2\nWith options\n\n    * a\n    * b\n    * c\nAs directive on anther element \n:showdown:**howdown**Load .md content (by SourceDirective)\nLoad markdown content of url source.\nBind input url to src directive.\n\n**No Url..**Note: Loading markdown content requires HttpClient of @angular/common/http\nMixing sources\nWhen both Content and [value], It will render [value].\n# ContentWhen both Content and [src], It will render Content and when src loads then results will be src content. \n# ContentWhen both [value] and [src], It will render [value] and when src loads then results will be src content. \nBinding options\nBind options object (it init root ShowdownConfig and then set the bind options)\nimport { Component } from '@angular/core';\nimport * as Showdown from 'showdown';\n\n@Component({\n  selector: `some`,\n  template: ``\n})\nexport class SomeComponent {\n  text: string = '# Some';\n  options: Showdown.ShowdownOptions = {noHeaderId: true};\n  // ...\n}Or\n# abcBind single option (it have input properties for all showdown options).\n# abcSanitize the convert html output\nSanitize the convert html output by DomSanitizer.\n\n# Some\nClick\n__Foo__\nAlso sanitize content of src url.\nUse ShowdownPipe in the template\nTransform markdown value of text property to html. \n{{ text | showdown }}Transform value with options (it init root ShowdownConfig and then set the pipe options)\nimport { Component } from '@angular/core';\nimport * as Showdown from 'showdown';\n\n@Component({\n  selector: 'some',\n  template: '{{ text | showdown:options }}'\n})\nexport class SomeComponent {\n  text: string = `\n      # h1\n      ## h2\n  `;\n  options: Showdown.ShowdownOptions = {smartIndentationFix: true};\n  // ...\n}Use ShowdownConverter service\nimport { Injectable } from '@angular/core';\nimport { ShowdownConverter } from 'ngx-showdown';\n\n@Injectable()\nexport class SomeService {\n  constructor(showdownConverter: ShowdownConverter){\n    console.log(showdownConverter.makeHtml('# Showdown'));\n  }\n}Set config provider (ShowdownConfig)\nSet root config that will be injected to ShowdownComponent, ShowdownPipe, ShowdownConverter when they are created.\nimport { NgModel } from '@angular/core';\nimport { ShowdownModule, ShowdownConverter } from 'ngx-showdown';\nimport * as Showdown from 'showdown';\n\nlet colorExtension: Showdown.FilterExtension = {\n  type: 'output',\n  filter(text: string, converter: ShowdownConverter){\n    return text.replace('$color', converter.getOption('color') || 'green')\n  }\n};\n\n@NgModel({\n  imports:[\n    ShowdownModule.forRoot({\n      flavor: 'original',\n      emoji: true,\n      color: 'red',\n      extensions: [ colorExtension ]\n    })\n  ]\n})\nexport class AppModule {}Override the root config provider value.\nimport { Component } from '@angular/core';\nimport { ShowdownConfig } from 'ngx-showdown';\n\n@Component({\n  selector: 'some',\n  template: '# Header',\n  providers: [ {provide: ShowdownConfig, useValue: {underline: true, emoji: false}} ]\n})\nexport class SomeComponent {}Set the config manually by the converter methods.\nimport { Component } from '@angular/core';\nimport { ShowdownComponent } from 'ngx-showdown';\nimport * as highlightExtension from 'showdown-highlight';\nimport 'highlight.js/styles/default.css';\n\n@Component({\n  selector: 'some',\n  template: '# Header'\n})\nexport class SomeComponent {\n  constructor(showdownComponent: ShowdownComponent) {\n    showdownComponent.addExtension(highlightExtension);\n    showdownComponent.setFlavor('ghost');\n    showdownComponent.setOptions({emoji: true});\n  }\n}Flavor\nSet root flavor (Showdown flavors).\nimport { NgModel } from '@angular/core';\nimport { ShowdownModule } from 'ngx-showdown';\n\n@NgModel({\n  imports:[\n    ShowdownModule.forRoot({flavor: 'github'})\n  ]\n})\nexport class AppModule {}Note: If flavor is not set then the default value is 'vanilla' flavor.\nConverterOptions\nSet root ConverterOptions (Showdown options).\nimport { NgModel } from '@angular/core';\nimport { ShowdownModule } from 'ngx-showdown';\n\n@NgModel({\n  imports:[\n    ShowdownModule.forRoot({underline: true, emoji: false})\n  ]\n})\nexport class AppModule {}Extensions\nSet root Extensions (Showdown extensions).\nWith extension can be made changes to the Markdown input ('lang') and the Html output also listen to parse event, you can make extension or search in npm for existing extension.\nimport { NgModel } from '@angular/core';\nimport { ShowdownModule } from 'ngx-showdown';\nimport * as Showdown from 'showdown';\nimport * as highlightExtension from 'showdown-highlight';\nimport 'highlight.js/styles/default.css';\n\nlet someExtension: Showdown.ShowdownExtension = {\n  type: 'lang',\n  regex: new RegExp('markdown', 'g'),\n  replace: 'showdown'\n};\n\n\n@NgModel({\n  imports: [ \n    ShowdownModule.forRoot({extensions: [ someExtension, highlightExtension ]}) \n  ]\n})\nexport class AppModule {}Troubleshoot\nInterpolation\nUsing unescaped {} ({}) in template causes an template parse error (@angular/angular/#11859), \nThe solution is to use escape chars (html char code etc.), \nAnther solution is to override the default interpolation.\nWhitespaces\nAngular aot compiler remove whitespaces by default, use ngPreserveWhitespaces to preserve whitespaces. \n\n* a\n  * 1\n  * 2\n* b\nWith ngPreserveWhitespaces\n* a\n  * 1\n  * 2\n* bWithout ngPreserveWhitespaces\n* a * 1 * 2\n* bIndentation\nShowdown converter smartIndentationFix option can fix string indentation problems of es6 template and html. \ntext = `\n  # A\n  ## B\n`;With smartIndentationFix\n# A\n## BWithout smartIndentationFix\n  # A\n  ## BContribute\nPull requests are welcome!\nDevelopment\nThis project built with Angular Cli.\nInstall dependencies\n$ yarn installRun test\n$ yarn testBuild for release\n$ yarn buildCredits\nThis project use Showdown library to convert Markdown to Html.\nLicense\nCopyright © Yisrael Eliav,\nLicensed under the MIT license.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"license.html":{"url":"license.html","title":"getting-started - license","body":"\n                   \n\nThe MIT License (MIT)\nCopyright © Yisrael Eliav\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n            \n                \n                    \n                        ShowdownModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n  \n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_ShowdownModule\n\n\n\ncluster_ShowdownModule_declarations\n\n\n\ncluster_ShowdownModule_exports\n\n\n\ncluster_ShowdownModule_providers\n\n\n\n\nDECLARATIONS\n\nDECLARATIONS\n\n\n\nShowdownModule\n\nShowdownModule\n\nShowdownModule -->\n\nDECLARATIONS->ShowdownModule\n\n\n\n\n\nDECLARATIONS \n\nDECLARATIONS \n\nDECLARATIONS  -->\n\nShowdownModule->DECLARATIONS \n\n\n\n\n\nShowdownConverter\n\nShowdownConverter\n\nShowdownModule -->\n\nShowdownConverter->ShowdownModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n  \n\n    \n        \n            \n                \n                    \n                    \n                        1 Module\n                    \n                \n            \n        \n        \n            \n                \n                    \n                    1 Component\n                \n            \n        \n        \n            \n                \n                    \n                    1 Directive\n                \n            \n        \n        \n            \n                \n                    \n                    1 Injectable\n                \n            \n        \n        \n            \n                \n                    \n                    1 Pipe\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
