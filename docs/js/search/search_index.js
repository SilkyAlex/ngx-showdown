var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.5","fields":["title","body"],"fieldVectors":[["title/components/ShowdownComponent.html",[0,0.494,1,0.645]],["body/components/ShowdownComponent.html",[0,0.87,1,0.993,2,1.638,3,0.374,4,0.294,5,0.998,6,0.998,7,0.226,8,0.753,9,0.615,10,1.257,11,2.282,12,1.466,13,1.508,14,1.227,15,0.615,16,0.773,17,0.093,18,1.144,19,0.711,20,0.761,21,0.483,22,0.9,23,0.615,24,1.017,25,1.017,26,0.483,27,1.872,28,2.445,29,1.843,30,0.971,31,1.627,32,1.627,33,1.427,34,1.588,35,1.417,36,2.16,37,1.638,38,1.543,39,1.235,40,1.351,41,1.236,42,1.236,43,2.01,44,0.971,45,1.662,46,1.697,47,0.905,48,0.711,49,1.236,50,2.468,51,1.697,52,1.638,53,1.236,54,1.236,55,1.236,56,1.235,57,0.346,58,0.971,59,2.084,60,1.572,61,0.971,62,1.236,63,2.084,64,0.471,65,0.483,66,1.235,67,1.572,68,2.747,69,1.638,70,0.591,71,0.998,72,2.413,73,2.084,74,2.16,75,0.983,76,1.138,77,1.227,78,0.998,79,1,80,1.185,81,0.739,82,1.185,83,1.638,84,0.983,85,0.998,86,1,87,2.084,88,1.638,89,1.236,90,1.236,91,2.665,92,1.638,93,2.084,94,1.235,95,2.084,96,2.084,97,2.084,98,2.084,99,2.084,100,2.084,101,2.084,102,2.084,103,2.084,104,2.084,105,2.125,106,2.084,107,2.084,108,1.82,109,1.572,110,1.638,111,2.084,112,2.084,113,0.998,114,1.236,115,1.638,116,0.998,117,1.236,118,0.062,119,0.971,120,1.236,121,1.572,122,0.905,123,1.872,124,0.998,125,0.753,126,0.998,127,0.998,128,0.998,129,0.591,130,0.471,131,0.591,132,0.591,133,1.257,134,1.236,135,0.998,136,0.971,137,0.998,138,0.998,139,0.998,140,0.998,141,1.638,142,2.084,143,0.998,144,0.998,145,0.998,146,0.753,147,0.998,148,0.998,149,0.998,150,0.998,151,0.998,152,0.998,153,0.998,154,0.753,155,0.998,156,0.998,157,0.998,158,0.998,159,0.998,160,0.998,161,0.998,162,0.998,163,0.998,164,0.998,165,0.998,166,0.998,167,0.998,168,0.998,169,0.998,170,0.591,171,1.638,172,0.998,173,0.753,174,0.998,175,0.711,176,1.579,177,1.579,178,0.998,179,2.413,180,0.471,181,0.998,182,0.998,183,0.753,184,1.236,185,0.998,186,0.998,187,0.998,188,0.998,189,1.638,190,0.998,191,0.753,192,0.753,193,1.236,194,1.572,195,0.753,196,0.998,197,0.591,198,0.998,199,0.998,200,0.998,201,0.998,202,0.753,203,0.753,204,0.753,205,0.998,206,0.374,207,1.638,208,0.998,209,0.998,210,0.998,211,0.998,212,0.998,213,0.998,214,1.236,215,0.998,216,0.998,217,0.753,218,0.998,219,0.998,220,0.591,221,2.413,222,0.998,223,0.753,224,0.294,225,0.753,226,0.998,227,0.034,228,0.02]],["title/injectables/ShowdownConverter.html",[57,0.363,229,0.82]],["body/injectables/ShowdownConverter.html",[3,0.828,4,0.651,7,0.499,9,1.117,12,1.117,13,1.117,14,1.117,15,1.117,16,1.405,17,0.093,18,1.229,19,1.064,20,0.851,21,1.064,22,0.897,24,1.111,25,1.111,26,0.878,29,1.871,30,1.765,35,1.353,38,1.59,45,1.702,47,1.117,56,1.308,57,0.685,64,1.041,65,0.878,66,1.997,70,1.308,75,1.405,76,1.702,77,1.117,79,1.117,80,1.117,81,0.673,82,1.264,84,1.041,86,1.353,118,0.045,122,0.828,123,1.765,125,2.246,131,1.308,133,1.041,175,0.878,192,1.665,206,0.828,214,2.246,217,1.665,227,0.061,228,0.045,229,1.456,230,2.207,231,2.542,232,1.665,233,1.405,234,2.978,235,2.246,236,2.246,237,2.978,238,2.978,239,2.978,240,2.978,241,2.978,242,2.207,243,2.207,244,2.207,245,2.207,246,2.207,247,2.207,248,1.308,249,2.207,250,2.207,251,2.207,252,1.665,253,2.207,254,2.207,255,2.207]],["title/modules/ShowdownModule.html",[256,1.296,257,0.82]],["body/modules/ShowdownModule.html",[1,0.834,3,0.768,4,0.604,7,0.463,9,1.061,14,1.216,17,0.093,18,1.246,19,1.213,20,0.829,21,1.031,22,0.896,23,1.586,24,1.082,25,1.082,26,1.031,39,1.676,40,1.334,46,1.676,57,0.629,65,0.604,75,1.834,76,1.731,77,0.768,79,0.768,80,0.768,81,0.463,82,0.768,86,1.312,118,0.042,122,0.768,131,1.213,132,1.213,133,0.966,134,1.545,175,0.834,176,1.213,177,1.213,180,0.966,206,0.768,220,1.213,224,0.834,227,0.058,228,0.042,233,1.649,248,1.676,256,1.213,257,1.617,258,1.213,259,0.768,260,1.545,261,2.445,262,1.545,263,1.545,264,1.545,265,1.545,266,2.134,267,1.545,268,1.213,269,2.048,270,2.637,271,2.637,272,2.348,273,2.048,274,2.829,275,3.241,276,2.048,277,2.134,278,2.829,279,2.829,280,2.134,281,2.134,282,2.829,283,2.829,284,2.829,285,2.829,286,2.134,287,2.829,288,3.241,289,1.545,290,1.061,291,2.048,292,2.048,293,1.545,294,1.545]],["title/pipes/ShowdownPipe.html",[290,0.82,295,0.82]],["body/pipes/ShowdownPipe.html",[0,0.663,3,0.809,4,0.636,7,0.487,9,1.1,10,1.383,12,1.543,13,1.58,14,1.1,15,1.1,16,1.383,17,0.093,18,1.199,19,1.054,20,0.753,21,0.864,22,0.952,23,1.1,24,1.102,25,1.102,26,0.864,28,2.479,29,1.94,31,1.383,32,1.383,33,1.383,34,1.383,35,1.479,38,1.763,40,1.383,56,1.278,57,0.486,58,1.278,61,1.278,65,0.636,77,0.809,79,0.809,80,1.249,81,0.487,82,0.809,84,1.017,86,1.1,118,0.068,122,1.341,132,1.278,136,1.278,170,1.737,175,0.864,180,1.017,183,1.627,206,1.1,227,0.06,228,0.044,290,1.446,295,1.341,296,2.157,297,1.627,298,3.177,299,2.931,300,2.931,301,2.931,302,2.157,303,2.931,304,2.157,305,2.157]],["title/directives/SourceDirective.html",[48,0.645,224,0.645]],["body/directives/SourceDirective.html",[0,0.723,1,1.167,3,0.631,4,0.943,7,0.38,9,0.923,10,1.372,12,1.413,13,1.378,14,1.277,15,0.923,16,1.16,17,0.093,18,1.167,19,0.943,20,0.769,21,0.725,22,0.556,23,0.923,24,0.857,25,1.004,26,0.725,27,1.896,31,1.509,32,1.509,33,1.16,34,0.794,35,1.413,45,1.677,46,1.896,47,0.631,48,1.151,51,2.231,54,1.856,55,1.856,58,1.458,60,2.194,61,0.997,62,1.269,64,0.794,65,0.725,66,1.723,67,1.856,70,0.997,77,1.2,79,0.923,80,0.923,81,0.723,82,0.923,84,0.794,94,1.458,105,1.458,108,1.856,118,0.034,119,1.458,120,1.856,121,1.269,122,0.631,123,1.723,133,0.794,175,0.725,176,1.723,177,1.723,184,1.269,191,1.269,193,1.269,194,1.856,197,2.344,202,1.269,204,1.269,206,0.631,223,1.269,224,1.083,225,1.856,227,0.05,228,0.034,272,1.458,289,1.269,306,1.269,307,1.856,308,2.46,309,2.46,310,3.2,311,2.194,312,3.201,313,2.945,314,2.414,315,2.46,316,2.46,317,2.46,318,2.841,319,2.46,320,2.46,321,1.682,322,3.2,323,2.414,324,2.46,325,2.46,326,1.682,327,3.2,328,2.46,329,2.46,330,2.46,331,1.682,332,2.908,333,2.46,334,0.997,335,1.682,336,1.682,337,2.46,338,1.682,339,1.682,340,1.682,341,1.682,342,1.682]],["title/coverage.html",[343,2.232]],["body/coverage.html",[0,0.737,1,0.962,7,0.737,8,2.46,17,0.088,48,0.962,57,0.541,81,0.737,118,0.067,224,0.962,227,0.078,228,0.067,229,1.224,231,2.46,232,2.46,290,1.224,295,1.224,297,2.46,306,2.46,334,1.933,343,2.46,344,1.933,345,3.262,346,3.262,347,3.262,348,3.262,349,3.262,350,3.262,351,3.262,352,3.262,353,3.262,354,3.262,355,3.262,356,3.262]],["title/dependencies.html",[259,0.984,357,1.387]],["body/dependencies.html",[17,0.089,20,0.754,22,0.754,118,0.068,129,1.976,130,1.573,227,0.079,228,0.068,259,1.447,358,3.335,359,3.335,360,2.516,361,2.516,362,4.07,363,2.516,364,3.335,365,3.335]],["title/index.html",[64,0.867,366,1.387,367,1.387]],["body/index.html",[0,0.874,1,0.846,4,0.616,7,0.306,10,1.546,11,1.926,12,1.358,13,1.323,15,0.508,17,0.092,18,1.25,19,0.846,20,0.863,21,1.109,22,0.975,24,1.126,25,1.126,26,0.966,27,1.838,28,2.292,29,1.824,30,0.803,31,1.463,32,1.744,33,1.463,34,1.611,35,1.163,36,1.577,38,1.204,39,1.701,40,1.664,41,1.022,42,1.577,43,1.022,44,1.513,45,1.707,47,1.229,48,0.753,49,1.926,50,1.577,51,2.229,53,1.926,57,0.543,65,0.4,68,1.577,74,1.022,75,1.546,76,1.546,81,0.577,86,1.077,89,1.022,90,1.022,94,1.701,105,1.513,109,1.022,114,1.926,117,1.926,118,0.028,119,1.239,129,0.803,130,0.639,136,1.239,146,1.926,154,1.577,170,0.803,173,1.577,175,0.4,180,0.639,195,1.926,197,0.803,203,1.022,224,0.616,227,0.043,228,0.052,229,0.784,233,0.639,235,1.022,236,1.022,248,1.701,252,1.022,257,1.358,259,0.784,270,1.577,271,1.926,272,2.024,277,1.022,280,2.472,281,1.577,286,2.576,290,0.784,293,1.022,294,1.022,295,0.508,298,1.577,307,1.022,311,1.577,312,1.926,313,2.661,314,1.022,318,1.022,323,1.022,334,0.803,344,0.803,357,1.022,360,1.022,361,1.022,363,1.022,368,2.87,369,1.355,370,2.091,371,1.355,372,1.355,373,1.355,374,1.355,375,3.415,376,2.87,377,2.091,378,1.355,379,1.355,380,1.355,381,1.355,382,1.355,383,1.355,384,1.355,385,2.553,386,1.355,387,2.091,388,2.091,389,1.355,390,1.355,391,1.355,392,1.355,393,1.355,394,2.091,395,2.553,396,2.553,397,1.355,398,1.355,399,1.355,400,1.355,401,1.355,402,1.355,403,1.355,404,2.553,405,2.091,406,2.091,407,1.355,408,1.355,409,1.355,410,1.355,411,1.355,412,1.355,413,1.355,414,1.355,415,3.527,416,2.091,417,1.355,418,1.355,419,1.355,420,1.355,421,1.355,422,1.355,423,1.355,424,1.355,425,1.355,426,2.553,427,2.091,428,2.091,429,1.355,430,1.355,431,1.355,432,1.355,433,1.355,434,1.355,435,1.355,436,2.553,437,2.091,438,1.355,439,2.553,440,1.355,441,2.091,442,1.355,443,2.091,444,1.022,445,1.355,446,1.355,447,2.091,448,1.355,449,1.355,450,1.355,451,1.355,452,1.355,453,1.355,454,1.355,455,2.091,456,1.355,457,1.355,458,1.355,459,1.355,460,2.091,461,1.355,462,1.355,463,1.355,464,1.355,465,2.553,466,1.355,467,1.355,468,1.355,469,2.553,470,1.355,471,2.091,472,1.355,473,1.355,474,1.355,475,1.355,476,1.355,477,1.355,478,1.355,479,1.355,480,2.091,481,1.355,482,1.355,483,2.553,484,1.355,485,1.355,486,1.355,487,1.355,488,1.355,489,1.355,490,1.239,491,1.022,492,1.022,493,1.022,494,1.355,495,1.355,496,1.022]],["title/license.html",[366,1.387,367,1.387,490,1.09]],["body/license.html",[17,0.079,47,1.344,118,0.06,227,0.073,228,0.06,268,1.744,344,1.744,444,2.221,490,1.744,491,2.913,492,2.221,493,2.221,496,2.702,497,3.582,498,2.944,499,2.944,500,2.944,501,2.944,502,2.944,503,2.944,504,3.582,505,4.309,506,2.944,507,2.944,508,2.944,509,3.862,510,2.944,511,3.582,512,2.944,513,2.944,514,2.944,515,2.944,516,2.944,517,2.944,518,2.944,519,2.944,520,2.944,521,3.582,522,2.944,523,2.944,524,2.944,525,2.944,526,2.944,527,2.944,528,2.944,529,3.582,530,3.582,531,2.944,532,2.944,533,2.944,534,2.944,535,2.944,536,2.944,537,2.944,538,2.944,539,2.944,540,2.944,541,2.944,542,2.944,543,2.944,544,2.944,545,2.944,546,2.944,547,2.944,548,2.944,549,2.944,550,2.944,551,2.944,552,2.944,553,2.944,554,2.944,555,2.944,556,2.944,557,2.944,558,2.944,559,2.944]],["title/modules.html",[258,1.753]],["body/modules.html",[17,0.08,118,0.07,130,1.621,227,0.08,228,0.07,257,1.29,258,2.037,560,3.438,561,3.438,562,3.438]],["title/overview.html",[563,2.232]],["body/overview.html",[0,0.721,17,0.086,23,1.628,44,2.494,48,0.941,57,0.663,118,0.065,220,1.891,227,0.077,228,0.065,229,1.197,233,1.505,256,2.228,257,1.616,259,1.197,260,2.407,261,2.407,262,2.407,263,2.407,264,2.407,265,2.407,266,2.836,267,2.407,268,1.891,295,1.197,563,2.407]]],"invertedIndex":[["",{"_index":17,"title":{},"body":{"components/ShowdownComponent.html":{},"injectables/ShowdownConverter.html":{},"modules/ShowdownModule.html":{},"pipes/ShowdownPipe.html":{},"directives/SourceDirective.html":{},"coverage.html":{},"dependencies.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{}}}],["1",{"_index":44,"title":{},"body":{"components/ShowdownComponent.html":{},"index.html":{},"overview.html":{}}}],["1.9.1",{"_index":365,"title":{},"body":{"dependencies.html":{}}}],["1.9.3",{"_index":364,"title":{},"body":{"dependencies.html":{}}}],["1/1",{"_index":352,"title":{},"body":{"coverage.html":{}}}],["10",{"_index":390,"title":{},"body":{"index.html":{}}}],["10.0.0",{"_index":362,"title":{},"body":{"dependencies.html":{}}}],["100",{"_index":351,"title":{},"body":{"coverage.html":{}}}],["1px",{"_index":102,"title":{},"body":{"components/ShowdownComponent.html":{}}}],["2",{"_index":368,"title":{},"body":{"index.html":{}}}],["2.0.1",{"_index":359,"title":{},"body":{"dependencies.html":{}}}],["2/3",{"_index":348,"title":{},"body":{"coverage.html":{}}}],["3",{"_index":88,"title":{},"body":{"components/ShowdownComponent.html":{}}}],["4/5",{"_index":354,"title":{},"body":{"coverage.html":{}}}],["5px",{"_index":100,"title":{},"body":{"components/ShowdownComponent.html":{}}}],["6/7",{"_index":350,"title":{},"body":{"coverage.html":{}}}],["66",{"_index":347,"title":{},"body":{"coverage.html":{}}}],["80",{"_index":353,"title":{},"body":{"coverage.html":{}}}],["85",{"_index":349,"title":{},"body":{"coverage.html":{}}}],["95",{"_index":98,"title":{},"body":{"components/ShowdownComponent.html":{}}}],["__",{"_index":177,"title":{},"body":{"components/ShowdownComponent.html":{},"modules/ShowdownModule.html":{},"directives/SourceDirective.html":{}}}],["__example",{"_index":176,"title":{},"body":{"components/ShowdownComponent.html":{},"modules/ShowdownModule.html":{},"directives/SourceDirective.html":{}}}],["__foo__",{"_index":409,"title":{},"body":{"index.html":{}}}],["__some",{"_index":299,"title":{},"body":{"pipes/ShowdownPipe.html":{}}}],["_domsanitizer",{"_index":73,"title":{},"body":{"components/ShowdownComponent.html":{}}}],["_elementref",{"_index":83,"title":{},"body":{"components/ShowdownComponent.html":{}}}],["_http",{"_index":322,"title":{},"body":{"directives/SourceDirective.html":{}}}],["_sanitize",{"_index":185,"title":{},"body":{"components/ShowdownComponent.html":{}}}],["_showdowncomponent",{"_index":325,"title":{},"body":{"directives/SourceDirective.html":{}}}],["_tooption",{"_index":137,"title":{},"body":{"components/ShowdownComponent.html":{}}}],["_tooption(sanitize",{"_index":190,"title":{},"body":{"components/ShowdownComponent.html":{}}}],["_tooption(value",{"_index":218,"title":{},"body":{"components/ShowdownComponent.html":{}}}],["abcbind",{"_index":407,"title":{},"body":{"index.html":{}}}],["abcsanitize",{"_index":408,"title":{},"body":{"index.html":{}}}],["above",{"_index":528,"title":{},"body":{"license.html":{}}}],["access",{"_index":213,"title":{},"body":{"components/ShowdownComponent.html":{}}}],["accessors",{"_index":69,"title":{},"body":{"components/ShowdownComponent.html":{}}}],["action",{"_index":553,"title":{},"body":{"license.html":{}}}],["actual_component",{"_index":226,"title":{},"body":{"components/ShowdownComponent.html":{}}}],["add",{"_index":270,"title":{},"body":{"modules/ShowdownModule.html":{},"index.html":{}}}],["alias",{"_index":111,"title":{},"body":{"components/ShowdownComponent.html":{}}}],["allowedcommonjsdependencies",{"_index":387,"title":{},"body":{"index.html":{}}}],["and/or",{"_index":519,"title":{},"body":{"license.html":{}}}],["angular",{"_index":10,"title":{},"body":{"components/ShowdownComponent.html":{},"pipes/ShowdownPipe.html":{},"directives/SourceDirective.html":{},"index.html":{}}}],["angular.json",{"_index":389,"title":{},"body":{"index.html":{}}}],["angular/angular/#11859",{"_index":459,"title":{},"body":{"index.html":{}}}],["angular/common",{"_index":361,"title":{},"body":{"dependencies.html":{},"index.html":{}}}],["angular/common/http",{"_index":311,"title":{},"body":{"directives/SourceDirective.html":{},"index.html":{}}}],["angular/core",{"_index":20,"title":{},"body":{"components/ShowdownComponent.html":{},"injectables/ShowdownConverter.html":{},"modules/ShowdownModule.html":{},"pipes/ShowdownPipe.html":{},"directives/SourceDirective.html":{},"dependencies.html":{},"index.html":{}}}],["angular/platform",{"_index":129,"title":{},"body":{"components/ShowdownComponent.html":{},"dependencies.html":{},"index.html":{}}}],["angular:browser",{"_index":393,"title":{},"body":{"index.html":{}}}],["anther",{"_index":49,"title":{},"body":{"components/ShowdownComponent.html":{},"index.html":{}}}],["aot",{"_index":466,"title":{},"body":{"index.html":{}}}],["app",{"_index":271,"title":{},"body":{"modules/ShowdownModule.html":{},"index.html":{}}}],["appmodule",{"_index":26,"title":{},"body":{"components/ShowdownComponent.html":{},"injectables/ShowdownConverter.html":{},"modules/ShowdownModule.html":{},"pipes/ShowdownPipe.html":{},"directives/SourceDirective.html":{},"index.html":{}}}],["arising",{"_index":557,"title":{},"body":{"license.html":{}}}],["associated",{"_index":506,"title":{},"body":{"license.html":{}}}],["authors",{"_index":546,"title":{},"body":{"license.html":{}}}],["b",{"_index":53,"title":{},"body":{"components/ShowdownComponent.html":{},"index.html":{}}}],["backslashescapeshtmltags",{"_index":143,"title":{},"body":{"components/ShowdownComponent.html":{}}}],["bar",{"_index":279,"title":{},"body":{"modules/ShowdownModule.html":{}}}],["bcontribute",{"_index":475,"title":{},"body":{"index.html":{}}}],["bind",{"_index":27,"title":{},"body":{"components/ShowdownComponent.html":{},"directives/SourceDirective.html":{},"index.html":{}}}],["bindentation",{"_index":472,"title":{},"body":{"index.html":{}}}],["binding",{"_index":394,"title":{},"body":{"index.html":{}}}],["black",{"_index":104,"title":{},"body":{"components/ShowdownComponent.html":{}}}],["bold",{"_index":37,"title":{},"body":{"components/ShowdownComponent.html":{}}}],["boolean",{"_index":91,"title":{},"body":{"components/ShowdownComponent.html":{}}}],["bootstrap",{"_index":260,"title":{},"body":{"modules/ShowdownModule.html":{},"overview.html":{}}}],["border",{"_index":101,"title":{},"body":{"components/ShowdownComponent.html":{}}}],["both",{"_index":404,"title":{},"body":{"index.html":{}}}],["box",{"_index":96,"title":{},"body":{"components/ShowdownComponent.html":{}}}],["browse",{"_index":562,"title":{},"body":{"modules.html":{}}}],["browser",{"_index":130,"title":{},"body":{"components/ShowdownComponent.html":{},"dependencies.html":{},"index.html":{},"modules.html":{}}}],["browser/domsanitizer#sanitize",{"_index":187,"title":{},"body":{"components/ShowdownComponent.html":{}}}],["build",{"_index":388,"title":{},"body":{"index.html":{}}}],["buildcredits",{"_index":488,"title":{},"body":{"index.html":{}}}],["builder",{"_index":391,"title":{},"body":{"index.html":{}}}],["built",{"_index":481,"title":{},"body":{"index.html":{}}}],["bwithout",{"_index":471,"title":{},"body":{"index.html":{}}}],["c",{"_index":397,"title":{},"body":{"index.html":{}}}],["call",{"_index":202,"title":{},"body":{"components/ShowdownComponent.html":{},"directives/SourceDirective.html":{}}}],["causes",{"_index":458,"title":{},"body":{"index.html":{}}}],["changes",{"_index":203,"title":{},"body":{"components/ShowdownComponent.html":{},"index.html":{}}}],["char",{"_index":463,"title":{},"body":{"index.html":{}}}],["charge",{"_index":501,"title":{},"body":{"license.html":{}}}],["chars",{"_index":462,"title":{},"body":{"index.html":{}}}],["check",{"_index":196,"title":{},"body":{"components/ShowdownComponent.html":{}}}],["claim",{"_index":549,"title":{},"body":{"license.html":{}}}],["class",{"_index":25,"title":{},"body":{"components/ShowdownComponent.html":{},"injectables/ShowdownConverter.html":{},"modules/ShowdownModule.html":{},"pipes/ShowdownPipe.html":{},"directives/SourceDirective.html":{},"index.html":{}}}],["cli",{"_index":482,"title":{},"body":{"index.html":{}}}],["click",{"_index":109,"title":{},"body":{"components/ShowdownComponent.html":{},"index.html":{}}}],["cluster_showdownmodule",{"_index":262,"title":{},"body":{"modules/ShowdownModule.html":{},"overview.html":{}}}],["cluster_showdownmodule_declarations",{"_index":263,"title":{},"body":{"modules/ShowdownModule.html":{},"overview.html":{}}}],["cluster_showdownmodule_exports",{"_index":264,"title":{},"body":{"modules/ShowdownModule.html":{},"overview.html":{}}}],["cluster_showdownmodule_providers",{"_index":265,"title":{},"body":{"modules/ShowdownModule.html":{},"overview.html":{}}}],["code",{"_index":173,"title":{},"body":{"components/ShowdownComponent.html":{},"index.html":{}}}],["codeblocks.after",{"_index":284,"title":{},"body":{"modules/ShowdownModule.html":{}}}],["color",{"_index":423,"title":{},"body":{"index.html":{}}}],["colorextension",{"_index":416,"title":{},"body":{"index.html":{}}}],["compiler",{"_index":467,"title":{},"body":{"index.html":{}}}],["completehtmldocument",{"_index":144,"title":{},"body":{"components/ShowdownComponent.html":{}}}],["component",{"_index":0,"title":{"components/ShowdownComponent.html":{}},"body":{"components/ShowdownComponent.html":{},"pipes/ShowdownPipe.html":{},"directives/SourceDirective.html":{},"coverage.html":{},"index.html":{},"overview.html":{}}}],["component_template",{"_index":222,"title":{},"body":{"components/ShowdownComponent.html":{}}}],["components",{"_index":2,"title":{},"body":{"components/ShowdownComponent.html":{}}}],["conditions",{"_index":527,"title":{},"body":{"license.html":{}}}],["config",{"_index":75,"title":{},"body":{"components/ShowdownComponent.html":{},"injectables/ShowdownConverter.html":{},"modules/ShowdownModule.html":{},"index.html":{}}}],["config.extensions",{"_index":249,"title":{},"body":{"injectables/ShowdownConverter.html":{}}}],["config.flavor",{"_index":251,"title":{},"body":{"injectables/ShowdownConverter.html":{}}}],["config.provider",{"_index":131,"title":{},"body":{"components/ShowdownComponent.html":{},"injectables/ShowdownConverter.html":{},"modules/ShowdownModule.html":{}}}],["configurable",{"_index":219,"title":{},"body":{"components/ShowdownComponent.html":{}}}],["connection",{"_index":558,"title":{},"body":{"license.html":{}}}],["console.log",{"_index":285,"title":{},"body":{"modules/ShowdownModule.html":{}}}],["console.log(`some:\\nmarkdown",{"_index":238,"title":{},"body":{"injectables/ShowdownConverter.html":{}}}],["console.log(showdownconverter.makehtml",{"_index":412,"title":{},"body":{"index.html":{}}}],["const",{"_index":134,"title":{},"body":{"components/ShowdownComponent.html":{},"modules/ShowdownModule.html":{}}}],["constructor",{"_index":70,"title":{},"body":{"components/ShowdownComponent.html":{},"injectables/ShowdownConverter.html":{},"directives/SourceDirective.html":{}}}],["constructor(@optional",{"_index":247,"title":{},"body":{"injectables/ShowdownConverter.html":{}}}],["constructor(_elementref",{"_index":71,"title":{},"body":{"components/ShowdownComponent.html":{}}}],["constructor(_showdowncomponent",{"_index":321,"title":{},"body":{"directives/SourceDirective.html":{}}}],["constructor(config",{"_index":242,"title":{},"body":{"injectables/ShowdownConverter.html":{}}}],["constructor(private",{"_index":191,"title":{},"body":{"components/ShowdownComponent.html":{},"directives/SourceDirective.html":{}}}],["constructor(showdowncomponent",{"_index":429,"title":{},"body":{"index.html":{}}}],["constructor(showdownconverter",{"_index":236,"title":{},"body":{"injectables/ShowdownConverter.html":{},"index.html":{}}}],["content",{"_index":51,"title":{},"body":{"components/ShowdownComponent.html":{},"directives/SourceDirective.html":{},"index.html":{}}}],["contentwhen",{"_index":405,"title":{},"body":{"index.html":{}}}],["contract",{"_index":554,"title":{},"body":{"license.html":{}}}],["convert",{"_index":117,"title":{},"body":{"components/ShowdownComponent.html":{},"index.html":{}}}],["converter",{"_index":86,"title":{},"body":{"components/ShowdownComponent.html":{},"injectables/ShowdownConverter.html":{},"modules/ShowdownModule.html":{},"pipes/ShowdownPipe.html":{},"index.html":{}}}],["converter.getoption('color",{"_index":420,"title":{},"body":{"index.html":{}}}],["converter.provider",{"_index":132,"title":{},"body":{"components/ShowdownComponent.html":{},"modules/ShowdownModule.html":{},"pipes/ShowdownPipe.html":{}}}],["converter.provider.ts",{"_index":232,"title":{},"body":{"injectables/ShowdownConverter.html":{},"coverage.html":{}}}],["converter.provider.ts:40",{"_index":243,"title":{},"body":{"injectables/ShowdownConverter.html":{}}}],["converter.provider.ts:53",{"_index":244,"title":{},"body":{"injectables/ShowdownConverter.html":{}}}],["converteroptions",{"_index":437,"title":{},"body":{"index.html":{}}}],["cool",{"_index":107,"title":{},"body":{"components/ShowdownComponent.html":{}}}],["copies",{"_index":521,"title":{},"body":{"license.html":{}}}],["copy",{"_index":504,"title":{},"body":{"license.html":{}}}],["copyright",{"_index":491,"title":{},"body":{"index.html":{},"license.html":{}}}],["coverage",{"_index":343,"title":{"coverage.html":{}},"body":{"coverage.html":{}}}],["created",{"_index":414,"title":{},"body":{"index.html":{}}}],["current",{"_index":120,"title":{},"body":{"components/ShowdownComponent.html":{},"directives/SourceDirective.html":{}}}],["damages",{"_index":550,"title":{},"body":{"license.html":{}}}],["deal",{"_index":508,"title":{},"body":{"license.html":{}}}],["dealings",{"_index":559,"title":{},"body":{"license.html":{}}}],["declarations",{"_index":23,"title":{},"body":{"components/ShowdownComponent.html":{},"modules/ShowdownModule.html":{},"pipes/ShowdownPipe.html":{},"directives/SourceDirective.html":{},"overview.html":{}}}],["default",{"_index":436,"title":{},"body":{"index.html":{}}}],["define",{"_index":211,"title":{},"body":{"components/ShowdownComponent.html":{}}}],["defined",{"_index":77,"title":{},"body":{"components/ShowdownComponent.html":{},"injectables/ShowdownConverter.html":{},"modules/ShowdownModule.html":{},"pipes/ShowdownPipe.html":{},"directives/SourceDirective.html":{}}}],["definition",{"_index":172,"title":{},"body":{"components/ShowdownComponent.html":{}}}],["demo",{"_index":370,"title":{},"body":{"index.html":{}}}],["dependencies",{"_index":259,"title":{"dependencies.html":{}},"body":{"modules/ShowdownModule.html":{},"dependencies.html":{},"index.html":{},"overview.html":{}}}],["description",{"_index":9,"title":{},"body":{"components/ShowdownComponent.html":{},"injectables/ShowdownConverter.html":{},"modules/ShowdownModule.html":{},"pipes/ShowdownPipe.html":{},"directives/SourceDirective.html":{}}}],["development",{"_index":479,"title":{},"body":{"index.html":{}}}],["devkit/build",{"_index":392,"title":{},"body":{"index.html":{}}}],["devusage",{"_index":379,"title":{},"body":{"index.html":{}}}],["direct",{"_index":212,"title":{},"body":{"components/ShowdownComponent.html":{}}}],["directive",{"_index":48,"title":{"directives/SourceDirective.html":{}},"body":{"components/ShowdownComponent.html":{},"directives/SourceDirective.html":{},"coverage.html":{},"index.html":{},"overview.html":{}}}],["directives",{"_index":223,"title":{},"body":{"components/ShowdownComponent.html":{},"directives/SourceDirective.html":{}}}],["disableforced4spacesindentedsublists",{"_index":145,"title":{},"body":{"components/ShowdownComponent.html":{}}}],["distribute",{"_index":517,"title":{},"body":{"license.html":{}}}],["documentation",{"_index":344,"title":{},"body":{"coverage.html":{},"index.html":{},"license.html":{}}}],["dom",{"_index":5,"title":{},"body":{"components/ShowdownComponent.html":{}}}],["domsanitizer",{"_index":74,"title":{},"body":{"components/ShowdownComponent.html":{},"index.html":{}}}],["domsanitizer`](https://angular.io/api/platform",{"_index":186,"title":{},"body":{"components/ShowdownComponent.html":{}}}],["dynamic",{"_index":141,"title":{},"body":{"components/ShowdownComponent.html":{}}}],["element",{"_index":50,"title":{},"body":{"components/ShowdownComponent.html":{},"index.html":{}}}],["elementref",{"_index":72,"title":{},"body":{"components/ShowdownComponent.html":{}}}],["eliav",{"_index":493,"title":{},"body":{"index.html":{},"license.html":{}}}],["emoji",{"_index":146,"title":{},"body":{"components/ShowdownComponent.html":{},"index.html":{}}}],["enables",{"_index":93,"title":{},"body":{"components/ShowdownComponent.html":{}}}],["encodeemails",{"_index":147,"title":{},"body":{"components/ShowdownComponent.html":{}}}],["equivalent",{"_index":112,"title":{},"body":{"components/ShowdownComponent.html":{}}}],["error",{"_index":318,"title":{},"body":{"directives/SourceDirective.html":{},"index.html":{}}}],["es6",{"_index":474,"title":{},"body":{"index.html":{}}}],["escape",{"_index":461,"title":{},"body":{"index.html":{}}}],["etc",{"_index":464,"title":{},"body":{"index.html":{}}}],["event",{"_index":444,"title":{},"body":{"index.html":{},"license.html":{}}}],["event.message)\">**loading",{"_index":329,"title":{},"body":{"directives/SourceDirective.html":{}}}],["eventemitter",{"_index":327,"title":{},"body":{"directives/SourceDirective.html":{}}}],["events",{"_index":319,"title":{},"body":{"directives/SourceDirective.html":{}}}],["example",{"_index":14,"title":{},"body":{"components/ShowdownComponent.html":{},"injectables/ShowdownConverter.html":{},"modules/ShowdownModule.html":{},"pipes/ShowdownPipe.html":{},"directives/SourceDirective.html":{}}}],["existing",{"_index":446,"title":{},"body":{"index.html":{}}}],["explanations",{"_index":382,"title":{},"body":{"index.html":{}}}],["export",{"_index":24,"title":{},"body":{"components/ShowdownComponent.html":{},"injectables/ShowdownConverter.html":{},"modules/ShowdownModule.html":{},"pipes/ShowdownPipe.html":{},"directives/SourceDirective.html":{},"index.html":{}}}],["exportas",{"_index":62,"title":{},"body":{"components/ShowdownComponent.html":{},"directives/SourceDirective.html":{}}}],["exports",{"_index":261,"title":{},"body":{"modules/ShowdownModule.html":{},"overview.html":{}}}],["express",{"_index":537,"title":{},"body":{"license.html":{}}}],["extends",{"_index":56,"title":{},"body":{"components/ShowdownComponent.html":{},"injectables/ShowdownConverter.html":{},"pipes/ShowdownPipe.html":{}}}],["extension",{"_index":439,"title":{},"body":{"index.html":{}}}],["extensions",{"_index":248,"title":{},"body":{"injectables/ShowdownConverter.html":{},"modules/ShowdownModule.html":{},"index.html":{}}}],["false",{"_index":136,"title":{},"body":{"components/ShowdownComponent.html":{},"pipes/ShowdownPipe.html":{},"index.html":{}}}],["file",{"_index":7,"title":{},"body":{"components/ShowdownComponent.html":{},"injectables/ShowdownConverter.html":{},"modules/ShowdownModule.html":{},"pipes/ShowdownPipe.html":{},"directives/SourceDirective.html":{},"coverage.html":{},"index.html":{}}}],["files",{"_index":507,"title":{},"body":{"license.html":{}}}],["filter(text",{"_index":418,"title":{},"body":{"index.html":{}}}],["fitness",{"_index":542,"title":{},"body":{"license.html":{}}}],["fix",{"_index":90,"title":{},"body":{"components/ShowdownComponent.html":{},"index.html":{}}}],["flavor",{"_index":280,"title":{},"body":{"modules/ShowdownModule.html":{},"index.html":{}}}],["flavors",{"_index":433,"title":{},"body":{"index.html":{}}}],["following",{"_index":526,"title":{},"body":{"license.html":{}}}],["foo",{"_index":278,"title":{},"body":{"modules/ShowdownModule.html":{}}}],["forroot",{"_index":273,"title":{},"body":{"modules/ShowdownModule.html":{}}}],["forroot(config",{"_index":274,"title":{},"body":{"modules/ShowdownModule.html":{}}}],["free",{"_index":500,"title":{},"body":{"license.html":{}}}],["full",{"_index":384,"title":{},"body":{"index.html":{}}}],["furnished",{"_index":524,"title":{},"body":{"license.html":{}}}],["g",{"_index":451,"title":{},"body":{"index.html":{}}}],["get(this.src",{"_index":338,"title":{},"body":{"directives/SourceDirective.html":{}}}],["getting",{"_index":366,"title":{"index.html":{},"license.html":{}},"body":{}}],["ghcodeblocks",{"_index":148,"title":{},"body":{"components/ShowdownComponent.html":{}}}],["ghcompatibleheaderid",{"_index":149,"title":{},"body":{"components/ShowdownComponent.html":{}}}],["ghmentions",{"_index":150,"title":{},"body":{"components/ShowdownComponent.html":{}}}],["ghmentionslink",{"_index":151,"title":{},"body":{"components/ShowdownComponent.html":{}}}],["github",{"_index":281,"title":{},"body":{"modules/ShowdownModule.html":{},"index.html":{}}}],["granted",{"_index":499,"title":{},"body":{"license.html":{}}}],["green",{"_index":421,"title":{},"body":{"index.html":{}}}],["h1",{"_index":395,"title":{},"body":{"index.html":{}}}],["h2",{"_index":396,"title":{},"body":{"index.html":{}}}],["hasownproperty",{"_index":245,"title":{},"body":{"injectables/ShowdownConverter.html":{}}}],["hasownproperty.call(options",{"_index":254,"title":{},"body":{"injectables/ShowdownConverter.html":{}}}],["header",{"_index":36,"title":{},"body":{"components/ShowdownComponent.html":{},"index.html":{}}}],["headerlevelstart",{"_index":87,"title":{},"body":{"components/ShowdownComponent.html":{}}}],["hereby",{"_index":498,"title":{},"body":{"license.html":{}}}],["highlight",{"_index":427,"title":{},"body":{"index.html":{}}}],["highlight.js/styles/default.css",{"_index":428,"title":{},"body":{"index.html":{}}}],["highlightextension",{"_index":426,"title":{},"body":{"index.html":{}}}],["holders",{"_index":547,"title":{},"body":{"license.html":{}}}],["html",{"_index":13,"title":{},"body":{"components/ShowdownComponent.html":{},"injectables/ShowdownConverter.html":{},"pipes/ShowdownPipe.html":{},"directives/SourceDirective.html":{},"index.html":{}}}],["html}\\n",{"_index":240,"title":{},"body":{"injectables/ShowdownConverter.html":{}}}],["http",{"_index":308,"title":{},"body":{"directives/SourceDirective.html":{}}}],["httpclient",{"_index":323,"title":{},"body":{"directives/SourceDirective.html":{},"index.html":{}}}],["httpclientmodule",{"_index":310,"title":{},"body":{"directives/SourceDirective.html":{}}}],["httperrorresponse",{"_index":333,"title":{},"body":{"directives/SourceDirective.html":{}}}],["https://unpkg.com/ngx",{"_index":315,"title":{},"body":{"directives/SourceDirective.html":{}}}],["identifier",{"_index":345,"title":{},"body":{"coverage.html":{}}}],["implements",{"_index":58,"title":{},"body":{"components/ShowdownComponent.html":{},"pipes/ShowdownPipe.html":{},"directives/SourceDirective.html":{}}}],["implied",{"_index":538,"title":{},"body":{"license.html":{}}}],["import",{"_index":18,"title":{},"body":{"components/ShowdownComponent.html":{},"injectables/ShowdownConverter.html":{},"modules/ShowdownModule.html":{},"pipes/ShowdownPipe.html":{},"directives/SourceDirective.html":{},"index.html":{}}}],["imports",{"_index":272,"title":{},"body":{"modules/ShowdownModule.html":{},"directives/SourceDirective.html":{},"index.html":{}}}],["included",{"_index":531,"title":{},"body":{"license.html":{}}}],["including",{"_index":511,"title":{},"body":{"license.html":{}}}],["indentation",{"_index":89,"title":{},"body":{"components/ShowdownComponent.html":{},"index.html":{}}}],["index",{"_index":64,"title":{"index.html":{}},"body":{"components/ShowdownComponent.html":{},"injectables/ShowdownConverter.html":{},"directives/SourceDirective.html":{}}}],["info",{"_index":3,"title":{},"body":{"components/ShowdownComponent.html":{},"injectables/ShowdownConverter.html":{},"modules/ShowdownModule.html":{},"pipes/ShowdownPipe.html":{},"directives/SourceDirective.html":{}}}],["information",{"_index":381,"title":{},"body":{"index.html":{}}}],["init",{"_index":195,"title":{},"body":{"components/ShowdownComponent.html":{},"index.html":{}}}],["init/changes",{"_index":335,"title":{},"body":{"directives/SourceDirective.html":{}}}],["injectable",{"_index":229,"title":{"injectables/ShowdownConverter.html":{}},"body":{"injectables/ShowdownConverter.html":{},"coverage.html":{},"index.html":{},"overview.html":{}}}],["injectables",{"_index":230,"title":{},"body":{"injectables/ShowdownConverter.html":{}}}],["injected",{"_index":413,"title":{},"body":{"index.html":{}}}],["input",{"_index":105,"title":{},"body":{"components/ShowdownComponent.html":{},"directives/SourceDirective.html":{},"index.html":{}}}],["inputs",{"_index":67,"title":{},"body":{"components/ShowdownComponent.html":{},"directives/SourceDirective.html":{}}}],["install",{"_index":375,"title":{},"body":{"index.html":{}}}],["installrun",{"_index":484,"title":{},"body":{"index.html":{}}}],["instance",{"_index":234,"title":{},"body":{"injectables/ShowdownConverter.html":{}}}],["instances",{"_index":287,"title":{},"body":{"modules/ShowdownModule.html":{}}}],["integration",{"_index":369,"title":{},"body":{"index.html":{}}}],["interface",{"_index":174,"title":{},"body":{"components/ShowdownComponent.html":{}}}],["internal",{"_index":133,"title":{},"body":{"components/ShowdownComponent.html":{},"injectables/ShowdownConverter.html":{},"modules/ShowdownModule.html":{},"directives/SourceDirective.html":{}}}],["interpolation",{"_index":455,"title":{},"body":{"index.html":{}}}],["key",{"_index":214,"title":{},"body":{"components/ShowdownComponent.html":{},"injectables/ShowdownConverter.html":{}}}],["keys",{"_index":140,"title":{},"body":{"components/ShowdownComponent.html":{}}}],["kind",{"_index":536,"title":{},"body":{"license.html":{}}}],["lang",{"_index":441,"title":{},"body":{"index.html":{}}}],["legend",{"_index":220,"title":{},"body":{"components/ShowdownComponent.html":{},"modules/ShowdownModule.html":{},"overview.html":{}}}],["liability",{"_index":551,"title":{},"body":{"license.html":{}}}],["liable",{"_index":548,"title":{},"body":{"license.html":{}}}],["library",{"_index":489,"title":{},"body":{"index.html":{}}}],["license",{"_index":490,"title":{"license.html":{}},"body":{"index.html":{},"license.html":{}}}],["licensed",{"_index":494,"title":{},"body":{"index.html":{}}}],["lifecycle",{"_index":193,"title":{},"body":{"components/ShowdownComponent.html":{},"directives/SourceDirective.html":{}}}],["limitation",{"_index":512,"title":{},"body":{"license.html":{}}}],["limited",{"_index":539,"title":{},"body":{"license.html":{}}}],["link",{"_index":108,"title":{},"body":{"components/ShowdownComponent.html":{},"directives/SourceDirective.html":{}}}],["list",{"_index":52,"title":{},"body":{"components/ShowdownComponent.html":{}}}],["listen",{"_index":442,"title":{},"body":{"index.html":{}}}],["listeners",{"_index":283,"title":{},"body":{"modules/ShowdownModule.html":{}}}],["listening",{"_index":317,"title":{},"body":{"directives/SourceDirective.html":{}}}],["literalmidwordasterisks",{"_index":152,"title":{},"body":{"components/ShowdownComponent.html":{}}}],["literalmidwordunderscores",{"_index":153,"title":{},"body":{"components/ShowdownComponent.html":{}}}],["live",{"_index":371,"title":{},"body":{"index.html":{}}}],["load",{"_index":197,"title":{},"body":{"components/ShowdownComponent.html":{},"directives/SourceDirective.html":{},"index.html":{}}}],["load(url",{"_index":330,"title":{},"body":{"directives/SourceDirective.html":{}}}],["loading",{"_index":314,"title":{},"body":{"directives/SourceDirective.html":{},"index.html":{}}}],["loads",{"_index":406,"title":{},"body":{"index.html":{}}}],["made",{"_index":440,"title":{},"body":{"index.html":{}}}],["make",{"_index":307,"title":{},"body":{"directives/SourceDirective.html":{},"index.html":{}}}],["manually",{"_index":425,"title":{},"body":{"index.html":{}}}],["map_option",{"_index":135,"title":{},"body":{"components/ShowdownComponent.html":{}}}],["map_option.hasownproperty(value",{"_index":138,"title":{},"body":{"components/ShowdownComponent.html":{}}}],["map_option[value",{"_index":139,"title":{},"body":{"components/ShowdownComponent.html":{}}}],["markdown",{"_index":12,"title":{},"body":{"components/ShowdownComponent.html":{},"injectables/ShowdownConverter.html":{},"pipes/ShowdownPipe.html":{},"directives/SourceDirective.html":{},"index.html":{}}}],["markdown)\\nhtml",{"_index":239,"title":{},"body":{"injectables/ShowdownConverter.html":{}}}],["matching",{"_index":227,"title":{},"body":{"components/ShowdownComponent.html":{},"injectables/ShowdownConverter.html":{},"modules/ShowdownModule.html":{},"pipes/ShowdownPipe.html":{},"directives/SourceDirective.html":{},"coverage.html":{},"dependencies.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{}}}],["md",{"_index":399,"title":{},"body":{"index.html":{}}}],["merchantability",{"_index":541,"title":{},"body":{"license.html":{}}}],["merge",{"_index":515,"title":{},"body":{"license.html":{}}}],["metadata",{"_index":61,"title":{},"body":{"components/ShowdownComponent.html":{},"pipes/ShowdownPipe.html":{},"directives/SourceDirective.html":{}}}],["method",{"_index":194,"title":{},"body":{"components/ShowdownComponent.html":{},"directives/SourceDirective.html":{}}}],["methods",{"_index":65,"title":{},"body":{"components/ShowdownComponent.html":{},"injectables/ShowdownConverter.html":{},"modules/ShowdownModule.html":{},"pipes/ShowdownPipe.html":{},"directives/SourceDirective.html":{},"index.html":{}}}],["mit",{"_index":496,"title":{},"body":{"index.html":{},"license.html":{}}}],["mixing",{"_index":402,"title":{},"body":{"index.html":{}}}],["modify",{"_index":514,"title":{},"body":{"license.html":{}}}],["module",{"_index":256,"title":{"modules/ShowdownModule.html":{}},"body":{"modules/ShowdownModule.html":{},"overview.html":{}}}],["modules",{"_index":258,"title":{"modules.html":{}},"body":{"modules/ShowdownModule.html":{},"modules.html":{}}}],["modulewithproviders",{"_index":288,"title":{},"body":{"modules/ShowdownModule.html":{}}}],["more",{"_index":380,"title":{},"body":{"index.html":{}}}],["name",{"_index":80,"title":{},"body":{"components/ShowdownComponent.html":{},"injectables/ShowdownConverter.html":{},"modules/ShowdownModule.html":{},"pipes/ShowdownPipe.html":{},"directives/SourceDirective.html":{}}}],["new",{"_index":334,"title":{},"body":{"directives/SourceDirective.html":{},"coverage.html":{},"index.html":{}}}],["ngmodel",{"_index":415,"title":{},"body":{"index.html":{}}}],["ngmodule",{"_index":19,"title":{},"body":{"components/ShowdownComponent.html":{},"injectables/ShowdownConverter.html":{},"modules/ShowdownModule.html":{},"pipes/ShowdownPipe.html":{},"directives/SourceDirective.html":{},"index.html":{}}}],["ngonchanges",{"_index":204,"title":{},"body":{"components/ShowdownComponent.html":{},"directives/SourceDirective.html":{}}}],["ngoninit",{"_index":198,"title":{},"body":{"components/ShowdownComponent.html":{}}}],["ngpreservewhitespaces",{"_index":469,"title":{},"body":{"index.html":{}}}],["ngx",{"_index":21,"title":{},"body":{"components/ShowdownComponent.html":{},"injectables/ShowdownConverter.html":{},"modules/ShowdownModule.html":{},"pipes/ShowdownPipe.html":{},"directives/SourceDirective.html":{},"index.html":{}}}],["noheaderid",{"_index":154,"title":{},"body":{"components/ShowdownComponent.html":{},"index.html":{}}}],["noninfringement",{"_index":545,"title":{},"body":{"license.html":{}}}],["note",{"_index":435,"title":{},"body":{"index.html":{}}}],["notice",{"_index":529,"title":{},"body":{"license.html":{}}}],["npm",{"_index":376,"title":{},"body":{"index.html":{}}}],["object",{"_index":30,"title":{},"body":{"components/ShowdownComponent.html":{},"injectables/ShowdownConverter.html":{},"index.html":{}}}],["object.defineproperty(showdowncomponent.prototype",{"_index":215,"title":{},"body":{"components/ShowdownComponent.html":{}}}],["obtaining",{"_index":503,"title":{},"body":{"license.html":{}}}],["occur",{"_index":328,"title":{},"body":{"directives/SourceDirective.html":{}}}],["omitextrawlincodeblocks",{"_index":155,"title":{},"body":{"components/ShowdownComponent.html":{}}}],["onchanges",{"_index":60,"title":{},"body":{"components/ShowdownComponent.html":{},"directives/SourceDirective.html":{}}}],["oninit",{"_index":59,"title":{},"body":{"components/ShowdownComponent.html":{}}}],["openlinksinnewwindow",{"_index":156,"title":{},"body":{"components/ShowdownComponent.html":{}}}],["option",{"_index":42,"title":{},"body":{"components/ShowdownComponent.html":{},"index.html":{}}}],["optional",{"_index":82,"title":{},"body":{"components/ShowdownComponent.html":{},"injectables/ShowdownConverter.html":{},"modules/ShowdownModule.html":{},"pipes/ShowdownPipe.html":{},"directives/SourceDirective.html":{}}}],["options",{"_index":29,"title":{},"body":{"components/ShowdownComponent.html":{},"injectables/ShowdownConverter.html":{},"pipes/ShowdownPipe.html":{},"index.html":{}}}],["options(options",{"_index":182,"title":{},"body":{"components/ShowdownComponent.html":{}}}],["options[key",{"_index":255,"title":{},"body":{"injectables/ShowdownConverter.html":{}}}],["options_properties_keys",{"_index":142,"title":{},"body":{"components/ShowdownComponent.html":{}}}],["original",{"_index":422,"title":{},"body":{"index.html":{}}}],["otherwise",{"_index":556,"title":{},"body":{"license.html":{}}}],["out",{"_index":268,"title":{},"body":{"modules/ShowdownModule.html":{},"license.html":{},"overview.html":{}}}],["output",{"_index":94,"title":{},"body":{"components/ShowdownComponent.html":{},"directives/SourceDirective.html":{},"index.html":{}}}],["outputs",{"_index":320,"title":{},"body":{"directives/SourceDirective.html":{}}}],["override",{"_index":119,"title":{},"body":{"components/ShowdownComponent.html":{},"directives/SourceDirective.html":{},"index.html":{}}}],["overview",{"_index":563,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["package",{"_index":357,"title":{"dependencies.html":{}},"body":{"index.html":{}}}],["padding",{"_index":99,"title":{},"body":{"components/ShowdownComponent.html":{}}}],["param",{"_index":206,"title":{},"body":{"components/ShowdownComponent.html":{},"injectables/ShowdownConverter.html":{},"modules/ShowdownModule.html":{},"pipes/ShowdownPipe.html":{},"directives/SourceDirective.html":{}}}],["parameters",{"_index":79,"title":{},"body":{"components/ShowdownComponent.html":{},"injectables/ShowdownConverter.html":{},"modules/ShowdownModule.html":{},"pipes/ShowdownPipe.html":{},"directives/SourceDirective.html":{}}}],["parse",{"_index":443,"title":{},"body":{"index.html":{}}}],["parseimgdimensions",{"_index":157,"title":{},"body":{"components/ShowdownComponent.html":{}}}],["particular",{"_index":543,"title":{},"body":{"license.html":{}}}],["peer",{"_index":360,"title":{},"body":{"dependencies.html":{},"index.html":{}}}],["permission",{"_index":497,"title":{},"body":{"license.html":{}}}],["permit",{"_index":522,"title":{},"body":{"license.html":{}}}],["person",{"_index":502,"title":{},"body":{"license.html":{}}}],["persons",{"_index":523,"title":{},"body":{"license.html":{}}}],["pipe",{"_index":295,"title":{"pipes/ShowdownPipe.html":{}},"body":{"pipes/ShowdownPipe.html":{},"coverage.html":{},"index.html":{},"overview.html":{}}}],["pipes",{"_index":296,"title":{},"body":{"pipes/ShowdownPipe.html":{}}}],["pipetransform",{"_index":303,"title":{},"body":{"pipes/ShowdownPipe.html":{}}}],["play",{"_index":372,"title":{},"body":{"index.html":{}}}],["plunker",{"_index":374,"title":{},"body":{"index.html":{}}}],["portions",{"_index":533,"title":{},"body":{"license.html":{}}}],["prefixheaderid",{"_index":158,"title":{},"body":{"components/ShowdownComponent.html":{}}}],["preserve",{"_index":470,"title":{},"body":{"index.html":{}}}],["preview",{"_index":106,"title":{},"body":{"components/ShowdownComponent.html":{}}}],["private",{"_index":184,"title":{},"body":{"components/ShowdownComponent.html":{},"directives/SourceDirective.html":{}}}],["problems",{"_index":473,"title":{},"body":{"index.html":{}}}],["project",{"_index":480,"title":{},"body":{"index.html":{}}}],["properties",{"_index":43,"title":{},"body":{"components/ShowdownComponent.html":{},"index.html":{}}}],["property",{"_index":114,"title":{},"body":{"components/ShowdownComponent.html":{},"index.html":{}}}],["provide",{"_index":293,"title":{},"body":{"modules/ShowdownModule.html":{},"index.html":{}}}],["provided",{"_index":534,"title":{},"body":{"license.html":{}}}],["provider",{"_index":385,"title":{},"body":{"index.html":{}}}],["providers",{"_index":233,"title":{},"body":{"injectables/ShowdownConverter.html":{},"modules/ShowdownModule.html":{},"index.html":{},"overview.html":{}}}],["public",{"_index":66,"title":{},"body":{"components/ShowdownComponent.html":{},"injectables/ShowdownConverter.html":{},"directives/SourceDirective.html":{}}}],["publish",{"_index":516,"title":{},"body":{"license.html":{}}}],["pull",{"_index":476,"title":{},"body":{"index.html":{}}}],["pure",{"_index":304,"title":{},"body":{"pipes/ShowdownPipe.html":{}}}],["purpose",{"_index":544,"title":{},"body":{"license.html":{}}}],["rawheaderid",{"_index":159,"title":{},"body":{"components/ShowdownComponent.html":{}}}],["rawprefixheaderid",{"_index":160,"title":{},"body":{"components/ShowdownComponent.html":{}}}],["red",{"_index":424,"title":{},"body":{"index.html":{}}}],["reference",{"_index":54,"title":{},"body":{"components/ShowdownComponent.html":{},"directives/SourceDirective.html":{}}}],["regex",{"_index":449,"title":{},"body":{"index.html":{}}}],["regexp('markdown",{"_index":450,"title":{},"body":{"index.html":{}}}],["release",{"_index":487,"title":{},"body":{"index.html":{}}}],["remove",{"_index":468,"title":{},"body":{"index.html":{}}}],["render",{"_index":11,"title":{},"body":{"components/ShowdownComponent.html":{},"index.html":{}}}],["render(value",{"_index":115,"title":{},"body":{"components/ShowdownComponent.html":{}}}],["replace",{"_index":452,"title":{},"body":{"index.html":{}}}],["request",{"_index":309,"title":{},"body":{"directives/SourceDirective.html":{}}}],["requests",{"_index":477,"title":{},"body":{"index.html":{}}}],["requires",{"_index":401,"title":{},"body":{"index.html":{}}}],["requirespacebeforeheadingtext",{"_index":161,"title":{},"body":{"components/ShowdownComponent.html":{}}}],["reset",{"_index":267,"title":{},"body":{"modules/ShowdownModule.html":{},"overview.html":{}}}],["responsetype",{"_index":339,"title":{},"body":{"directives/SourceDirective.html":{}}}],["restriction",{"_index":510,"title":{},"body":{"license.html":{}}}],["result",{"_index":118,"title":{},"body":{"components/ShowdownComponent.html":{},"injectables/ShowdownConverter.html":{},"modules/ShowdownModule.html":{},"pipes/ShowdownPipe.html":{},"directives/SourceDirective.html":{},"coverage.html":{},"dependencies.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{}}}],["results",{"_index":228,"title":{},"body":{"components/ShowdownComponent.html":{},"injectables/ShowdownConverter.html":{},"modules/ShowdownModule.html":{},"pipes/ShowdownPipe.html":{},"directives/SourceDirective.html":{},"coverage.html":{},"dependencies.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{}}}],["return",{"_index":180,"title":{},"body":{"components/ShowdownComponent.html":{},"modules/ShowdownModule.html":{},"pipes/ShowdownPipe.html":{},"index.html":{}}}],["returns",{"_index":122,"title":{},"body":{"components/ShowdownComponent.html":{},"injectables/ShowdownConverter.html":{},"modules/ShowdownModule.html":{},"pipes/ShowdownPipe.html":{},"directives/SourceDirective.html":{}}}],["rights",{"_index":513,"title":{},"body":{"license.html":{}}}],["root",{"_index":286,"title":{},"body":{"modules/ShowdownModule.html":{},"index.html":{}}}],["sanitize",{"_index":68,"title":{},"body":{"components/ShowdownComponent.html":{},"index.html":{}}}],["sanitize(sanitize",{"_index":188,"title":{},"body":{"components/ShowdownComponent.html":{}}}],["save",{"_index":378,"title":{},"body":{"index.html":{}}}],["saveand",{"_index":377,"title":{},"body":{"index.html":{}}}],["search",{"_index":445,"title":{},"body":{"index.html":{}}}],["securitycontext",{"_index":128,"title":{},"body":{"components/ShowdownComponent.html":{}}}],["see",{"_index":383,"title":{},"body":{"index.html":{}}}],["selector",{"_index":31,"title":{},"body":{"components/ShowdownComponent.html":{},"pipes/ShowdownPipe.html":{},"directives/SourceDirective.html":{},"index.html":{}}}],["sell",{"_index":520,"title":{},"body":{"license.html":{}}}],["service",{"_index":411,"title":{},"body":{"index.html":{}}}],["set",{"_index":45,"title":{},"body":{"components/ShowdownComponent.html":{},"injectables/ShowdownConverter.html":{},"directives/SourceDirective.html":{},"index.html":{}}}],["set(value",{"_index":216,"title":{},"body":{"components/ShowdownComponent.html":{}}}],["setoptions",{"_index":241,"title":{},"body":{"injectables/ShowdownConverter.html":{}}}],["setoptions(options",{"_index":125,"title":{},"body":{"components/ShowdownComponent.html":{},"injectables/ShowdownConverter.html":{}}}],["setsanitize(sanitize",{"_index":127,"title":{},"body":{"components/ShowdownComponent.html":{}}}],["setshowdown(value",{"_index":124,"title":{},"body":{"components/ShowdownComponent.html":{}}}],["setter",{"_index":171,"title":{},"body":{"components/ShowdownComponent.html":{}}}],["setup",{"_index":15,"title":{},"body":{"components/ShowdownComponent.html":{},"injectables/ShowdownConverter.html":{},"pipes/ShowdownPipe.html":{},"directives/SourceDirective.html":{},"index.html":{}}}],["shall",{"_index":530,"title":{},"body":{"license.html":{}}}],["showdown",{"_index":22,"title":{},"body":{"components/ShowdownComponent.html":{},"injectables/ShowdownConverter.html":{},"modules/ShowdownModule.html":{},"pipes/ShowdownPipe.html":{},"directives/SourceDirective.html":{},"dependencies.html":{},"index.html":{}}}],["showdown(value",{"_index":178,"title":{},"body":{"components/ShowdownComponent.html":{}}}],["showdown,[showdown",{"_index":63,"title":{},"body":{"components/ShowdownComponent.html":{}}}],["showdown.component",{"_index":289,"title":{},"body":{"modules/ShowdownModule.html":{},"directives/SourceDirective.html":{}}}],["showdown.converter",{"_index":246,"title":{},"body":{"injectables/ShowdownConverter.html":{}}}],["showdown.converteroptions",{"_index":275,"title":{},"body":{"modules/ShowdownModule.html":{}}}],["showdown.filterextension",{"_index":417,"title":{},"body":{"index.html":{}}}],["showdown.pipe",{"_index":291,"title":{},"body":{"modules/ShowdownModule.html":{}}}],["showdown.showdownextension",{"_index":448,"title":{},"body":{"index.html":{}}}],["showdown.showdownoptions",{"_index":38,"title":{},"body":{"components/ShowdownComponent.html":{},"injectables/ShowdownConverter.html":{},"pipes/ShowdownPipe.html":{},"index.html":{}}}],["showdown/readme.md",{"_index":316,"title":{},"body":{"directives/SourceDirective.html":{}}}],["showdown:**howdown**load",{"_index":398,"title":{},"body":{"index.html":{}}}],["showdown:options",{"_index":410,"title":{},"body":{"index.html":{}}}],["showdown[src],[showdown][src",{"_index":225,"title":{},"body":{"components/ShowdownComponent.html":{},"directives/SourceDirective.html":{}}}],["showdowncomponent",{"_index":1,"title":{"components/ShowdownComponent.html":{}},"body":{"components/ShowdownComponent.html":{},"modules/ShowdownModule.html":{},"directives/SourceDirective.html":{},"coverage.html":{},"index.html":{}}}],["showdowncomponent#value",{"_index":121,"title":{},"body":{"components/ShowdownComponent.html":{},"directives/SourceDirective.html":{}}}],["showdowncomponent.addextension(highlightextension",{"_index":430,"title":{},"body":{"index.html":{}}}],["showdowncomponent.setflavor('ghost",{"_index":431,"title":{},"body":{"index.html":{}}}],["showdowncomponent.setoptions({emoji",{"_index":432,"title":{},"body":{"index.html":{}}}],["showdownconfig",{"_index":76,"title":{},"body":{"components/ShowdownComponent.html":{},"injectables/ShowdownConverter.html":{},"modules/ShowdownModule.html":{},"index.html":{}}}],["showdownconverter",{"_index":57,"title":{"injectables/ShowdownConverter.html":{}},"body":{"components/ShowdownComponent.html":{},"injectables/ShowdownConverter.html":{},"modules/ShowdownModule.html":{},"pipes/ShowdownPipe.html":{},"coverage.html":{},"index.html":{},"overview.html":{}}}],["showdownconverter.makehtml(markdown",{"_index":237,"title":{},"body":{"injectables/ShowdownConverter.html":{}}}],["showdownmodule",{"_index":257,"title":{"modules/ShowdownModule.html":{}},"body":{"modules/ShowdownModule.html":{},"index.html":{},"modules.html":{},"overview.html":{}}}],["showdownmodule.forroot",{"_index":277,"title":{},"body":{"modules/ShowdownModule.html":{},"index.html":{}}}],["showdownmodule.forroot({emoji",{"_index":386,"title":{},"body":{"index.html":{}}}],["showdownmodule.forroot({extensions",{"_index":453,"title":{},"body":{"index.html":{}}}],["showdownmodule.forroot({flavor",{"_index":434,"title":{},"body":{"index.html":{}}}],["showdownmodule.forroot({underline",{"_index":438,"title":{},"body":{"index.html":{}}}],["showdownpipe",{"_index":290,"title":{"pipes/ShowdownPipe.html":{}},"body":{"modules/ShowdownModule.html":{},"pipes/ShowdownPipe.html":{},"coverage.html":{},"index.html":{}}}],["simplelinebreaks",{"_index":162,"title":{},"body":{"components/ShowdownComponent.html":{}}}],["simplifiedautolink",{"_index":163,"title":{},"body":{"components/ShowdownComponent.html":{}}}],["single",{"_index":41,"title":{},"body":{"components/ShowdownComponent.html":{},"index.html":{}}}],["smartindentationfix",{"_index":39,"title":{},"body":{"components/ShowdownComponent.html":{},"modules/ShowdownModule.html":{},"index.html":{}}}],["smoothlivepreview",{"_index":164,"title":{},"body":{"components/ShowdownComponent.html":{}}}],["software",{"_index":505,"title":{},"body":{"license.html":{}}}],["solid",{"_index":103,"title":{},"body":{"components/ShowdownComponent.html":{}}}],["solution",{"_index":460,"title":{},"body":{"index.html":{}}}],["somecomponent",{"_index":33,"title":{},"body":{"components/ShowdownComponent.html":{},"pipes/ShowdownPipe.html":{},"directives/SourceDirective.html":{},"index.html":{}}}],["someextension",{"_index":447,"title":{},"body":{"index.html":{}}}],["someservice",{"_index":235,"title":{},"body":{"injectables/ShowdownConverter.html":{},"index.html":{}}}],["source",{"_index":4,"title":{},"body":{"components/ShowdownComponent.html":{},"injectables/ShowdownConverter.html":{},"modules/ShowdownModule.html":{},"pipes/ShowdownPipe.html":{},"directives/SourceDirective.html":{},"index.html":{}}}],["source.directive",{"_index":292,"title":{},"body":{"modules/ShowdownModule.html":{}}}],["sourcedirective",{"_index":224,"title":{"directives/SourceDirective.html":{}},"body":{"components/ShowdownComponent.html":{},"modules/ShowdownModule.html":{},"directives/SourceDirective.html":{},"coverage.html":{},"index.html":{}}}],["sourcedirective#src",{"_index":332,"title":{},"body":{"directives/SourceDirective.html":{}}}],["sources",{"_index":403,"title":{},"body":{"index.html":{}}}],["splitadjacentblockquotes",{"_index":165,"title":{},"body":{"components/ShowdownComponent.html":{}}}],["src",{"_index":313,"title":{},"body":{"directives/SourceDirective.html":{},"index.html":{}}}],["src/showdown",{"_index":231,"title":{},"body":{"injectables/ShowdownConverter.html":{},"coverage.html":{}}}],["src/showdown.component.ts",{"_index":8,"title":{},"body":{"components/ShowdownComponent.html":{},"coverage.html":{}}}],["src/showdown.component.ts:158",{"_index":113,"title":{},"body":{"components/ShowdownComponent.html":{}}}],["src/showdown.component.ts:174",{"_index":110,"title":{},"body":{"components/ShowdownComponent.html":{}}}],["src/showdown.component.ts:203",{"_index":85,"title":{},"body":{"components/ShowdownComponent.html":{}}}],["src/showdown.component.ts:207",{"_index":126,"title":{},"body":{"components/ShowdownComponent.html":{}}}],["src/showdown.component.ts:243",{"_index":92,"title":{},"body":{"components/ShowdownComponent.html":{}}}],["src/showdown.component.ts:245",{"_index":78,"title":{},"body":{"components/ShowdownComponent.html":{}}}],["src/showdown.component.ts:280",{"_index":116,"title":{},"body":{"components/ShowdownComponent.html":{}}}],["src/showdown.module.ts",{"_index":269,"title":{},"body":{"modules/ShowdownModule.html":{}}}],["src/showdown.module.ts:59",{"_index":276,"title":{},"body":{"modules/ShowdownModule.html":{}}}],["src/showdown.pipe.ts",{"_index":297,"title":{},"body":{"pipes/ShowdownPipe.html":{},"coverage.html":{}}}],["src/showdown.pipe.ts:55",{"_index":302,"title":{},"body":{"pipes/ShowdownPipe.html":{}}}],["src/source.directive.ts",{"_index":306,"title":{},"body":{"directives/SourceDirective.html":{},"coverage.html":{}}}],["src/source.directive.ts:112",{"_index":331,"title":{},"body":{"directives/SourceDirective.html":{}}}],["src/source.directive.ts:75",{"_index":326,"title":{},"body":{"directives/SourceDirective.html":{}}}],["src/source.directive.ts:87",{"_index":324,"title":{},"body":{"directives/SourceDirective.html":{}}}],["stackblitz",{"_index":373,"title":{},"body":{"index.html":{}}}],["standalone",{"_index":16,"title":{},"body":{"components/ShowdownComponent.html":{},"injectables/ShowdownConverter.html":{},"pipes/ShowdownPipe.html":{},"directives/SourceDirective.html":{}}}],["started",{"_index":367,"title":{"index.html":{},"license.html":{}},"body":{}}],["statements",{"_index":346,"title":{},"body":{"coverage.html":{}}}],["static",{"_index":46,"title":{},"body":{"components/ShowdownComponent.html":{},"modules/ShowdownModule.html":{},"directives/SourceDirective.html":{}}}],["strikethrough",{"_index":166,"title":{},"body":{"components/ShowdownComponent.html":{}}}],["string",{"_index":35,"title":{},"body":{"components/ShowdownComponent.html":{},"injectables/ShowdownConverter.html":{},"pipes/ShowdownPipe.html":{},"directives/SourceDirective.html":{},"index.html":{}}}],["styles",{"_index":95,"title":{},"body":{"components/ShowdownComponent.html":{}}}],["subject",{"_index":525,"title":{},"body":{"license.html":{}}}],["sublicense",{"_index":518,"title":{},"body":{"license.html":{}}}],["subscribe((response",{"_index":340,"title":{},"body":{"directives/SourceDirective.html":{}}}],["substantial",{"_index":532,"title":{},"body":{"license.html":{}}}],["super(config",{"_index":192,"title":{},"body":{"components/ShowdownComponent.html":{},"injectables/ShowdownConverter.html":{}}}],["support",{"_index":560,"title":{},"body":{"modules.html":{}}}],["svg",{"_index":561,"title":{},"body":{"modules.html":{}}}],["table",{"_index":356,"title":{},"body":{"coverage.html":{}}}],["tables",{"_index":167,"title":{},"body":{"components/ShowdownComponent.html":{}}}],["tablesheaderid",{"_index":168,"title":{},"body":{"components/ShowdownComponent.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":355,"title":{},"body":{"coverage.html":{}}}],["tasklists",{"_index":169,"title":{},"body":{"components/ShowdownComponent.html":{}}}],["template",{"_index":32,"title":{},"body":{"components/ShowdownComponent.html":{},"pipes/ShowdownPipe.html":{},"directives/SourceDirective.html":{},"index.html":{}}}],["test",{"_index":485,"title":{},"body":{"index.html":{}}}],["testbuild",{"_index":486,"title":{},"body":{"index.html":{}}}],["text",{"_index":34,"title":{},"body":{"components/ShowdownComponent.html":{},"pipes/ShowdownPipe.html":{},"directives/SourceDirective.html":{},"index.html":{}}}],["text.replace('$color",{"_index":419,"title":{},"body":{"index.html":{}}}],["this._domsanitizer.sanitize(securitycontext.html",{"_index":209,"title":{},"body":{"components/ShowdownComponent.html":{}}}],["this._elementref.nativeelement.innerhtml",{"_index":210,"title":{},"body":{"components/ShowdownComponent.html":{}}}],["this._elementref.nativeelement.innerhtml.trim",{"_index":200,"title":{},"body":{"components/ShowdownComponent.html":{}}}],["this._sanitize",{"_index":189,"title":{},"body":{"components/ShowdownComponent.html":{}}}],["this._showdowncomponent.render(response",{"_index":341,"title":{},"body":{"directives/SourceDirective.html":{}}}],["this.error.emit(error",{"_index":342,"title":{},"body":{"directives/SourceDirective.html":{}}}],["this.getoptions",{"_index":181,"title":{},"body":{"components/ShowdownComponent.html":{}}}],["this.load",{"_index":336,"title":{},"body":{"directives/SourceDirective.html":{}}}],["this.makehtml(this.value",{"_index":208,"title":{},"body":{"components/ShowdownComponent.html":{}}}],["this.makehtml(value",{"_index":305,"title":{},"body":{"pipes/ShowdownPipe.html":{}}}],["this.render",{"_index":205,"title":{},"body":{"components/ShowdownComponent.html":{}}}],["this.render(this._elementref.nativeelement.innerhtml",{"_index":201,"title":{},"body":{"components/ShowdownComponent.html":{}}}],["this.setflavor((config",{"_index":250,"title":{},"body":{"injectables/ShowdownConverter.html":{}}}],["this.setoption(key",{"_index":217,"title":{},"body":{"components/ShowdownComponent.html":{},"injectables/ShowdownConverter.html":{}}}],["this.setoptions(config",{"_index":253,"title":{},"body":{"injectables/ShowdownConverter.html":{}}}],["this.setoptions(options",{"_index":183,"title":{},"body":{"components/ShowdownComponent.html":{},"pipes/ShowdownPipe.html":{}}}],["this.src",{"_index":337,"title":{},"body":{"directives/SourceDirective.html":{}}}],["this.value",{"_index":179,"title":{},"body":{"components/ShowdownComponent.html":{}}}],["tort",{"_index":555,"title":{},"body":{"license.html":{}}}],["transform",{"_index":298,"title":{},"body":{"pipes/ShowdownPipe.html":{},"index.html":{}}}],["transform(value",{"_index":301,"title":{},"body":{"pipes/ShowdownPipe.html":{}}}],["tree",{"_index":6,"title":{},"body":{"components/ShowdownComponent.html":{}}}],["troubleshoot",{"_index":454,"title":{},"body":{"index.html":{}}}],["true",{"_index":40,"title":{},"body":{"components/ShowdownComponent.html":{},"modules/ShowdownModule.html":{},"pipes/ShowdownPipe.html":{},"index.html":{}}}],["tslib",{"_index":358,"title":{},"body":{"dependencies.html":{}}}],["type",{"_index":81,"title":{},"body":{"components/ShowdownComponent.html":{},"injectables/ShowdownConverter.html":{},"modules/ShowdownModule.html":{},"pipes/ShowdownPipe.html":{},"directives/SourceDirective.html":{},"coverage.html":{},"index.html":{}}}],["type:'listener",{"_index":282,"title":{},"body":{"modules/ShowdownModule.html":{}}}],["typeof",{"_index":207,"title":{},"body":{"components/ShowdownComponent.html":{}}}],["types/showdown",{"_index":363,"title":{},"body":{"dependencies.html":{},"index.html":{}}}],["typescript",{"_index":175,"title":{},"body":{"components/ShowdownComponent.html":{},"injectables/ShowdownConverter.html":{},"modules/ShowdownModule.html":{},"pipes/ShowdownPipe.html":{},"directives/SourceDirective.html":{},"index.html":{}}}],["undefined",{"_index":199,"title":{},"body":{"components/ShowdownComponent.html":{}}}],["under",{"_index":495,"title":{},"body":{"index.html":{}}}],["underline",{"_index":170,"title":{},"body":{"components/ShowdownComponent.html":{},"pipes/ShowdownPipe.html":{},"index.html":{}}}],["underline__",{"_index":300,"title":{},"body":{"pipes/ShowdownPipe.html":{}}}],["unescaped",{"_index":457,"title":{},"body":{"index.html":{}}}],["url",{"_index":312,"title":{},"body":{"directives/SourceDirective.html":{},"index.html":{}}}],["url..**note",{"_index":400,"title":{},"body":{"index.html":{}}}],["use",{"_index":47,"title":{},"body":{"components/ShowdownComponent.html":{},"injectables/ShowdownConverter.html":{},"directives/SourceDirective.html":{},"index.html":{},"license.html":{}}}],["usevalue",{"_index":294,"title":{},"body":{"modules/ShowdownModule.html":{},"index.html":{}}}],["using",{"_index":456,"title":{},"body":{"index.html":{}}}],["value",{"_index":28,"title":{},"body":{"components/ShowdownComponent.html":{},"pipes/ShowdownPipe.html":{},"index.html":{}}}],["vanilla",{"_index":252,"title":{},"body":{"injectables/ShowdownConverter.html":{},"index.html":{}}}],["var",{"_index":221,"title":{},"body":{"components/ShowdownComponent.html":{}}}],["variable",{"_index":55,"title":{},"body":{"components/ShowdownComponent.html":{},"directives/SourceDirective.html":{}}}],["void",{"_index":123,"title":{},"body":{"components/ShowdownComponent.html":{},"injectables/ShowdownConverter.html":{},"directives/SourceDirective.html":{}}}],["warranties",{"_index":540,"title":{},"body":{"license.html":{}}}],["warranty",{"_index":535,"title":{},"body":{"license.html":{}}}],["welcome",{"_index":478,"title":{},"body":{"index.html":{}}}],["whether",{"_index":552,"title":{},"body":{"license.html":{}}}],["whitespaces",{"_index":465,"title":{},"body":{"index.html":{}}}],["width",{"_index":97,"title":{},"body":{"components/ShowdownComponent.html":{}}}],["without",{"_index":509,"title":{},"body":{"license.html":{}}}],["yarn",{"_index":483,"title":{},"body":{"index.html":{}}}],["yes",{"_index":84,"title":{},"body":{"components/ShowdownComponent.html":{},"injectables/ShowdownConverter.html":{},"pipes/ShowdownPipe.html":{},"directives/SourceDirective.html":{}}}],["yisrael",{"_index":492,"title":{},"body":{"index.html":{},"license.html":{}}}],["zoom",{"_index":266,"title":{},"body":{"modules/ShowdownModule.html":{},"overview.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"components/ShowdownComponent.html":{"url":"components/ShowdownComponent.html","title":"component - ShowdownComponent","body":"\n                   \n\n\n\n\n\n  Components\n  ShowdownComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/showdown.component.ts\n\n\n    \n        Description\n    \n    \n        A angular component for render Markdown to HTML.\nExample\nSetup as standalone\n * import { NgModule } from '@angular/core';\n * import { ShowdownComponent } from 'ngx-showdown';\n *\n * @NgModule({\n *   declarations: [ ShowdownComponent ];\n * })\n * export class AppModule {}\n *Bind markdown value and options object\n * import { Component } from '@angular/core';\n * import * as Showdown from 'showdown';\n *\n * @Component({\n *   selector: 'some',\n *   template: ''\n * })\n * export class SomeComponent {\n *   text: string = `\n     # Some header\n     ---\n     **Some bold**\n   `;\n *   options: Showdown.ShowdownOptions = { smartIndentationFix: true };\n *   // ...\n * }\n *Bind single option (it have properties for all showdown options).\n * # Some text :+1:\n *Set static markdown value.\n * \n *Use as directive on anther element.\n * \n *Static markdown value in the element content.\n * \n *    \n *       # List:\n *       * a\n *            * A\n *       * b\n *    \n * \n *Set template reference variable.\n * \n *Or\n * \n *\n    \n\n    \n        Extends\n    \n    \n            ShowdownConverter\n    \n\n    \n        Implements\n    \n    \n                OnInit\n                OnChanges\n                \n    \n\n\n\n    Metadata\n    \n        \n\n\n\n\n            \n                exportAs\n                showdown\n            \n\n\n\n\n\n\n\n            \n                selector\n                showdown,[showdown]\n            \n\n\n\n            \n                template\n                \n            \n\n\n\n\n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                render\n                            \n                        \n                    \n                \n\n                \n                    \n                        Inputs\n                    \n                \n                \n                    \n                        \n                            \n                                options\n                            \n                            \n                                sanitize\n                            \n                            \n                                showdown\n                            \n                            \n                                value\n                            \n                        \n                    \n                \n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    showdown\n                                \n                                \n                                    options\n                                \n                                \n                                    sanitize\n                                \n                            \n                        \n                    \n        \n    \n\n\n    \n    Constructor\n        \n            \n                \n                    \nconstructor(_elementRef: ElementRef, _domSanitizer?: DomSanitizer, config?: ShowdownConfig)\n                    \n                \n                        \n                            \n                                Defined in src/showdown.component.ts:245\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        _elementRef\n                                                  \n                                                        \n                                                                    ElementRef\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        _domSanitizer\n                                                  \n                                                        \n                                                                    DomSanitizer\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                                \n                                                        config\n                                                  \n                                                        \n                                                                    ShowdownConfig\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n    \n    Inputs\n        \n            \n                \n                    \n                        \n                        options\n                    \n                \n                \n                    \n                        Type :     Showdown.ShowdownOptions\n\n                    \n                \n                        \n                            \n                                    Defined in src/showdown.component.ts:203\n                            \n                        \n                \n                    \n                        The showdown options of the converter.\nExample :\nBind options\n   * import { Component } from '@angular/core';\n   * import * as Showdown from 'showdown';\n   *\n   * @Component({\n   *   selector: `some`,\n   *   template: `# Some Header`\n   * })\n   * export class SomeComponent {\n   *   options: Showdown.ShowdownOptions = {headerLevelStart: 3};\n   *   // ...\n   * }\n   *Or\n   *  # Indentation Fix\n   *\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        sanitize\n                    \n                \n                \n                    \n                        Type :     boolean\n\n                    \n                \n                        \n                            \n                                    Defined in src/showdown.component.ts:243\n                            \n                        \n                \n                    \n                        Enables html sanitize, it will sanitize the converter html output by DomSanitizer.\nExample :\n   * import { Component } from '@angular/core';\n   *\n   * @Component({\n   *   selector: 'some',\n   *   styles: [`.box { width: 95%; padding: 5px; border: 1px solid black;}`],\n   *   template: `\n     Input\n     \n      Sanitize\n     Markdown\n     {{ text }}\n     Preview\n     \n       \n     \n   `;\n   * })\n   * export class SomeComponent {\n   *    text: string = `# A cool link\nclick me`;\n   * }\n   *\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        showdown\n                    \n                \n                \n                    \n                        Type :     string\n\n                    \n                \n                        \n                            \n                                    Defined in src/showdown.component.ts:174\n                            \n                        \n                \n                    \n                        Input alias to value.\nExample :\n   * \n   *Equivalent to\n   * \n   *\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        value\n                    \n                \n                \n                    \n                        Type :     string\n\n                    \n                \n                        \n                            \n                                    Defined in src/showdown.component.ts:158\n                            \n                        \n                \n                    \n                        The input markdown value.\nExample :\nSet some static markdown value.\n   * \n   *Bind property with markdown value.\n   * \n   * \n   *\n                    \n                \n            \n        \n\n\n\n\n    \n    \n        \n            Methods\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            render\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        render(value?: string)\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/showdown.component.ts:280\n                            \n                        \n\n\n                \n                    \n                            Convert the markdown value of ShowdownComponent to html and set the html result to the element content.\nExample :\n   * # Some Header\n   * \n   *\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        value\n                                                        \n                                                                    string\n                                                        \n                                                    \n                                                    \n                                                            Yes\n                                                    \n                                                    \n\n                                                        \n                                                                \nA markdown value to render (it will override the current value of ShowdownComponent#value)\n\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     void\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n\n\n\n    \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        showdown\n                    \n                \n\n\n                \n                    \n                        setshowdown(value: string)\n                    \n                \n                            \n                                \n                                    Defined in src/showdown.component.ts:174\n                                \n                            \n                    \n                        \n                                Input alias to value.\nExample :\n   * \n   *Equivalent to\n   * \n   *\n\n                                \n                                        Parameters :\n                                        \n                                            \n                                                \n                                                    Name\n                                                        Type\n                                                    Optional\n                                                \n                                            \n                                            \n                                                    \n                                                            value\n                                                    \n                                                            \n                                                                        string\n                                                            \n                                                    \n                                                        \n                                                                No\n                                                        \n                                                        \n                                                    \n                                            \n                                        \n                                \n                                \n                                \n                                \n                                    Returns :     void\n\n                                \n                        \n                    \n            \n        \n        \n            \n                \n                    \n                        \n                        options\n                    \n                \n\n\n                \n                    \n                        setoptions(options)\n                    \n                \n                            \n                                \n                                    Defined in src/showdown.component.ts:207\n                                \n                            \n                    \n                        \n\n                                \n                                        Parameters :\n                                        \n                                            \n                                                \n                                                    Name\n                                                    Optional\n                                                \n                                            \n                                            \n                                                    \n                                                            options\n                                                    \n                                                    \n                                                        \n                                                                No\n                                                        \n                                                        \n                                                    \n                                            \n                                        \n                                \n                                \n                                \n                                \n                                    Returns :     void\n\n                                \n                        \n                    \n            \n        \n        \n            \n                \n                    \n                        \n                        sanitize\n                    \n                \n\n\n                \n                    \n                        setsanitize(sanitize: boolean)\n                    \n                \n                            \n                                \n                                    Defined in src/showdown.component.ts:243\n                                \n                            \n                    \n                        \n                                Enables html sanitize, it will sanitize the converter html output by DomSanitizer.\nExample :\n   * import { Component } from '@angular/core';\n   *\n   * @Component({\n   *   selector: 'some',\n   *   styles: [`.box { width: 95%; padding: 5px; border: 1px solid black;}`],\n   *   template: `\n     Input\n     \n      Sanitize\n     Markdown\n     {{ text }}\n     Preview\n     \n       \n     \n   `;\n   * })\n   * export class SomeComponent {\n   *    text: string = `# A cool link\nclick me`;\n   * }\n   *\n\n                                \n                                        Parameters :\n                                        \n                                            \n                                                \n                                                    Name\n                                                        Type\n                                                    Optional\n                                                \n                                            \n                                            \n                                                    \n                                                            sanitize\n                                                    \n                                                            \n                                                                        boolean\n                                                            \n                                                    \n                                                        \n                                                                No\n                                                        \n                                                        \n                                                    \n                                            \n                                        \n                                \n                                \n                                \n                                \n                                    Returns :     void\n\n                                \n                        \n                    \n            \n        \n\n\n\n\n    \n        import { Component, ElementRef, Input, OnChanges, OnInit, Optional, SecurityContext } from '@angular/core';\nimport { DomSanitizer } from '@angular/platform-browser';\nimport * as Showdown from 'showdown';\nimport { ShowdownConfig } from './showdown-config.provider';\nimport { ShowdownConverter } from './showdown-converter.provider';\n\n/**\n * @internal\n */\nconst MAP_OPTION = {\n  '': true,\n  true: true,\n  false: false\n};\n\n/**\n * @internal\n */\nlet _toOption = (value: any) => MAP_OPTION.hasOwnProperty(value) ? MAP_OPTION[value] : value;\n\n/**\n * The options keys for the dynamic properties set.\n * @internal\n */\nconst OPTIONS_PROPERTIES_KEYS: string[] = [\n  'backslashEscapesHTMLTags',\n  'completeHTMLDocument',\n  'disableForced4SpacesIndentedSublists',\n  'emoji',\n  'encodeEmails',\n  'ghCodeBlocks',\n  'ghCompatibleHeaderId',\n  'ghMentions',\n  'ghMentionsLink',\n  'headerLevelStart',\n  'literalMidWordAsterisks',\n  'literalMidWordUnderscores',\n  'metadata',\n  'noHeaderId',\n  'omitExtraWLInCodeBlocks',\n  'openLinksInNewWindow',\n  'parseImgDimensions',\n  'prefixHeaderId',\n  'rawHeaderId',\n  'rawPrefixHeaderId',\n  'requireSpaceBeforeHeadingText',\n  'simpleLineBreaks',\n  'simplifiedAutoLink',\n  'smartIndentationFix',\n  'smoothLivePreview',\n  'splitAdjacentBlockquotes',\n  'strikethrough',\n  'tables',\n  'tablesHeaderId',\n  'tasklists',\n  'underline'\n];\n\n// For the options setter properties that dynamic definition (the code after the class)\nexport interface ShowdownComponent extends Showdown.ShowdownOptions {\n}\n\n/**\n * A angular component for render `Markdown` to `HTML`.\n *\n * ### Example\n *\n * Setup as standalone\n * ```typescript\n * import { NgModule } from '@angular/core';\n * import { ShowdownComponent } from 'ngx-showdown';\n *\n * @NgModule({\n *   declarations: [ ShowdownComponent ];\n * })\n * export class AppModule {}\n * ```\n *\n * Bind markdown value and options object\n * ```typescript\n * import { Component } from '@angular/core';\n * import * as Showdown from 'showdown';\n *\n * @Component({\n *   selector: 'some',\n *   template: ''\n * })\n * export class SomeComponent {\n *   text: string = `\n *     # Some header\n *     ---\n *     **Some bold**\n *   `;\n *   options: Showdown.ShowdownOptions = { smartIndentationFix: true };\n *   // ...\n * }\n * ```\n * Bind single option (it have properties for all showdown options).\n * ```html\n * # Some text :+1:\n * ```\n *\n * Set static markdown value.\n * ```html\n * \n * ```\n *\n * Use as directive on anther element.\n * ```html\n * \n * ```\n *\n * Static markdown value in the element content.\n * ```html\n * \n *    \n *       # List:\n *       * a\n *            * A\n *       * b\n *    \n * \n * ```\n *\n * Set template reference variable.\n * ```html\n * \n * ```\n * Or\n * ```html\n * \n * ```\n */\n@Component({\n  selector: 'showdown,[showdown]',\n  template: '',\n  exportAs: 'showdown',\n  inputs: OPTIONS_PROPERTIES_KEYS\n})\nexport class ShowdownComponent extends ShowdownConverter implements OnInit, OnChanges, Showdown.ShowdownOptions {\n\n  /**\n   * The input markdown value.\n   *\n   * __Example :__\n   *\n   * Set some static markdown value.\n   * ```html\n   * \n   * ```\n   *\n   * Bind property with markdown value.\n   * ```html\n   * \n   * \n   * ```\n   */\n  @Input() value: string;\n\n  /**\n   * Input alias to `value`.\n   *\n   * __Example :__\n   *\n   * ```html\n   * \n   * ```\n   *\n   * Equivalent to\n   * ```html\n   * \n   * ```\n   */\n  @Input() set showdown(value: string) {\n    this.value = value;\n  }\n\n  /**\n   * The showdown options of the converter.\n   *\n   * __Example :__\n   *\n   * Bind options\n   * ```typescript\n   * import { Component } from '@angular/core';\n   * import * as Showdown from 'showdown';\n   *\n   * @Component({\n   *   selector: `some`,\n   *   template: `# Some Header`\n   * })\n   * export class SomeComponent {\n   *   options: Showdown.ShowdownOptions = {headerLevelStart: 3};\n   *   // ...\n   * }\n   * ```\n   * Or\n   * ```html\n   *  # Indentation Fix\n   * ```\n   */\n  @Input()\n  get options(): Showdown.ShowdownOptions {\n    return this.getOptions();\n  }\n\n  set options(options: Showdown.ShowdownOptions) {\n    this.setOptions(options);\n  }\n\n  private _sanitize: boolean;\n\n  /**\n   * Enables html sanitize, it will sanitize the converter html output by [`DomSanitizer`](https://angular.io/api/platform-browser/DomSanitizer#sanitize).\n   *\n   * __Example :__\n   *\n   * ```typescript\n   * import { Component } from '@angular/core';\n   *\n   * @Component({\n   *   selector: 'some',\n   *   styles: [`.box { width: 95%; padding: 5px; border: 1px solid black;}`],\n   *   template: `\n   *     Input\n   *     \n   *      Sanitize\n   *     Markdown\n   *     {{ text }}\n   *     Preview\n   *     \n   *       \n   *     \n   *   `;\n   * })\n   * export class SomeComponent {\n   *    text: string = `# A cool link\n   * click me`;\n   * }\n   * ```\n   */\n  @Input()\n  set sanitize(sanitize: boolean) {\n    this._sanitize = _toOption(sanitize);\n  }\n\n  constructor(private _elementRef: ElementRef, @Optional() private _domSanitizer?: DomSanitizer, @Optional() config?: ShowdownConfig) {\n    super(config);\n  }\n\n  /**\n   * A angular lifecycle method, Use on init to check if it `content` type and load the element `content` to `value`.\n   * @internal\n   */\n  ngOnInit(): void {\n    if (this.value === undefined && this._elementRef.nativeElement.innerHTML.trim() !== '') {\n      this.render(this._elementRef.nativeElement.innerHTML);\n    }\n  }\n\n  /**\n   * A angular lifecycle method, Use to call to render method after changes.\n   * @internal\n   */\n  ngOnChanges(): void {\n    this.render();\n  }\n\n  /**\n   * Convert the markdown value of {@link ShowdownComponent#value} to html and set the html result to the element content.\n   *\n   * __Example :__\n   *\n   * ```html\n   * # Some Header\n   * \n   * ```\n   * @param value - A markdown value to render (it will override the current value of `ShowdownComponent#value`)\n   */\n  public render(value?: string): void {\n    if (typeof value === 'string') {\n      this.value = value;\n    }\n\n    if (typeof this.value === 'string') {\n      let result = this.makeHtml(this.value);\n\n      if (this._sanitize) {\n        result = this._domSanitizer.sanitize(SecurityContext.HTML, result);\n      }\n\n      this._elementRef.nativeElement.innerHTML = result;\n    }\n  }\n\n}\n\n// Define options properties setter for angular directive and direct access\nfor (let key of OPTIONS_PROPERTIES_KEYS) {\n  Object.defineProperty(ShowdownComponent.prototype, key, {\n    set(value: any): void {\n      this.setOption(key, _toOption(value));\n    },\n    configurable: true\n  });\n}\n\n    \n\n\n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = ''\n    var COMPONENTS = [{'name': 'ShowdownComponent', 'selector': 'showdown,[showdown]'}];\n    var DIRECTIVES = [{'name': 'SourceDirective', 'selector': 'showdown[src],[showdown][src]'}];\n    var ACTUAL_COMPONENT = {'name': 'ShowdownComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/ShowdownConverter.html":{"url":"injectables/ShowdownConverter.html","title":"injectable - ShowdownConverter","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  ShowdownConverter\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/showdown-converter.provider.ts\n        \n\n            \n                Description\n            \n            \n                Example\nSetup as standalone\n * import { NgModule } from '@angular/core';\n * import { ShowdownConverter } from 'ngx-showdown';\n *\n * @NgModule({\n *   providers: [ ShowdownConverter ];\n * })\n * export class AppModule {}\n *Use the converter instance.\n * import { Injectable } from '@angular/core';\n * import { ShowdownConverter } from 'ngx-showdown';\n *\n * @Injectable()\n * export class SomeService {\n *   constructor(showdownConverter: ShowdownConverter) {\n *     let markdown: string = \"**Some**\";\n *     let html: string = showdownConverter.makeHtml(markdown);\n *     console.log(`some:\\nmarkdown: ${markdown)\\nhtml: ${html}\\n`);\n *   }\n * }\n *\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                setOptions\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(config?: ShowdownConfig)\n                    \n                \n                        \n                            \n                                Defined in src/showdown-converter.provider.ts:40\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        config\n                                                  \n                                                        \n                                                                    ShowdownConfig\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Methods\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            setOptions\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        setOptions(options: Showdown.ShowdownOptions)\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/showdown-converter.provider.ts:53\n                            \n                        \n\n\n                \n                    \n                            Set options to the converter.\n\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        options\n                                                        \n                                                                    Showdown.ShowdownOptions\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                        \n                                                                \nA options object to set.\n\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     void\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n\n\n\n    \n\n\n    \n        import { Injectable, Optional } from '@angular/core';\nimport * as Showdown from 'showdown';\nimport { ShowdownConfig } from './showdown-config.provider';\n\n/**\n * @internal\n */\nlet {hasOwnProperty} = {};\n\n/**\n * ### Example\n *\n * Setup as standalone\n * ```typescript\n * import { NgModule } from '@angular/core';\n * import { ShowdownConverter } from 'ngx-showdown';\n *\n * @NgModule({\n *   providers: [ ShowdownConverter ];\n * })\n * export class AppModule {}\n * ```\n *\n * Use the converter instance.\n * ```typescript\n * import { Injectable } from '@angular/core';\n * import { ShowdownConverter } from 'ngx-showdown';\n *\n * @Injectable()\n * export class SomeService {\n *   constructor(showdownConverter: ShowdownConverter) {\n *     let markdown: string = \"**Some**\";\n *     let html: string = showdownConverter.makeHtml(markdown);\n *     console.log(`some:\\nmarkdown: ${markdown)\\nhtml: ${html}\\n`);\n *   }\n * }\n * ```\n */\n@Injectable()\nexport class ShowdownConverter extends Showdown.Converter {\n\n  constructor(@Optional() config?: ShowdownConfig) {\n    super(config && {extensions: config.extensions});\n    this.setFlavor((config && config.flavor) || 'vanilla');\n    this.setOptions(config);\n  }\n\n  /**\n   * Set options to the converter.\n   *\n   * @param options - A options object to set.\n   */\n  public setOptions(options: Showdown.ShowdownOptions): void {\n    for (let key in options) {\n      if (hasOwnProperty.call(options, key)) {\n        this.setOption(key, options[key]);\n      }\n    }\n  }\n\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/ShowdownModule.html":{"url":"modules/ShowdownModule.html","title":"module - ShowdownModule","body":"\n                   \n\n\n\n\n    Modules\n    ShowdownModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_ShowdownModule\n\n\n\ncluster_ShowdownModule_declarations\n\n\n\ncluster_ShowdownModule_exports\n\n\n\ncluster_ShowdownModule_providers\n\n\n\n\nDECLARATIONS\n\nDECLARATIONS\n\n\n\nShowdownModule\n\nShowdownModule\n\nShowdownModule -->\n\nDECLARATIONS->ShowdownModule\n\n\n\n\n\nDECLARATIONS \n\nDECLARATIONS \n\nDECLARATIONS  -->\n\nShowdownModule->DECLARATIONS \n\n\n\n\n\nShowdownConverter\n\nShowdownConverter\n\nShowdownModule -->\n\nShowdownConverter->ShowdownModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/showdown.module.ts\n        \n\n\n        \n            Description\n        \n        \n            Example\nAdd ShowdownModule to app imports.\n * import { NgModule } from '@angular/core';\n * import { ShowdownModule } from 'ngx-showdown';\n *\n * @NgModule({\n *   imports: [ ShowdownModule ];\n * })\n * export class AppModule {}\n *\n        \n\n\n        \n            \n                \n                    Declarations\n                    \n                        \n                            DECLARATIONS\n                        \n                    \n                \n                \n                    Providers\n                    \n                        \n                            ShowdownConverter\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            DECLARATIONS\n                        \n                    \n                \n            \n        \n\n        \n    \n        \n            Methods\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Static\n                            forRoot\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        forRoot(config: ShowdownConfig | Showdown.ConverterOptions)\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/showdown.module.ts:59\n                            \n                        \n\n\n                \n                    \n                            Example :\nAdd ShowdownModule to app imports with config.\n   * import { NgModule } from '@angular/core';\n   * import { ShowdownModule } from 'ngx-showdown';\n   *\n   * @NgModule({\n   *   imports: [ ShowdownModule.forRoot({\n   *     smartIndentationFix: true,\n   *     foo: 'bar',\n   *     flavor: 'github',\n   *     extensions: [ {type:'listener', listeners: {'codeBlocks.after': console.log}} ]\n   *   }) ];\n   * })\n   * export class AppModule {}\n   *\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        config\n                                                        \n                                                                    ShowdownConfig | Showdown.ConverterOptions\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                        \n                                                                \nA root converter config for all converter instances.\n\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     ModuleWithProviders\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { ModuleWithProviders, NgModule } from '@angular/core';\nimport * as Showdown from 'showdown';\nimport { ShowdownConfig } from './showdown-config.provider';\nimport { ShowdownConverter } from './showdown-converter.provider';\nimport { ShowdownComponent } from './showdown.component';\nimport { ShowdownPipe } from './showdown.pipe';\nimport { SourceDirective } from './source.directive';\n\n/**\n * @internal\n */\nconst DECLARATIONS = [\n  ShowdownComponent,\n  ShowdownPipe,\n  SourceDirective\n];\n\n/**\n * ### Example\n *\n * Add `ShowdownModule` to app `imports`.\n * ```typescript\n * import { NgModule } from '@angular/core';\n * import { ShowdownModule } from 'ngx-showdown';\n *\n * @NgModule({\n *   imports: [ ShowdownModule ];\n * })\n * export class AppModule {}\n * ```\n */\n@NgModule({\n  declarations: DECLARATIONS,\n  providers: [ShowdownConverter],\n  exports: DECLARATIONS\n})\nexport class ShowdownModule {\n\n  /**\n   * __Example :__\n   *\n   * Add `ShowdownModule` to app `imports` with config.\n   * ```typescript\n   * import { NgModule } from '@angular/core';\n   * import { ShowdownModule } from 'ngx-showdown';\n   *\n   * @NgModule({\n   *   imports: [ ShowdownModule.forRoot({\n   *     smartIndentationFix: true,\n   *     foo: 'bar',\n   *     flavor: 'github',\n   *     extensions: [ {type:'listener', listeners: {'codeBlocks.after': console.log}} ]\n   *   }) ];\n   * })\n   * export class AppModule {}\n   * ```\n   * @param config - A root converter config for all converter instances.\n   */\n  static forRoot(config: ShowdownConfig | Showdown.ConverterOptions): ModuleWithProviders {\n    return {\n      ngModule: ShowdownModule,\n      providers: [{provide: ShowdownConfig, useValue: config}]\n    };\n  }\n\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"pipes/ShowdownPipe.html":{"url":"pipes/ShowdownPipe.html","title":"pipe - ShowdownPipe","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n  Pipes\n  ShowdownPipe\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n\n        \n            File\n        \n        \n            src/showdown.pipe.ts\n        \n\n            \n                Description\n            \n            \n                A angular pipe to transform Markdown to HTML.\nExample\nSetup as standalone\n * import { NgModule } from '@angular/core';\n * import { ShowdownPipe } from 'ngx-showdown';\n *\n * @NgModule({\n *   declarations: [ ShowdownPipe ];\n * })\n * export class AppModule {}\n *Transform markdown value to html.\n * \n * \n *Transform markdown value to html with options.\n * import * as Showdown from 'showdown';\n *\n * @Component({\n *   selector: 'some',\n *   template: ``\n * })\n * export class SomeComponent {\n *   text: string = \"__Some Underline__\";\n *   options: Showdown.ShowdownOptions = { underline: true };\n *   // ...\n * }\n *\n            \n\n\n        \n            Metadata\n            \n                \n                    \n                        Name\n                        showdown\n                    \n                \n            \n        \n\n            \n    \n        \n            Methods\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            transform\n                            \n                            \n                        \n                    \n                \n                \n                    \ntransform(value: string, options?: Showdown.ShowdownOptions)\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/showdown.pipe.ts:55\n                            \n                        \n\n\n                \n                    \n                            Transform markdown value to html.\n\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        value\n                                                        \n                                                                    string\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                        \n                                                                \nThe markdown value to transform to html.\n\n\n                                                        \n                                                \n                                                \n                                                        options\n                                                        \n                                                                    Showdown.ShowdownOptions\n                                                        \n                                                    \n                                                    \n                                                            Yes\n                                                    \n                                                    \n\n                                                        \n                                                                \nA Showdown converter options.\n\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     string\n\n                            \n                                \n                                    Returns the transform result of value to html.\n\n                                \n                    \n                \n            \n        \n\n\n\n    \n\n\n    \n        import { Pipe, PipeTransform } from '@angular/core';\nimport * as Showdown from 'showdown';\nimport { ShowdownConverter } from './showdown-converter.provider';\n\n/**\n * A angular pipe to transform `Markdown` to `HTML`.\n *\n * ### Example\n *\n * Setup as standalone\n * ```typescript\n * import { NgModule } from '@angular/core';\n * import { ShowdownPipe } from 'ngx-showdown';\n *\n * @NgModule({\n *   declarations: [ ShowdownPipe ];\n * })\n * export class AppModule {}\n * ```\n *\n * Transform markdown value to html.\n * ```html\n * \n * \n * ```\n *\n * Transform markdown value to html with `options`.\n * ```typescript\n * import * as Showdown from 'showdown';\n *\n * @Component({\n *   selector: 'some',\n *   template: ``\n * })\n * export class SomeComponent {\n *   text: string = \"__Some Underline__\";\n *   options: Showdown.ShowdownOptions = { underline: true };\n *   // ...\n * }\n * ```\n */\n@Pipe({\n  name: 'showdown',\n  pure: false\n})\nexport class ShowdownPipe extends ShowdownConverter implements PipeTransform {\n\n  /**\n   * Transform markdown value to html.\n   *\n   * @param value - The markdown value to transform to html.\n   * @param options - A `Showdown` converter options.\n   * @returns Returns the transform result of `value` to html.\n   */\n  transform(value: string, options?: Showdown.ShowdownOptions): string {\n    this.setOptions(options);\n    return this.makeHtml(value);\n  }\n\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"directives/SourceDirective.html":{"url":"directives/SourceDirective.html","title":"directive - SourceDirective","body":"\n                   \n\n\n\n\n\n\n\n  Directives\n  SourceDirective\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/source.directive.ts\n        \n\n            \n                Description\n            \n            \n                A angular directive to ShowdownComponent for make http request of markdown content.\nExample\nSetup as standalone\n * import { NgModule } from '@angular/core';\n * import { HttpClientModule } from '@angular/common/http';\n * import { ShowdownComponent, SourceDirective } from 'ngx-showdown';\n *\n * @NgModule({\n *    declarations: [ ShowdownComponent, SourceDirective ],\n *    imports: [ HttpClientModule ]\n * })\n * export class AppModule {}\n *Bind url src directive\n * import { Component } from '@angular/core';\n *\n * @Component({\n *     selector: 'some',\n *     template: '**Loading...**\n * })\n * class SomeComponent {\n *     url: string = 'https://unpkg.com/ngx-showdown/README.md';\n *     // ...\n * }\n *Set static url\n * \n *Set template reference variable\n * \n *Listening to error events.\n * \n *\n            \n\n            \n                Implements\n            \n            \n                        OnChanges\n            \n\n\n        \n            Metadata\n            \n                \n\n                    \n                        Selector\n                        showdown[src],[showdown][src]\n                    \n\n                \n            \n        \n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                load\n                            \n                        \n                    \n                \n\n                \n                    \n                        Inputs\n                    \n                \n                \n                    \n                        \n                            \n                                src\n                            \n                        \n                    \n                \n\n                \n                    \n                        Outputs\n                    \n                \n                \n                    \n                        \n                            \n                                error\n                            \n                        \n                    \n                \n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(_showdownComponent: ShowdownComponent, _http: HttpClient)\n                    \n                \n                        \n                            \n                                Defined in src/source.directive.ts:87\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        _showdownComponent\n                                                  \n                                                        \n                                                                    ShowdownComponent\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        _http\n                                                  \n                                                        \n                                                                    HttpClient\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    Inputs\n        \n            \n                \n                    \n                        \n                        src\n                    \n                \n                \n                    \n                        Type :     string\n\n                    \n                \n                        \n                            \n                                    Defined in src/source.directive.ts:75\n                            \n                        \n                \n                    \n                        The source url of the markdown content.\nExample :\nSet static url to src directive.\n   * \n   *Bind url to src directive.\n   * \n   * Load\n   * **Loading...**\n   *\n                    \n                \n            \n        \n\n            \n    Outputs\n        \n            \n                \n                    \n                        \n                        error\n                    \n                \n                \n                    \n                        Type :     EventEmitter\n\n                    \n                \n                        \n                            \n                                    Defined in src/source.directive.ts:87\n                            \n                        \n                \n                    \n                        On error occur.\nExample :\n   * \n   *  '+$event.message)\">**Loading...**\n   *\n                    \n                \n            \n        \n\n\n\n            \n    \n        \n            Methods\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            load\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        load(url?: string)\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/source.directive.ts:112\n                            \n                        \n\n\n                \n                    \n                            Load the markdown content of SourceDirective url to ShowdownComponent.\nExample :\n   * \n   * Load\n   * \n   *\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        url\n                                                        \n                                                                    string\n                                                        \n                                                    \n                                                    \n                                                            Yes\n                                                    \n                                                    \n\n                                                        \n                                                                \nA url of markdown content to load (it will override the current url of SourceDirective#src)\n\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     void\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n\n\n\n\n    \n\n\n    \n        import { HttpClient, HttpErrorResponse } from '@angular/common/http';\nimport { Directive, EventEmitter, Input, OnChanges, Output } from '@angular/core';\nimport { ShowdownComponent } from './showdown.component';\n\n/**\n * A angular directive to `ShowdownComponent` for make http request of markdown content.\n *\n * ### Example\n *\n * Setup as standalone\n * ```typescript\n * import { NgModule } from '@angular/core';\n * import { HttpClientModule } from '@angular/common/http';\n * import { ShowdownComponent, SourceDirective } from 'ngx-showdown';\n *\n * @NgModule({\n *    declarations: [ ShowdownComponent, SourceDirective ],\n *    imports: [ HttpClientModule ]\n * })\n * export class AppModule {}\n * ```\n *\n * Bind url `src` directive\n * ```typescript\n * import { Component } from '@angular/core';\n *\n * @Component({\n *     selector: 'some',\n *     template: '**Loading...**\n * })\n * class SomeComponent {\n *     url: string = 'https://unpkg.com/ngx-showdown/README.md';\n *     // ...\n * }\n * ```\n *\n * Set static url\n * ```html\n * \n * ```\n *\n * Set template reference variable\n * ```html\n * \n * ```\n *\n * Listening to `error` events.\n * ```html\n * \n * ```\n */\n@Directive({\n  selector: 'showdown[src],[showdown][src]',\n  exportAs: 'source'\n})\nexport class SourceDirective implements OnChanges {\n\n  /**\n   * The source url of the markdown content.\n   *\n   * __Example :__\n   *\n   * Set static url to `src` directive.\n   * ```html\n   * \n   * ```\n   *\n   * Bind url to `src` directive.\n   * ```html\n   * \n   * Load\n   * **Loading...**\n   * ```\n   */\n  @Input() src: string;\n\n  /**\n   * On error occur.\n   *\n   * __Example :__\n   *\n   * ```html\n   * \n   *  '+$event.message)\">**Loading...**\n   * ```\n   */\n  @Output() error: EventEmitter = new EventEmitter();\n\n  constructor(private _showdownComponent: ShowdownComponent, private _http: HttpClient) {\n  }\n\n  /**\n   * A angular lifecycle method, Use to call to `load` method on src init/changes\n   * @internal\n   */\n  ngOnChanges(): void {\n    this.load();\n  }\n\n  /**\n   * Load the markdown content of {@link SourceDirective#src} url to {@link ShowdownComponent#value}.\n   *\n   * __Example :__\n   *\n   * ```html\n   * \n   * Load\n   * \n   * ```\n   * @param url - A url of markdown content to load (it will override the current url of `SourceDirective#src`)\n   */\n  public load(url?: string): void {\n    if (url) {\n      this.src = url;\n    }\n\n    if (this.src) {\n      this\n        ._http\n        .get(this.src, {responseType: 'text'})\n        .subscribe((response: string) => {\n          this._showdownComponent.render(response);\n        }, (error: HttpErrorResponse) => {\n          this.error.emit(error);\n        });\n    }\n  }\n\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                src/showdown-converter.provider.ts\n            \n            injectable\n            ShowdownConverter\n            \n                66 %\n                (2/3)\n            \n        \n        \n            \n                \n                src/showdown.component.ts\n            \n            component\n            ShowdownComponent\n            \n                85 %\n                (6/7)\n            \n        \n        \n            \n                \n                src/showdown.pipe.ts\n            \n            pipe\n            ShowdownPipe\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/source.directive.ts\n            \n            directive\n            SourceDirective\n            \n                80 %\n                (4/5)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            tslib : ^2.0.1\n    \n\n\n    \n    \n        Peer dependencies\n    \n    \n        \n            @angular/common : >=10.0.0\n        \n            @angular/core : >=10.0.0\n        \n            @angular/platform-browser : >=10.0.0\n        \n            @types/showdown : ^1.9.3\n        \n            showdown : ^1.9.1\n    \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\n\n  \n  Angular Showdown\n\n\n\n\n\n\n\n\n\n\n\nngx-showdown is an Angular (>=2) integration for Showdown, A Markdown to HTML converter.\n\nDemo\n\nDemo app in source code (live).\nYou can play with it in Stackblitz and Plunker.\n\nInstall\n$ npm install ngx-showdown --saveand install peer dependencies (@angular/common/http for SourceDirective)\n$ npm install showdown @angular/common @angular/platform-browser --saveand install type package of Showdown for TypeScript \n$ npm install @types/showdown --save-devUsage\nFor more information and explanations, see the full documentation.\nSetup ShowdownModule in your app.\nAdd ShowdownModule to imports of App.\nimport { NgModule } from '@angular/core';\nimport { ShowdownModule } from 'ngx-showdown';\n\n@NgModule({\n  imports: [ ShowdownModule ]\n})\nexport class AppModule {}Or with config (it will init ShowdownConfig provider)\nimport { NgModule } from '@angular/core';\nimport { ShowdownModule } from 'ngx-showdown';\n\n@NgModule({\n  imports: [ ShowdownModule.forRoot({emoji: true, noHeaderId: true, flavor: 'github'}) ]\n})\nexport class AppModule {}Add showdown to allowedCommonJsDependencies in the build config of the angular.json file (From angular >= 10).\n\"build\": {\n  \"builder\": \"@angular-devkit/build-angular:browser\",\n  \"options\": {\n     \"allowedCommonJsDependencies\": [\n        \"showdown\"\n     ]\n     ...\n   }\n   ...\n},\nUse ShowdownComponent in the template\nBinding to [value] property\nBind markdown value to value property of showdown component.\n\nBind value and options.\nimport { Component } from '@angular/core';\nimport * as Showdown from 'showdown';\n\n@Component({\n  selector: 'some',\n  template: ''\n})\nexport class SomeComponent {\n  text: string = `\n# h1\n## h2\n`;\n  options: Showdown.ShowdownOptions = {...};\n  // ...\n}As directive on anther element \nMarkdown in component content\nA markdown value in the component content.  \n\n# H1\n## H2\nWith options\n\n    * a\n    * b\n    * c\nAs directive on anther element \n:showdown:**howdown**Load .md content (by SourceDirective)\nLoad markdown content of url source.\nBind input url to src directive.\n\n**No Url..**Note: Loading markdown content requires HttpClient of @angular/common/http\nMixing sources\nWhen both Content and [value], It will render [value].\n# ContentWhen both Content and [src], It will render Content and when src loads then results will be src content. \n# ContentWhen both [value] and [src], It will render [value] and when src loads then results will be src content. \nBinding options\nBind options object (it init root ShowdownConfig and then set the bind options)\nimport { Component } from '@angular/core';\nimport * as Showdown from 'showdown';\n\n@Component({\n  selector: `some`,\n  template: ``\n})\nexport class SomeComponent {\n  text: string = '# Some';\n  options: Showdown.ShowdownOptions = {noHeaderId: true};\n  // ...\n}Or\n# abcBind single option (it have input properties for all showdown options).\n# abcSanitize the convert html output\nSanitize the convert html output by DomSanitizer.\n\n# Some\nClick\n__Foo__\nAlso sanitize content of src url.\nUse ShowdownPipe in the template\nTransform markdown value of text property to html. \n{{ text | showdown }}Transform value with options (it init root ShowdownConfig and then set the pipe options)\nimport { Component } from '@angular/core';\nimport * as Showdown from 'showdown';\n\n@Component({\n  selector: 'some',\n  template: '{{ text | showdown:options }}'\n})\nexport class SomeComponent {\n  text: string = `\n      # h1\n      ## h2\n  `;\n  options: Showdown.ShowdownOptions = {smartIndentationFix: true};\n  // ...\n}Use ShowdownConverter service\nimport { Injectable } from '@angular/core';\nimport { ShowdownConverter } from 'ngx-showdown';\n\n@Injectable()\nexport class SomeService {\n  constructor(showdownConverter: ShowdownConverter){\n    console.log(showdownConverter.makeHtml('# Showdown'));\n  }\n}Set config provider (ShowdownConfig)\nSet root config that will be injected to ShowdownComponent, ShowdownPipe, ShowdownConverter when they are created.\nimport { NgModel } from '@angular/core';\nimport { ShowdownModule, ShowdownConverter } from 'ngx-showdown';\nimport * as Showdown from 'showdown';\n\nlet colorExtension: Showdown.FilterExtension = {\n  type: 'output',\n  filter(text: string, converter: ShowdownConverter){\n    return text.replace('$color', converter.getOption('color') || 'green')\n  }\n};\n\n@NgModel({\n  imports:[\n    ShowdownModule.forRoot({\n      flavor: 'original',\n      emoji: true,\n      color: 'red',\n      extensions: [ colorExtension ]\n    })\n  ]\n})\nexport class AppModule {}Override the root config provider value.\nimport { Component } from '@angular/core';\nimport { ShowdownConfig } from 'ngx-showdown';\n\n@Component({\n  selector: 'some',\n  template: '# Header',\n  providers: [ {provide: ShowdownConfig, useValue: {underline: true, emoji: false}} ]\n})\nexport class SomeComponent {}Set the config manually by the converter methods.\nimport { Component } from '@angular/core';\nimport { ShowdownComponent } from 'ngx-showdown';\nimport highlightExtension from 'showdown-highlight';\nimport 'highlight.js/styles/default.css';\n\n@Component({\n  selector: 'some',\n  template: '# Header'\n})\nexport class SomeComponent {\n  constructor(showdownComponent: ShowdownComponent) {\n    showdownComponent.addExtension(highlightExtension);\n    showdownComponent.setFlavor('ghost');\n    showdownComponent.setOptions({emoji: true});\n  }\n}Flavor\nSet root flavor (Showdown flavors).\nimport { NgModel } from '@angular/core';\nimport { ShowdownModule } from 'ngx-showdown';\n\n@NgModel({\n  imports:[\n    ShowdownModule.forRoot({flavor: 'github'})\n  ]\n})\nexport class AppModule {}Note: If flavor is not set then the default value is 'vanilla' flavor.\nConverterOptions\nSet root ConverterOptions (Showdown options).\nimport { NgModel } from '@angular/core';\nimport { ShowdownModule } from 'ngx-showdown';\n\n@NgModel({\n  imports:[\n    ShowdownModule.forRoot({underline: true, emoji: false})\n  ]\n})\nexport class AppModule {}Extensions\nSet root Extensions (Showdown extensions).\nWith extension can be made changes to the Markdown input ('lang') and the Html output also listen to parse event, you can make extension or search in npm for existing extension.\nimport { NgModel } from '@angular/core';\nimport { ShowdownModule } from 'ngx-showdown';\nimport * as Showdown from 'showdown';\nimport highlightExtension from 'showdown-highlight';\nimport 'highlight.js/styles/default.css';\n\nlet someExtension: Showdown.ShowdownExtension = {\n  type: 'lang',\n  regex: new RegExp('markdown', 'g'),\n  replace: 'showdown'\n};\n\n\n@NgModel({\n  imports: [ \n    ShowdownModule.forRoot({extensions: [ someExtension, highlightExtension ]}) \n  ]\n})\nexport class AppModule {}Troubleshoot\nInterpolation\nUsing unescaped {} ({}) in template causes an template parse error (@angular/angular/#11859), \nThe solution is to use escape chars (html char code etc.), \nAnther solution is to override the default interpolation.\nWhitespaces\nAngular aot compiler remove whitespaces by default, use ngPreserveWhitespaces to preserve whitespaces. \n\n* a\n  * 1\n  * 2\n* b\nWith ngPreserveWhitespaces\n* a\n  * 1\n  * 2\n* bWithout ngPreserveWhitespaces\n* a * 1 * 2\n* bIndentation\nShowdown converter smartIndentationFix option can fix string indentation problems of es6 template and html. \ntext = `\n  # A\n  ## B\n`;With smartIndentationFix\n# A\n## BWithout smartIndentationFix\n  # A\n  ## BContribute\nPull requests are welcome!\nDevelopment\nThis project built with Angular Cli.\nInstall dependencies\n$ yarn installRun test\n$ yarn testBuild for release\n$ yarn buildCredits\nThis project use Showdown library to convert Markdown to Html.\nLicense\nCopyright © Yisrael Eliav,\nLicensed under the MIT license.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"license.html":{"url":"license.html","title":"getting-started - license","body":"\n                   \n\nThe MIT License (MIT)\nCopyright © Yisrael Eliav\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n            \n                \n                    \n                        ShowdownModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n  \n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_ShowdownModule\n\n\n\ncluster_ShowdownModule_declarations\n\n\n\ncluster_ShowdownModule_exports\n\n\n\ncluster_ShowdownModule_providers\n\n\n\n\nDECLARATIONS\n\nDECLARATIONS\n\n\n\nShowdownModule\n\nShowdownModule\n\nShowdownModule -->\n\nDECLARATIONS->ShowdownModule\n\n\n\n\n\nDECLARATIONS \n\nDECLARATIONS \n\nDECLARATIONS  -->\n\nShowdownModule->DECLARATIONS \n\n\n\n\n\nShowdownConverter\n\nShowdownConverter\n\nShowdownModule -->\n\nShowdownConverter->ShowdownModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n  \n\n    \n        \n            \n                \n                    \n                    \n                        1 Module\n                    \n                \n            \n        \n        \n            \n                \n                    \n                    1 Component\n                \n            \n        \n        \n            \n                \n                    \n                    1 Directive\n                \n            \n        \n        \n            \n                \n                    \n                    1 Injectable\n                \n            \n        \n        \n            \n                \n                    \n                    1 Pipe\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
