var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.5","fields":["title","body"],"fieldVectors":[["title/components/ShowdownComponent.html",[0,0.576,1,0.726]],["body/components/ShowdownComponent.html",[0,1.015,1,1.169,2,1.681,3,0.328,4,0.26,5,1.021,6,1.021,7,0.26,8,0.78,9,0.54,10,1.349,11,2.384,12,1.612,13,1.659,14,1.085,15,0.67,16,0.826,17,0.086,18,1.023,19,0.797,20,0.685,21,0.428,22,0.811,23,0.67,24,0.928,25,0.909,26,0.428,27,1.982,28,2.599,29,1.612,30,0.826,31,1.752,32,1.752,33,1.534,34,1.71,35,1.587,36,2.255,37,1.681,38,1.66,39,1.022,40,1.177,41,1.284,42,1.284,43,1.668,44,1.022,45,1.451,46,1.795,47,1.047,48,0.797,49,1.284,50,2.657,51,1.795,52,1.681,53,1.284,54,1.284,55,1.284,56,1.053,57,0.422,58,0.826,59,2.143,60,1.636,61,0.621,62,1.284,63,2.143,64,0.407,65,0.428,66,1.053,67,1.636,68,2.877,69,1.681,70,0.502,71,1.021,72,2.484,73,2.143,74,2.255,75,0.854,76,0.633,77,1.085,78,1.021,79,0.881,80,1.047,81,0.665,82,1.047,83,1.681,84,0.854,85,1.021,86,1.094,87,1.681,88,1.681,89,1.284,90,1.284,91,2.746,92,1.681,93,2.143,94,1.302,95,2.143,96,2.143,97,2.143,98,2.143,99,2.143,100,2.143,101,2.143,102,2.143,103,2.143,104,2.143,105,2.254,106,2.143,107,2.143,108,1.603,109,1.636,110,1.681,111,2.143,112,2.143,113,1.021,114,1.636,115,1.681,116,1.021,117,1.284,118,0.057,119,1.022,120,1.284,121,1.636,122,0.797,123,1.71,124,1.021,125,0.78,126,1.021,127,1.021,128,1.021,129,0.621,130,0.502,131,0.621,132,0.621,133,1.094,134,1.284,135,1.021,136,0.826,137,1.021,138,1.021,139,1.021,140,1.021,141,1.681,142,2.143,143,1.021,144,1.681,145,1.021,146,0.78,147,0.621,148,0.633,149,1.668,150,1.668,151,1.021,152,2.484,153,0.502,154,1.021,155,1.021,156,0.78,157,1.284,158,1.021,159,1.021,160,1.021,161,1.021,162,1.681,163,1.021,164,0.78,165,0.78,166,1.284,167,2.096,168,0.78,169,1.021,170,0.621,171,1.021,172,1.021,173,1.021,174,1.021,175,0.78,176,0.78,177,0.78,178,1.021,179,0.328,180,1.302,181,1.021,182,1.021,183,1.021,184,1.349,185,1.349,186,1.349,187,1.021,188,1.509,189,1.021,190,1.021,191,1.021,192,1.021,193,1.021,194,1.681,195,1.021,196,1.021,197,1.021,198,1.021,199,0.78,200,1.681,201,0.621,202,1.021,203,1.021,204,1.021,205,1.022,206,1.021,207,1.021,208,0.78,209,1.021,210,1.021,211,0.621,212,2.484,213,1.021,214,0.78,215,0.328,216,0.78,217,1.021,218,0.031,219,0.019]],["title/injectables/ShowdownConfig.html",[76,0.576,220,0.726]],["body/injectables/ShowdownConfig.html",[3,0.711,4,0.564,7,0.564,9,0.97,14,0.97,17,0.085,18,1.016,20,0.676,21,0.769,22,0.727,24,1.059,25,0.985,26,0.769,29,1.655,30,1.484,40,1.203,43,1.836,45,1.203,47,0.97,56,1.689,58,1.088,64,0.882,65,0.769,66,1.689,70,1.088,75,1.471,76,1.141,77,1.104,79,0.97,80,0.97,81,0.676,82,1.28,84,0.882,108,1.814,118,0.04,122,0.711,123,1.088,133,0.882,136,1.484,147,1.346,148,0.564,179,0.711,180,1.836,184,1.484,185,1.484,186,1.484,188,1.836,201,1.836,205,1.836,218,0.055,219,0.04,220,0.97,221,1.346,222,2.244,223,1.691,224,2.82,225,3.021,226,2.82,227,1.185,228,3.021,229,2.306,230,3.021,231,2.349,232,1.836,233,1.484,234,1.203,235,1.836,236,3.021,237,3.021,238,3.046,239,3.021,240,2.59,241,3.021,242,2.214,243,2.214,244,3.021,245,1.691,246,1.691,247,2.214,248,2.214,249,2.214,250,1.691,251,2.214,252,1.691,253,1.691,254,2.214]],["title/injectables/ShowdownConverter.html",[57,0.445,220,0.726]],["body/injectables/ShowdownConverter.html",[3,0.708,4,0.562,7,0.562,9,0.967,12,1.2,13,1.2,14,0.967,15,1.2,16,1.48,17,0.086,18,1.095,19,1.184,20,0.76,21,0.939,22,0.803,24,1.039,25,0.983,26,0.768,29,1.625,30,1.48,35,1.469,38,1.897,45,1.469,47,1.184,56,1.686,57,0.838,64,0.879,65,0.768,66,1.686,70,1.084,75,1.2,76,0.939,77,0.967,79,0.967,80,0.967,81,0.593,82,1.102,84,0.879,86,1.469,108,1.48,118,0.04,122,0.708,123,1.48,125,2.301,131,1.341,133,0.879,147,1.831,148,0.768,165,1.685,179,0.708,184,1.48,185,1.48,186,1.48,188,1.831,205,1.831,208,1.685,218,0.055,219,0.04,220,1.279,221,1.341,222,2.085,234,1.2,240,1.831,245,1.685,250,1.685,252,1.685,255,1.685,256,3.014,257,2.301,258,2.301,259,3.014,260,3.014,261,3.014,262,3.014,263,3.014,264,2.207,265,2.207,266,2.207,267,2.207,268,2.207,269,1.341,270,2.207,271,2.207,272,2.207,273,1.685,274,2.207,275,2.207,276,2.207]],["title/modules/ShowdownModule.html",[227,0.726,277,1.375]],["body/modules/ShowdownModule.html",[1,0.947,3,0.686,4,0.545,7,0.545,9,0.947,14,1.084,17,0.086,18,1.119,19,1.373,20,0.751,21,0.927,22,0.811,23,1.75,24,0.973,25,0.973,26,0.927,39,1.792,40,1.175,46,1.792,57,0.777,65,0.545,75,1.611,76,0.973,77,0.686,79,0.686,80,0.686,81,0.421,82,0.686,86,1.45,118,0.039,122,0.686,131,1.3,132,1.3,133,0.852,134,1.633,148,0.751,149,1.3,150,1.3,153,1.051,179,0.686,211,1.3,215,0.947,218,0.054,219,0.039,227,1.437,231,1.792,232,1.792,233,2.025,234,1.45,235,1.3,240,2.052,269,1.792,277,1.3,278,1.3,279,0.852,280,1.633,281,2.578,282,1.633,283,1.633,284,1.633,285,1.633,286,2.252,287,1.633,288,1.3,289,2.139,290,2.779,291,2.779,292,2.139,293,2.95,294,2.139,295,2.252,296,2.95,297,2.95,298,2.95,299,2.95,300,2.95,301,2.95,302,2.252,303,2.95,304,3.376,305,1.633,306,1.175,307,2.139,308,2.139,309,1.633]],["title/pipes/ShowdownPipe.html",[306,0.901,310,0.901]],["body/pipes/ShowdownPipe.html",[0,0.778,3,0.723,4,0.574,7,0.574,9,0.981,10,1.501,12,1.703,13,1.744,14,0.981,15,1.217,16,1.501,17,0.086,18,1.077,19,1.194,20,0.682,21,0.778,22,0.861,23,1.217,24,0.99,25,0.99,26,0.778,28,2.642,29,1.703,31,1.501,32,1.501,33,1.501,34,1.501,35,1.633,38,1.91,40,1.217,56,1.106,57,0.601,58,1.106,61,1.368,65,0.574,77,0.723,79,0.723,80,1.113,81,0.443,82,0.723,84,0.897,86,1.217,118,0.063,122,1.194,132,1.368,136,1.106,148,0.778,153,1.106,156,1.719,179,0.981,218,0.055,219,0.041,306,1.597,310,1.481,311,2.252,312,1.719,313,3.342,314,3.055,315,3.055,316,2.333,317,3.055,318,2.252,319,3.055,320,2.252,321,2.252]],["title/directives/SourceDirective.html",[48,0.726,215,0.726]],["body/directives/SourceDirective.html",[0,0.843,1,1.317,3,0.557,4,0.843,7,0.442,9,0.815,10,1.477,12,1.554,13,1.516,14,1.131,15,1.012,16,1.248,17,0.086,18,1.045,19,1.063,20,0.693,21,0.647,22,0.5,23,1.012,24,0.843,25,0.898,26,0.647,27,2.012,31,1.626,32,1.626,33,1.248,34,0.852,35,1.554,45,1.467,46,2.012,47,0.557,48,1.299,51,2.371,54,1.94,55,1.94,58,1.248,60,2.296,61,1.054,62,1.324,64,0.691,65,0.647,66,1.477,67,1.94,70,0.852,77,1.063,79,0.815,80,0.815,81,0.651,82,0.815,84,0.691,94,1.544,105,1.544,108,1.477,118,0.031,119,1.544,120,1.94,121,1.324,122,0.557,123,1.477,133,0.691,148,0.647,149,1.827,150,1.827,157,1.324,164,1.324,166,1.324,167,1.94,170,2.493,175,1.324,177,1.324,179,0.557,180,1.054,184,0.852,185,0.852,186,0.852,199,1.324,201,1.054,214,1.324,215,1.278,216,1.94,218,0.046,219,0.031,233,1.248,305,1.324,322,1.324,323,1.94,324,2.54,325,2.54,326,3.311,327,2.296,328,3.361,329,3.089,330,2.527,331,2.54,332,2.54,333,2.54,334,2.979,335,2.54,336,2.54,337,1.734,338,3.311,339,2.527,340,2.54,341,2.54,342,1.734,343,3.311,344,2.54,345,2.54,346,2.54,347,1.734,348,3.007,349,2.54,350,1.054,351,1.734,352,1.734,353,2.54,354,1.734,355,1.734,356,1.734,357,1.734,358,1.734,359,2.54]],["title/coverage.html",[360,2.34]],["body/coverage.html",[0,0.853,1,1.075,7,0.853,8,2.556,17,0.081,48,1.075,57,0.659,76,0.853,81,0.659,118,0.061,215,1.075,218,0.071,219,0.061,220,1.261,222,2.387,223,2.556,255,2.556,306,1.334,310,1.334,312,2.556,322,2.556,350,2.034,360,2.556,361,2.034,362,3.348,363,3.348,364,3.348,365,3.348,366,3.348,367,3.348,368,3.348,369,3.348,370,3.348,371,3.348,372,3.348,373,3.348,374,3.348,375,3.348]],["title/dependencies.html",[279,1.081,376,1.451]],["body/dependencies.html",[17,0.082,20,0.687,22,0.687,118,0.063,129,2.121,130,1.715,218,0.073,219,0.063,279,1.391,377,2.665,378,2.665,379,4.241,380,2.665,381,3.491,382,3.491]],["title/index.html",[64,0.757,383,1.451,384,1.451]],["body/index.html",[0,1.029,1,0.97,4,0.565,10,1.485,11,2.058,12,1.509,13,1.472,15,0.576,17,0.085,18,1.124,19,0.97,20,0.785,21,1.002,22,0.88,24,1.016,25,1.016,26,0.876,27,1.981,28,2.455,29,1.59,30,0.71,31,1.601,32,1.9,33,1.601,34,1.759,35,1.299,36,1.692,38,1.324,39,1.837,40,1.472,41,1.103,42,1.692,43,0.878,44,1.638,45,1.509,47,1.104,48,0.865,49,2.058,50,1.692,51,2.39,53,2.058,57,0.677,65,0.368,68,1.692,74,1.103,75,1.299,76,0.876,81,0.53,86,1.204,89,1.103,90,1.103,94,1.837,105,1.638,109,1.103,114,2.058,117,2.058,118,0.026,119,1.347,129,0.878,130,0.71,136,1.089,146,1.692,148,0.368,153,0.71,168,2.058,170,0.878,176,1.103,215,0.711,218,0.04,219,0.049,220,0.711,224,2.058,226,2.821,227,1.216,229,2.058,231,2.09,232,1.347,233,1.759,234,0.576,235,0.878,246,1.103,253,1.692,257,1.103,258,1.103,269,1.837,273,1.103,279,0.883,290,1.103,291,2.058,295,1.103,302,2.734,306,0.883,309,1.103,310,0.576,313,1.692,316,1.103,323,1.103,327,1.692,328,2.058,329,2.821,330,1.103,334,1.103,339,1.103,350,0.878,361,0.878,376,1.103,377,1.103,378,1.103,380,1.103,385,2.308,386,1.445,387,2.216,388,1.445,389,1.445,390,1.445,391,1.445,392,3.581,393,3.023,394,2.216,395,1.445,396,1.445,397,1.445,398,1.445,399,1.445,400,1.445,401,1.445,402,2.216,403,2.216,404,2.696,405,2.696,406,1.445,407,1.445,408,1.445,409,1.445,410,1.445,411,1.445,412,1.445,413,2.696,414,2.216,415,2.216,416,1.445,417,1.445,418,1.445,419,1.445,420,1.445,421,1.445,422,1.445,423,1.445,424,2.216,425,1.445,426,1.445,427,1.445,428,1.445,429,1.445,430,1.445,431,1.445,432,1.445,433,1.445,434,2.696,435,2.216,436,2.216,437,1.445,438,1.445,439,1.445,440,1.445,441,1.445,442,1.445,443,1.445,444,2.696,445,1.445,446,2.696,447,1.445,448,2.216,449,1.445,450,2.216,451,1.103,452,1.445,453,1.445,454,2.216,455,1.445,456,1.445,457,1.445,458,1.445,459,1.445,460,1.445,461,1.445,462,2.216,463,1.445,464,1.445,465,1.445,466,1.445,467,2.216,468,1.445,469,1.445,470,1.445,471,1.445,472,2.696,473,1.445,474,1.445,475,1.445,476,2.696,477,1.445,478,2.216,479,1.445,480,1.445,481,1.445,482,1.445,483,1.445,484,1.445,485,1.445,486,1.445,487,2.216,488,1.445,489,1.445,490,2.696,491,1.445,492,1.445,493,1.445,494,1.445,495,1.445,496,1.445,497,1.347,498,1.103,499,1.103,500,1.103,501,1.445,502,1.445,503,1.103]],["title/license.html",[383,1.451,384,1.451,497,1.155]],["body/license.html",[17,0.073,47,1.196,118,0.056,218,0.068,219,0.056,238,2.339,288,1.862,361,1.862,451,2.339,497,1.862,498,3.065,499,2.339,500,2.339,503,2.844,504,3.725,505,3.064,506,3.064,507,3.064,508,3.064,509,3.064,510,3.064,511,3.725,512,4.477,513,3.064,514,3.064,515,3.064,516,4.014,517,3.064,518,3.725,519,3.064,520,3.064,521,3.064,522,3.064,523,3.064,524,3.064,525,3.064,526,3.064,527,3.725,528,3.064,529,3.064,530,3.064,531,3.064,532,3.064,533,3.064,534,3.064,535,3.725,536,3.725,537,3.064,538,3.064,539,3.064,540,3.064,541,3.064,542,3.064,543,3.064,544,3.064,545,3.064,546,3.064,547,3.064,548,3.064,549,3.064,550,3.064,551,3.064,552,3.064,553,3.064,554,3.064,555,3.064,556,3.064,557,3.064,558,3.064,559,3.064,560,3.064,561,3.064,562,3.064,563,3.064,564,3.064,565,3.064]],["title/modules.html",[278,1.862]],["body/modules.html",[17,0.074,118,0.065,130,1.754,218,0.074,219,0.065,227,1.146,278,2.17,566,3.571,567,3.571,568,3.571]],["title/overview.html",[569,2.34]],["body/overview.html",[0,0.845,17,0.079,23,1.796,44,2.606,48,1.065,57,0.817,118,0.06,211,2.016,218,0.071,219,0.06,221,2.016,227,1.436,234,1.322,277,2.374,279,1.322,280,2.534,281,2.534,282,2.534,283,2.534,284,2.534,285,2.534,286,2.983,287,2.534,288,2.016,310,1.322,385,2.534,569,2.534]]],"invertedIndex":[["",{"_index":17,"title":{},"body":{"components/ShowdownComponent.html":{},"injectables/ShowdownConfig.html":{},"injectables/ShowdownConverter.html":{},"modules/ShowdownModule.html":{},"pipes/ShowdownPipe.html":{},"directives/SourceDirective.html":{},"coverage.html":{},"dependencies.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{}}}],["1",{"_index":44,"title":{},"body":{"components/ShowdownComponent.html":{},"index.html":{},"overview.html":{}}}],["1.9.0",{"_index":382,"title":{},"body":{"dependencies.html":{}}}],["1.9.3",{"_index":381,"title":{},"body":{"dependencies.html":{}}}],["1/1",{"_index":371,"title":{},"body":{"coverage.html":{}}}],["100",{"_index":370,"title":{},"body":{"coverage.html":{}}}],["1px",{"_index":102,"title":{},"body":{"components/ShowdownComponent.html":{}}}],["2",{"_index":385,"title":{},"body":{"index.html":{},"overview.html":{}}}],["2/3",{"_index":367,"title":{},"body":{"coverage.html":{}}}],["2/4",{"_index":365,"title":{},"body":{"coverage.html":{}}}],["3",{"_index":88,"title":{},"body":{"components/ShowdownComponent.html":{}}}],["4/5",{"_index":373,"title":{},"body":{"coverage.html":{}}}],["50",{"_index":364,"title":{},"body":{"coverage.html":{}}}],["5px",{"_index":100,"title":{},"body":{"components/ShowdownComponent.html":{}}}],["6/7",{"_index":369,"title":{},"body":{"coverage.html":{}}}],["66",{"_index":366,"title":{},"body":{"coverage.html":{}}}],["8.0.0",{"_index":379,"title":{},"body":{"dependencies.html":{}}}],["80",{"_index":372,"title":{},"body":{"coverage.html":{}}}],["85",{"_index":368,"title":{},"body":{"coverage.html":{}}}],["95",{"_index":98,"title":{},"body":{"components/ShowdownComponent.html":{}}}],["__",{"_index":150,"title":{},"body":{"components/ShowdownComponent.html":{},"modules/ShowdownModule.html":{},"directives/SourceDirective.html":{}}}],["__example",{"_index":149,"title":{},"body":{"components/ShowdownComponent.html":{},"modules/ShowdownModule.html":{},"directives/SourceDirective.html":{}}}],["__foo__",{"_index":418,"title":{},"body":{"index.html":{}}}],["__some",{"_index":314,"title":{},"body":{"pipes/ShowdownPipe.html":{}}}],["_domsanitizer",{"_index":73,"title":{},"body":{"components/ShowdownComponent.html":{}}}],["_elementref",{"_index":83,"title":{},"body":{"components/ShowdownComponent.html":{}}}],["_http",{"_index":338,"title":{},"body":{"directives/SourceDirective.html":{}}}],["_sanitize",{"_index":158,"title":{},"body":{"components/ShowdownComponent.html":{}}}],["_showdowncomponent",{"_index":341,"title":{},"body":{"directives/SourceDirective.html":{}}}],["_tooption",{"_index":137,"title":{},"body":{"components/ShowdownComponent.html":{}}}],["_tooption(sanitize",{"_index":163,"title":{},"body":{"components/ShowdownComponent.html":{}}}],["_tooption(value",{"_index":209,"title":{},"body":{"components/ShowdownComponent.html":{}}}],["abcbind",{"_index":416,"title":{},"body":{"index.html":{}}}],["abcsanitize",{"_index":417,"title":{},"body":{"index.html":{}}}],["above",{"_index":534,"title":{},"body":{"license.html":{}}}],["access",{"_index":204,"title":{},"body":{"components/ShowdownComponent.html":{}}}],["accessors",{"_index":69,"title":{},"body":{"components/ShowdownComponent.html":{}}}],["action",{"_index":559,"title":{},"body":{"license.html":{}}}],["actual_component",{"_index":217,"title":{},"body":{"components/ShowdownComponent.html":{}}}],["add",{"_index":290,"title":{},"body":{"modules/ShowdownModule.html":{},"index.html":{}}}],["alias",{"_index":111,"title":{},"body":{"components/ShowdownComponent.html":{}}}],["and/or",{"_index":525,"title":{},"body":{"license.html":{}}}],["angular",{"_index":10,"title":{},"body":{"components/ShowdownComponent.html":{},"pipes/ShowdownPipe.html":{},"directives/SourceDirective.html":{},"index.html":{}}}],["angular/angular/#11859",{"_index":466,"title":{},"body":{"index.html":{}}}],["angular/common",{"_index":378,"title":{},"body":{"dependencies.html":{},"index.html":{}}}],["angular/common/http",{"_index":327,"title":{},"body":{"directives/SourceDirective.html":{},"index.html":{}}}],["angular/core",{"_index":20,"title":{},"body":{"components/ShowdownComponent.html":{},"injectables/ShowdownConfig.html":{},"injectables/ShowdownConverter.html":{},"modules/ShowdownModule.html":{},"pipes/ShowdownPipe.html":{},"directives/SourceDirective.html":{},"dependencies.html":{},"index.html":{}}}],["angular/platform",{"_index":129,"title":{},"body":{"components/ShowdownComponent.html":{},"dependencies.html":{},"index.html":{}}}],["anther",{"_index":49,"title":{},"body":{"components/ShowdownComponent.html":{},"index.html":{}}}],["aot",{"_index":473,"title":{},"body":{"index.html":{}}}],["app",{"_index":291,"title":{},"body":{"modules/ShowdownModule.html":{},"index.html":{}}}],["appmodule",{"_index":26,"title":{},"body":{"components/ShowdownComponent.html":{},"injectables/ShowdownConfig.html":{},"injectables/ShowdownConverter.html":{},"modules/ShowdownModule.html":{},"pipes/ShowdownPipe.html":{},"directives/SourceDirective.html":{},"index.html":{}}}],["arising",{"_index":563,"title":{},"body":{"license.html":{}}}],["associated",{"_index":513,"title":{},"body":{"license.html":{}}}],["authors",{"_index":552,"title":{},"body":{"license.html":{}}}],["b",{"_index":53,"title":{},"body":{"components/ShowdownComponent.html":{},"index.html":{}}}],["bar",{"_index":297,"title":{},"body":{"modules/ShowdownModule.html":{}}}],["baseconverteroptions",{"_index":254,"title":{},"body":{"injectables/ShowdownConfig.html":{}}}],["bcontribute",{"_index":482,"title":{},"body":{"index.html":{}}}],["bind",{"_index":27,"title":{},"body":{"components/ShowdownComponent.html":{},"directives/SourceDirective.html":{},"index.html":{}}}],["bindentation",{"_index":479,"title":{},"body":{"index.html":{}}}],["binding",{"_index":403,"title":{},"body":{"index.html":{}}}],["black",{"_index":104,"title":{},"body":{"components/ShowdownComponent.html":{}}}],["bold",{"_index":37,"title":{},"body":{"components/ShowdownComponent.html":{}}}],["boolean",{"_index":91,"title":{},"body":{"components/ShowdownComponent.html":{}}}],["bootstrap",{"_index":280,"title":{},"body":{"modules/ShowdownModule.html":{},"overview.html":{}}}],["border",{"_index":101,"title":{},"body":{"components/ShowdownComponent.html":{}}}],["both",{"_index":413,"title":{},"body":{"index.html":{}}}],["box",{"_index":96,"title":{},"body":{"components/ShowdownComponent.html":{}}}],["browse",{"_index":568,"title":{},"body":{"modules.html":{}}}],["browser",{"_index":130,"title":{},"body":{"components/ShowdownComponent.html":{},"dependencies.html":{},"index.html":{},"modules.html":{}}}],["browser/domsanitizer#sanitize",{"_index":160,"title":{},"body":{"components/ShowdownComponent.html":{}}}],["buildcredits",{"_index":495,"title":{},"body":{"index.html":{}}}],["built",{"_index":488,"title":{},"body":{"index.html":{}}}],["bwithout",{"_index":478,"title":{},"body":{"index.html":{}}}],["c",{"_index":406,"title":{},"body":{"index.html":{}}}],["call",{"_index":175,"title":{},"body":{"components/ShowdownComponent.html":{},"directives/SourceDirective.html":{}}}],["causes",{"_index":465,"title":{},"body":{"index.html":{}}}],["changes",{"_index":176,"title":{},"body":{"components/ShowdownComponent.html":{},"index.html":{}}}],["char",{"_index":470,"title":{},"body":{"index.html":{}}}],["charge",{"_index":508,"title":{},"body":{"license.html":{}}}],["chars",{"_index":469,"title":{},"body":{"index.html":{}}}],["check",{"_index":169,"title":{},"body":{"components/ShowdownComponent.html":{}}}],["claim",{"_index":555,"title":{},"body":{"license.html":{}}}],["class",{"_index":25,"title":{},"body":{"components/ShowdownComponent.html":{},"injectables/ShowdownConfig.html":{},"injectables/ShowdownConverter.html":{},"modules/ShowdownModule.html":{},"pipes/ShowdownPipe.html":{},"directives/SourceDirective.html":{},"index.html":{}}}],["cli",{"_index":489,"title":{},"body":{"index.html":{}}}],["click",{"_index":109,"title":{},"body":{"components/ShowdownComponent.html":{},"index.html":{}}}],["cluster_showdownmodule",{"_index":282,"title":{},"body":{"modules/ShowdownModule.html":{},"overview.html":{}}}],["cluster_showdownmodule_declarations",{"_index":283,"title":{},"body":{"modules/ShowdownModule.html":{},"overview.html":{}}}],["cluster_showdownmodule_exports",{"_index":284,"title":{},"body":{"modules/ShowdownModule.html":{},"overview.html":{}}}],["cluster_showdownmodule_providers",{"_index":285,"title":{},"body":{"modules/ShowdownModule.html":{},"overview.html":{}}}],["code",{"_index":146,"title":{},"body":{"components/ShowdownComponent.html":{},"index.html":{}}}],["codeblocks.after",{"_index":300,"title":{},"body":{"modules/ShowdownModule.html":{}}}],["color",{"_index":431,"title":{},"body":{"index.html":{}}}],["colorextension",{"_index":424,"title":{},"body":{"index.html":{}}}],["compile",{"_index":196,"title":{},"body":{"components/ShowdownComponent.html":{}}}],["compiler",{"_index":474,"title":{},"body":{"index.html":{}}}],["component",{"_index":0,"title":{"components/ShowdownComponent.html":{}},"body":{"components/ShowdownComponent.html":{},"pipes/ShowdownPipe.html":{},"directives/SourceDirective.html":{},"coverage.html":{},"index.html":{},"overview.html":{}}}],["component_template",{"_index":213,"title":{},"body":{"components/ShowdownComponent.html":{}}}],["components",{"_index":2,"title":{},"body":{"components/ShowdownComponent.html":{}}}],["conditions",{"_index":533,"title":{},"body":{"license.html":{}}}],["config",{"_index":75,"title":{},"body":{"components/ShowdownComponent.html":{},"injectables/ShowdownConfig.html":{},"injectables/ShowdownConverter.html":{},"modules/ShowdownModule.html":{},"index.html":{}}}],["config.extensions",{"_index":270,"title":{},"body":{"injectables/ShowdownConverter.html":{}}}],["config.flavor",{"_index":272,"title":{},"body":{"injectables/ShowdownConverter.html":{}}}],["config.provider",{"_index":131,"title":{},"body":{"components/ShowdownComponent.html":{},"injectables/ShowdownConverter.html":{},"modules/ShowdownModule.html":{}}}],["config.provider.ts",{"_index":223,"title":{},"body":{"injectables/ShowdownConfig.html":{},"coverage.html":{}}}],["config.provider.ts:41",{"_index":241,"title":{},"body":{"injectables/ShowdownConfig.html":{}}}],["config.provider.ts:52",{"_index":243,"title":{},"body":{"injectables/ShowdownConfig.html":{}}}],["configurable",{"_index":210,"title":{},"body":{"components/ShowdownComponent.html":{}}}],["connection",{"_index":564,"title":{},"body":{"license.html":{}}}],["console.log",{"_index":301,"title":{},"body":{"modules/ShowdownModule.html":{}}}],["console.log(`some:\\nmarkdown",{"_index":260,"title":{},"body":{"injectables/ShowdownConverter.html":{}}}],["console.log(showdownconverter.makehtml",{"_index":421,"title":{},"body":{"index.html":{}}}],["const",{"_index":134,"title":{},"body":{"components/ShowdownComponent.html":{},"modules/ShowdownModule.html":{}}}],["constructor",{"_index":70,"title":{},"body":{"components/ShowdownComponent.html":{},"injectables/ShowdownConfig.html":{},"injectables/ShowdownConverter.html":{},"directives/SourceDirective.html":{}}}],["constructor(@optional",{"_index":268,"title":{},"body":{"injectables/ShowdownConverter.html":{}}}],["constructor(_elementref",{"_index":71,"title":{},"body":{"components/ShowdownComponent.html":{}}}],["constructor(_showdowncomponent",{"_index":337,"title":{},"body":{"directives/SourceDirective.html":{}}}],["constructor(config",{"_index":264,"title":{},"body":{"injectables/ShowdownConverter.html":{}}}],["constructor(options",{"_index":239,"title":{},"body":{"injectables/ShowdownConfig.html":{}}}],["constructor(private",{"_index":164,"title":{},"body":{"components/ShowdownComponent.html":{},"directives/SourceDirective.html":{}}}],["constructor(showdowncomponent",{"_index":437,"title":{},"body":{"index.html":{}}}],["constructor(showdownconverter",{"_index":258,"title":{},"body":{"injectables/ShowdownConverter.html":{},"index.html":{}}}],["content",{"_index":51,"title":{},"body":{"components/ShowdownComponent.html":{},"directives/SourceDirective.html":{},"index.html":{}}}],["contentwhen",{"_index":414,"title":{},"body":{"index.html":{}}}],["contract",{"_index":560,"title":{},"body":{"license.html":{}}}],["convert",{"_index":117,"title":{},"body":{"components/ShowdownComponent.html":{},"index.html":{}}}],["converter",{"_index":86,"title":{},"body":{"components/ShowdownComponent.html":{},"injectables/ShowdownConverter.html":{},"modules/ShowdownModule.html":{},"pipes/ShowdownPipe.html":{},"index.html":{}}}],["converter.getoption('color",{"_index":428,"title":{},"body":{"index.html":{}}}],["converter.provider",{"_index":132,"title":{},"body":{"components/ShowdownComponent.html":{},"modules/ShowdownModule.html":{},"pipes/ShowdownPipe.html":{}}}],["converter.provider.ts",{"_index":255,"title":{},"body":{"injectables/ShowdownConverter.html":{},"coverage.html":{}}}],["converter.provider.ts:40",{"_index":265,"title":{},"body":{"injectables/ShowdownConverter.html":{}}}],["converter.provider.ts:53",{"_index":266,"title":{},"body":{"injectables/ShowdownConverter.html":{}}}],["converteroptions",{"_index":253,"title":{},"body":{"injectables/ShowdownConfig.html":{},"index.html":{}}}],["cool",{"_index":107,"title":{},"body":{"components/ShowdownComponent.html":{}}}],["copies",{"_index":527,"title":{},"body":{"license.html":{}}}],["copy",{"_index":511,"title":{},"body":{"license.html":{}}}],["copyright",{"_index":498,"title":{},"body":{"index.html":{},"license.html":{}}}],["coverage",{"_index":360,"title":{"coverage.html":{}},"body":{"coverage.html":{}}}],["created",{"_index":423,"title":{},"body":{"index.html":{}}}],["current",{"_index":120,"title":{},"body":{"components/ShowdownComponent.html":{},"directives/SourceDirective.html":{}}}],["custom",{"_index":225,"title":{},"body":{"injectables/ShowdownConfig.html":{}}}],["damages",{"_index":556,"title":{},"body":{"license.html":{}}}],["deal",{"_index":515,"title":{},"body":{"license.html":{}}}],["dealings",{"_index":565,"title":{},"body":{"license.html":{}}}],["declarations",{"_index":23,"title":{},"body":{"components/ShowdownComponent.html":{},"modules/ShowdownModule.html":{},"pipes/ShowdownPipe.html":{},"directives/SourceDirective.html":{},"overview.html":{}}}],["declare",{"_index":201,"title":{},"body":{"components/ShowdownComponent.html":{},"injectables/ShowdownConfig.html":{},"directives/SourceDirective.html":{}}}],["default",{"_index":444,"title":{},"body":{"index.html":{}}}],["define",{"_index":202,"title":{},"body":{"components/ShowdownComponent.html":{}}}],["defined",{"_index":77,"title":{},"body":{"components/ShowdownComponent.html":{},"injectables/ShowdownConfig.html":{},"injectables/ShowdownConverter.html":{},"modules/ShowdownModule.html":{},"pipes/ShowdownPipe.html":{},"directives/SourceDirective.html":{}}}],["definition",{"_index":145,"title":{},"body":{"components/ShowdownComponent.html":{}}}],["demo",{"_index":387,"title":{},"body":{"index.html":{}}}],["dependencies",{"_index":279,"title":{"dependencies.html":{}},"body":{"modules/ShowdownModule.html":{},"dependencies.html":{},"index.html":{},"overview.html":{}}}],["deprecated",{"_index":185,"title":{},"body":{"components/ShowdownComponent.html":{},"injectables/ShowdownConfig.html":{},"injectables/ShowdownConverter.html":{},"directives/SourceDirective.html":{}}}],["description",{"_index":9,"title":{},"body":{"components/ShowdownComponent.html":{},"injectables/ShowdownConfig.html":{},"injectables/ShowdownConverter.html":{},"modules/ShowdownModule.html":{},"pipes/ShowdownPipe.html":{},"directives/SourceDirective.html":{}}}],["development",{"_index":486,"title":{},"body":{"index.html":{}}}],["devusage",{"_index":396,"title":{},"body":{"index.html":{}}}],["direct",{"_index":203,"title":{},"body":{"components/ShowdownComponent.html":{}}}],["directive",{"_index":48,"title":{"directives/SourceDirective.html":{}},"body":{"components/ShowdownComponent.html":{},"directives/SourceDirective.html":{},"coverage.html":{},"index.html":{},"overview.html":{}}}],["directives",{"_index":214,"title":{},"body":{"components/ShowdownComponent.html":{},"directives/SourceDirective.html":{}}}],["distribute",{"_index":523,"title":{},"body":{"license.html":{}}}],["documentation",{"_index":361,"title":{},"body":{"coverage.html":{},"index.html":{},"license.html":{}}}],["dom",{"_index":5,"title":{},"body":{"components/ShowdownComponent.html":{}}}],["domsanitizer",{"_index":74,"title":{},"body":{"components/ShowdownComponent.html":{},"index.html":{}}}],["domsanitizer`](https://angular.io/api/platform",{"_index":159,"title":{},"body":{"components/ShowdownComponent.html":{}}}],["dynamic",{"_index":141,"title":{},"body":{"components/ShowdownComponent.html":{}}}],["element",{"_index":50,"title":{},"body":{"components/ShowdownComponent.html":{},"index.html":{}}}],["elementref",{"_index":72,"title":{},"body":{"components/ShowdownComponent.html":{}}}],["eliav",{"_index":500,"title":{},"body":{"index.html":{},"license.html":{}}}],["emoji",{"_index":229,"title":{},"body":{"injectables/ShowdownConfig.html":{},"index.html":{}}}],["enables",{"_index":93,"title":{},"body":{"components/ShowdownComponent.html":{}}}],["equivalent",{"_index":112,"title":{},"body":{"components/ShowdownComponent.html":{}}}],["error",{"_index":334,"title":{},"body":{"directives/SourceDirective.html":{},"index.html":{}}}],["es6",{"_index":481,"title":{},"body":{"index.html":{}}}],["escape",{"_index":468,"title":{},"body":{"index.html":{}}}],["etc",{"_index":471,"title":{},"body":{"index.html":{}}}],["event",{"_index":451,"title":{},"body":{"index.html":{},"license.html":{}}}],["event.message)\">**loading",{"_index":345,"title":{},"body":{"directives/SourceDirective.html":{}}}],["eventemitter",{"_index":343,"title":{},"body":{"directives/SourceDirective.html":{}}}],["events",{"_index":335,"title":{},"body":{"directives/SourceDirective.html":{}}}],["example",{"_index":14,"title":{},"body":{"components/ShowdownComponent.html":{},"injectables/ShowdownConfig.html":{},"injectables/ShowdownConverter.html":{},"modules/ShowdownModule.html":{},"pipes/ShowdownPipe.html":{},"directives/SourceDirective.html":{}}}],["existing",{"_index":453,"title":{},"body":{"index.html":{}}}],["explanations",{"_index":399,"title":{},"body":{"index.html":{}}}],["export",{"_index":24,"title":{},"body":{"components/ShowdownComponent.html":{},"injectables/ShowdownConfig.html":{},"injectables/ShowdownConverter.html":{},"modules/ShowdownModule.html":{},"pipes/ShowdownPipe.html":{},"directives/SourceDirective.html":{},"index.html":{}}}],["exportas",{"_index":62,"title":{},"body":{"components/ShowdownComponent.html":{},"directives/SourceDirective.html":{}}}],["exports",{"_index":281,"title":{},"body":{"modules/ShowdownModule.html":{},"overview.html":{}}}],["express",{"_index":543,"title":{},"body":{"license.html":{}}}],["extends",{"_index":56,"title":{},"body":{"components/ShowdownComponent.html":{},"injectables/ShowdownConfig.html":{},"injectables/ShowdownConverter.html":{},"pipes/ShowdownPipe.html":{}}}],["extension",{"_index":446,"title":{},"body":{"index.html":{}}}],["extensions",{"_index":269,"title":{},"body":{"injectables/ShowdownConverter.html":{},"modules/ShowdownModule.html":{},"index.html":{}}}],["false",{"_index":136,"title":{},"body":{"components/ShowdownComponent.html":{},"injectables/ShowdownConfig.html":{},"pipes/ShowdownPipe.html":{},"index.html":{}}}],["file",{"_index":7,"title":{},"body":{"components/ShowdownComponent.html":{},"injectables/ShowdownConfig.html":{},"injectables/ShowdownConverter.html":{},"modules/ShowdownModule.html":{},"pipes/ShowdownPipe.html":{},"directives/SourceDirective.html":{},"coverage.html":{}}}],["files",{"_index":514,"title":{},"body":{"license.html":{}}}],["filter(text",{"_index":426,"title":{},"body":{"index.html":{}}}],["fitness",{"_index":548,"title":{},"body":{"license.html":{}}}],["fix",{"_index":90,"title":{},"body":{"components/ShowdownComponent.html":{},"index.html":{}}}],["flavor",{"_index":231,"title":{},"body":{"injectables/ShowdownConfig.html":{},"modules/ShowdownModule.html":{},"index.html":{}}}],["flavors",{"_index":441,"title":{},"body":{"index.html":{}}}],["following",{"_index":532,"title":{},"body":{"license.html":{}}}],["foo",{"_index":296,"title":{},"body":{"modules/ShowdownModule.html":{}}}],["forroot",{"_index":292,"title":{},"body":{"modules/ShowdownModule.html":{}}}],["forroot(config",{"_index":293,"title":{},"body":{"modules/ShowdownModule.html":{}}}],["free",{"_index":507,"title":{},"body":{"license.html":{}}}],["full",{"_index":400,"title":{},"body":{"index.html":{}}}],["furnished",{"_index":530,"title":{},"body":{"license.html":{}}}],["g",{"_index":458,"title":{},"body":{"index.html":{}}}],["get(this.src",{"_index":354,"title":{},"body":{"directives/SourceDirective.html":{}}}],["getting",{"_index":383,"title":{"index.html":{},"license.html":{}},"body":{}}],["github",{"_index":232,"title":{},"body":{"injectables/ShowdownConfig.html":{},"modules/ShowdownModule.html":{},"index.html":{}}}],["granted",{"_index":506,"title":{},"body":{"license.html":{}}}],["green",{"_index":429,"title":{},"body":{"index.html":{}}}],["h1",{"_index":404,"title":{},"body":{"index.html":{}}}],["h2",{"_index":405,"title":{},"body":{"index.html":{}}}],["hasownproperty",{"_index":245,"title":{},"body":{"injectables/ShowdownConfig.html":{},"injectables/ShowdownConverter.html":{}}}],["hasownproperty.call(options",{"_index":250,"title":{},"body":{"injectables/ShowdownConfig.html":{},"injectables/ShowdownConverter.html":{}}}],["header",{"_index":36,"title":{},"body":{"components/ShowdownComponent.html":{},"index.html":{}}}],["headerlevelstart",{"_index":87,"title":{},"body":{"components/ShowdownComponent.html":{}}}],["hereby",{"_index":505,"title":{},"body":{"license.html":{}}}],["highlight",{"_index":435,"title":{},"body":{"index.html":{}}}],["highlight.js/styles/default.css",{"_index":436,"title":{},"body":{"index.html":{}}}],["highlightextension",{"_index":434,"title":{},"body":{"index.html":{}}}],["holders",{"_index":553,"title":{},"body":{"license.html":{}}}],["html",{"_index":13,"title":{},"body":{"components/ShowdownComponent.html":{},"injectables/ShowdownConverter.html":{},"pipes/ShowdownPipe.html":{},"directives/SourceDirective.html":{},"index.html":{}}}],["html}\\n",{"_index":262,"title":{},"body":{"injectables/ShowdownConverter.html":{}}}],["http",{"_index":324,"title":{},"body":{"directives/SourceDirective.html":{}}}],["httpclient",{"_index":339,"title":{},"body":{"directives/SourceDirective.html":{},"index.html":{}}}],["httpclientmodule",{"_index":326,"title":{},"body":{"directives/SourceDirective.html":{}}}],["httperrorresponse",{"_index":349,"title":{},"body":{"directives/SourceDirective.html":{}}}],["https://github.com/showdownjs/showdown/blob/master/readme.md#flavors",{"_index":247,"title":{},"body":{"injectables/ShowdownConfig.html":{}}}],["https://unpkg.com/ngx",{"_index":331,"title":{},"body":{"directives/SourceDirective.html":{}}}],["iconverteroptions",{"_index":275,"title":{},"body":{"injectables/ShowdownConverter.html":{}}}],["iconverteroptionschangeable",{"_index":276,"title":{},"body":{"injectables/ShowdownConverter.html":{}}}],["identifier",{"_index":362,"title":{},"body":{"coverage.html":{}}}],["ignore",{"_index":184,"title":{},"body":{"components/ShowdownComponent.html":{},"injectables/ShowdownConfig.html":{},"injectables/ShowdownConverter.html":{},"directives/SourceDirective.html":{}}}],["implements",{"_index":58,"title":{},"body":{"components/ShowdownComponent.html":{},"injectables/ShowdownConfig.html":{},"pipes/ShowdownPipe.html":{},"directives/SourceDirective.html":{}}}],["implied",{"_index":544,"title":{},"body":{"license.html":{}}}],["import",{"_index":18,"title":{},"body":{"components/ShowdownComponent.html":{},"injectables/ShowdownConfig.html":{},"injectables/ShowdownConverter.html":{},"modules/ShowdownModule.html":{},"pipes/ShowdownPipe.html":{},"directives/SourceDirective.html":{},"index.html":{}}}],["imports",{"_index":233,"title":{},"body":{"injectables/ShowdownConfig.html":{},"modules/ShowdownModule.html":{},"directives/SourceDirective.html":{},"index.html":{}}}],["included",{"_index":537,"title":{},"body":{"license.html":{}}}],["including",{"_index":518,"title":{},"body":{"license.html":{}}}],["indentation",{"_index":89,"title":{},"body":{"components/ShowdownComponent.html":{},"index.html":{}}}],["index",{"_index":64,"title":{"index.html":{}},"body":{"components/ShowdownComponent.html":{},"injectables/ShowdownConfig.html":{},"injectables/ShowdownConverter.html":{},"directives/SourceDirective.html":{}}}],["info",{"_index":3,"title":{},"body":{"components/ShowdownComponent.html":{},"injectables/ShowdownConfig.html":{},"injectables/ShowdownConverter.html":{},"modules/ShowdownModule.html":{},"pipes/ShowdownPipe.html":{},"directives/SourceDirective.html":{}}}],["information",{"_index":398,"title":{},"body":{"index.html":{}}}],["init",{"_index":168,"title":{},"body":{"components/ShowdownComponent.html":{},"index.html":{}}}],["init/changes",{"_index":351,"title":{},"body":{"directives/SourceDirective.html":{}}}],["injectable",{"_index":220,"title":{"injectables/ShowdownConfig.html":{},"injectables/ShowdownConverter.html":{}},"body":{"injectables/ShowdownConfig.html":{},"injectables/ShowdownConverter.html":{},"coverage.html":{},"index.html":{}}}],["injectables",{"_index":221,"title":{},"body":{"injectables/ShowdownConfig.html":{},"injectables/ShowdownConverter.html":{},"overview.html":{}}}],["injected",{"_index":422,"title":{},"body":{"index.html":{}}}],["innerhtml",{"_index":197,"title":{},"body":{"components/ShowdownComponent.html":{}}}],["input",{"_index":105,"title":{},"body":{"components/ShowdownComponent.html":{},"directives/SourceDirective.html":{},"index.html":{}}}],["inputs",{"_index":67,"title":{},"body":{"components/ShowdownComponent.html":{},"directives/SourceDirective.html":{}}}],["install",{"_index":392,"title":{},"body":{"index.html":{}}}],["installrun",{"_index":491,"title":{},"body":{"index.html":{}}}],["instance",{"_index":256,"title":{},"body":{"injectables/ShowdownConverter.html":{}}}],["instances",{"_index":303,"title":{},"body":{"modules/ShowdownModule.html":{}}}],["instead",{"_index":188,"title":{},"body":{"components/ShowdownComponent.html":{},"injectables/ShowdownConfig.html":{},"injectables/ShowdownConverter.html":{}}}],["integration",{"_index":386,"title":{},"body":{"index.html":{}}}],["interface",{"_index":147,"title":{},"body":{"components/ShowdownComponent.html":{},"injectables/ShowdownConfig.html":{},"injectables/ShowdownConverter.html":{}}}],["internal",{"_index":133,"title":{},"body":{"components/ShowdownComponent.html":{},"injectables/ShowdownConfig.html":{},"injectables/ShowdownConverter.html":{},"modules/ShowdownModule.html":{},"directives/SourceDirective.html":{}}}],["interpolation",{"_index":462,"title":{},"body":{"index.html":{}}}],["key",{"_index":205,"title":{},"body":{"components/ShowdownComponent.html":{},"injectables/ShowdownConfig.html":{},"injectables/ShowdownConverter.html":{}}}],["keys",{"_index":140,"title":{},"body":{"components/ShowdownComponent.html":{}}}],["kind",{"_index":542,"title":{},"body":{"license.html":{}}}],["lang",{"_index":448,"title":{},"body":{"index.html":{}}}],["legend",{"_index":211,"title":{},"body":{"components/ShowdownComponent.html":{},"modules/ShowdownModule.html":{},"overview.html":{}}}],["liability",{"_index":557,"title":{},"body":{"license.html":{}}}],["liable",{"_index":554,"title":{},"body":{"license.html":{}}}],["library",{"_index":496,"title":{},"body":{"index.html":{}}}],["license",{"_index":497,"title":{"license.html":{}},"body":{"index.html":{},"license.html":{}}}],["licensed",{"_index":501,"title":{},"body":{"index.html":{}}}],["lifecycle",{"_index":166,"title":{},"body":{"components/ShowdownComponent.html":{},"directives/SourceDirective.html":{}}}],["limitation",{"_index":519,"title":{},"body":{"license.html":{}}}],["limited",{"_index":545,"title":{},"body":{"license.html":{}}}],["line:member",{"_index":191,"title":{},"body":{"components/ShowdownComponent.html":{}}}],["link",{"_index":108,"title":{},"body":{"components/ShowdownComponent.html":{},"injectables/ShowdownConfig.html":{},"injectables/ShowdownConverter.html":{},"directives/SourceDirective.html":{}}}],["list",{"_index":52,"title":{},"body":{"components/ShowdownComponent.html":{}}}],["listen",{"_index":449,"title":{},"body":{"index.html":{}}}],["listeners",{"_index":299,"title":{},"body":{"modules/ShowdownModule.html":{}}}],["listening",{"_index":333,"title":{},"body":{"directives/SourceDirective.html":{}}}],["live",{"_index":388,"title":{},"body":{"index.html":{}}}],["load",{"_index":170,"title":{},"body":{"components/ShowdownComponent.html":{},"directives/SourceDirective.html":{},"index.html":{}}}],["load(url",{"_index":346,"title":{},"body":{"directives/SourceDirective.html":{}}}],["loading",{"_index":330,"title":{},"body":{"directives/SourceDirective.html":{},"index.html":{}}}],["loads",{"_index":415,"title":{},"body":{"index.html":{}}}],["made",{"_index":447,"title":{},"body":{"index.html":{}}}],["make",{"_index":323,"title":{},"body":{"directives/SourceDirective.html":{},"index.html":{}}}],["manually",{"_index":433,"title":{},"body":{"index.html":{}}}],["map_option",{"_index":135,"title":{},"body":{"components/ShowdownComponent.html":{}}}],["map_option.hasownproperty(value",{"_index":138,"title":{},"body":{"components/ShowdownComponent.html":{}}}],["map_option[value",{"_index":139,"title":{},"body":{"components/ShowdownComponent.html":{}}}],["markdown",{"_index":12,"title":{},"body":{"components/ShowdownComponent.html":{},"injectables/ShowdownConverter.html":{},"pipes/ShowdownPipe.html":{},"directives/SourceDirective.html":{},"index.html":{}}}],["markdown)\\nhtml",{"_index":261,"title":{},"body":{"injectables/ShowdownConverter.html":{}}}],["matching",{"_index":218,"title":{},"body":{"components/ShowdownComponent.html":{},"injectables/ShowdownConfig.html":{},"injectables/ShowdownConverter.html":{},"modules/ShowdownModule.html":{},"pipes/ShowdownPipe.html":{},"directives/SourceDirective.html":{},"coverage.html":{},"dependencies.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{}}}],["md",{"_index":408,"title":{},"body":{"index.html":{}}}],["merchantability",{"_index":547,"title":{},"body":{"license.html":{}}}],["merge",{"_index":238,"title":{},"body":{"injectables/ShowdownConfig.html":{},"license.html":{}}}],["merge(options",{"_index":242,"title":{},"body":{"injectables/ShowdownConfig.html":{}}}],["merge?(options",{"_index":249,"title":{},"body":{"injectables/ShowdownConfig.html":{}}}],["metadata",{"_index":61,"title":{},"body":{"components/ShowdownComponent.html":{},"pipes/ShowdownPipe.html":{},"directives/SourceDirective.html":{}}}],["method",{"_index":167,"title":{},"body":{"components/ShowdownComponent.html":{},"directives/SourceDirective.html":{}}}],["methods",{"_index":65,"title":{},"body":{"components/ShowdownComponent.html":{},"injectables/ShowdownConfig.html":{},"injectables/ShowdownConverter.html":{},"modules/ShowdownModule.html":{},"pipes/ShowdownPipe.html":{},"directives/SourceDirective.html":{},"index.html":{}}}],["mit",{"_index":503,"title":{},"body":{"index.html":{},"license.html":{}}}],["mixing",{"_index":411,"title":{},"body":{"index.html":{}}}],["modify",{"_index":521,"title":{},"body":{"license.html":{}}}],["module",{"_index":277,"title":{"modules/ShowdownModule.html":{}},"body":{"modules/ShowdownModule.html":{},"overview.html":{}}}],["modules",{"_index":278,"title":{"modules.html":{}},"body":{"modules/ShowdownModule.html":{},"modules.html":{}}}],["modulewithproviders",{"_index":304,"title":{},"body":{"modules/ShowdownModule.html":{}}}],["more",{"_index":397,"title":{},"body":{"index.html":{}}}],["myconverteroptions",{"_index":237,"title":{},"body":{"injectables/ShowdownConfig.html":{}}}],["myshowdownconfig",{"_index":228,"title":{},"body":{"injectables/ShowdownConfig.html":{}}}],["name",{"_index":80,"title":{},"body":{"components/ShowdownComponent.html":{},"injectables/ShowdownConfig.html":{},"injectables/ShowdownConverter.html":{},"modules/ShowdownModule.html":{},"pipes/ShowdownPipe.html":{},"directives/SourceDirective.html":{}}}],["new",{"_index":350,"title":{},"body":{"directives/SourceDirective.html":{},"coverage.html":{},"index.html":{}}}],["next",{"_index":190,"title":{},"body":{"components/ShowdownComponent.html":{}}}],["ngmodel",{"_index":226,"title":{},"body":{"injectables/ShowdownConfig.html":{},"index.html":{}}}],["ngmodule",{"_index":19,"title":{},"body":{"components/ShowdownComponent.html":{},"injectables/ShowdownConverter.html":{},"modules/ShowdownModule.html":{},"pipes/ShowdownPipe.html":{},"directives/SourceDirective.html":{},"index.html":{}}}],["ngonchanges",{"_index":177,"title":{},"body":{"components/ShowdownComponent.html":{},"directives/SourceDirective.html":{}}}],["ngoninit",{"_index":171,"title":{},"body":{"components/ShowdownComponent.html":{}}}],["ngpreservewhitespaces",{"_index":476,"title":{},"body":{"index.html":{}}}],["ngx",{"_index":21,"title":{},"body":{"components/ShowdownComponent.html":{},"injectables/ShowdownConfig.html":{},"injectables/ShowdownConverter.html":{},"modules/ShowdownModule.html":{},"pipes/ShowdownPipe.html":{},"directives/SourceDirective.html":{},"index.html":{}}}],["noheaderid",{"_index":402,"title":{},"body":{"index.html":{}}}],["noninfringement",{"_index":551,"title":{},"body":{"license.html":{}}}],["note",{"_index":443,"title":{},"body":{"index.html":{}}}],["notice",{"_index":535,"title":{},"body":{"license.html":{}}}],["npm",{"_index":393,"title":{},"body":{"index.html":{}}}],["object",{"_index":30,"title":{},"body":{"components/ShowdownComponent.html":{},"injectables/ShowdownConfig.html":{},"injectables/ShowdownConverter.html":{},"index.html":{}}}],["object.defineproperty(showdowncomponent.prototype",{"_index":206,"title":{},"body":{"components/ShowdownComponent.html":{}}}],["object.keys(showdown.getdefaultoptions",{"_index":143,"title":{},"body":{"components/ShowdownComponent.html":{}}}],["obtaining",{"_index":510,"title":{},"body":{"license.html":{}}}],["occur",{"_index":344,"title":{},"body":{"directives/SourceDirective.html":{}}}],["onchanges",{"_index":60,"title":{},"body":{"components/ShowdownComponent.html":{},"directives/SourceDirective.html":{}}}],["oninit",{"_index":59,"title":{},"body":{"components/ShowdownComponent.html":{}}}],["option",{"_index":42,"title":{},"body":{"components/ShowdownComponent.html":{},"index.html":{}}}],["optional",{"_index":82,"title":{},"body":{"components/ShowdownComponent.html":{},"injectables/ShowdownConfig.html":{},"injectables/ShowdownConverter.html":{},"modules/ShowdownModule.html":{},"pipes/ShowdownPipe.html":{},"directives/SourceDirective.html":{}}}],["options",{"_index":29,"title":{},"body":{"components/ShowdownComponent.html":{},"injectables/ShowdownConfig.html":{},"injectables/ShowdownConverter.html":{},"pipes/ShowdownPipe.html":{},"index.html":{}}}],["options(options",{"_index":155,"title":{},"body":{"components/ShowdownComponent.html":{}}}],["options[key",{"_index":252,"title":{},"body":{"injectables/ShowdownConfig.html":{},"injectables/ShowdownConverter.html":{}}}],["options_properties_keys",{"_index":142,"title":{},"body":{"components/ShowdownComponent.html":{}}}],["ordering",{"_index":192,"title":{},"body":{"components/ShowdownComponent.html":{}}}],["original",{"_index":430,"title":{},"body":{"index.html":{}}}],["otherwise",{"_index":562,"title":{},"body":{"license.html":{}}}],["out",{"_index":288,"title":{},"body":{"modules/ShowdownModule.html":{},"license.html":{},"overview.html":{}}}],["output",{"_index":94,"title":{},"body":{"components/ShowdownComponent.html":{},"directives/SourceDirective.html":{},"index.html":{}}}],["outputs",{"_index":336,"title":{},"body":{"directives/SourceDirective.html":{}}}],["override",{"_index":119,"title":{},"body":{"components/ShowdownComponent.html":{},"directives/SourceDirective.html":{},"index.html":{}}}],["overview",{"_index":569,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["package",{"_index":376,"title":{"dependencies.html":{}},"body":{"index.html":{}}}],["padding",{"_index":99,"title":{},"body":{"components/ShowdownComponent.html":{}}}],["param",{"_index":179,"title":{},"body":{"components/ShowdownComponent.html":{},"injectables/ShowdownConfig.html":{},"injectables/ShowdownConverter.html":{},"modules/ShowdownModule.html":{},"pipes/ShowdownPipe.html":{},"directives/SourceDirective.html":{}}}],["parameters",{"_index":79,"title":{},"body":{"components/ShowdownComponent.html":{},"injectables/ShowdownConfig.html":{},"injectables/ShowdownConverter.html":{},"modules/ShowdownModule.html":{},"pipes/ShowdownPipe.html":{},"directives/SourceDirective.html":{}}}],["parse",{"_index":450,"title":{},"body":{"index.html":{}}}],["particular",{"_index":549,"title":{},"body":{"license.html":{}}}],["peer",{"_index":377,"title":{},"body":{"dependencies.html":{},"index.html":{}}}],["permission",{"_index":504,"title":{},"body":{"license.html":{}}}],["permit",{"_index":528,"title":{},"body":{"license.html":{}}}],["person",{"_index":509,"title":{},"body":{"license.html":{}}}],["persons",{"_index":529,"title":{},"body":{"license.html":{}}}],["pipe",{"_index":310,"title":{"pipes/ShowdownPipe.html":{}},"body":{"pipes/ShowdownPipe.html":{},"coverage.html":{},"index.html":{},"overview.html":{}}}],["pipes",{"_index":311,"title":{},"body":{"pipes/ShowdownPipe.html":{}}}],["pipetransform",{"_index":319,"title":{},"body":{"pipes/ShowdownPipe.html":{}}}],["play",{"_index":389,"title":{},"body":{"index.html":{}}}],["plunker",{"_index":391,"title":{},"body":{"index.html":{}}}],["portions",{"_index":539,"title":{},"body":{"license.html":{}}}],["preserve",{"_index":477,"title":{},"body":{"index.html":{}}}],["preview",{"_index":106,"title":{},"body":{"components/ShowdownComponent.html":{}}}],["private",{"_index":157,"title":{},"body":{"components/ShowdownComponent.html":{},"directives/SourceDirective.html":{}}}],["problems",{"_index":480,"title":{},"body":{"index.html":{}}}],["project",{"_index":487,"title":{},"body":{"index.html":{}}}],["properties",{"_index":43,"title":{},"body":{"components/ShowdownComponent.html":{},"injectables/ShowdownConfig.html":{},"index.html":{}}}],["property",{"_index":114,"title":{},"body":{"components/ShowdownComponent.html":{},"index.html":{}}}],["provide",{"_index":235,"title":{},"body":{"injectables/ShowdownConfig.html":{},"modules/ShowdownModule.html":{},"index.html":{}}}],["provided",{"_index":540,"title":{},"body":{"license.html":{}}}],["provider",{"_index":224,"title":{},"body":{"injectables/ShowdownConfig.html":{},"index.html":{}}}],["providers",{"_index":234,"title":{},"body":{"injectables/ShowdownConfig.html":{},"injectables/ShowdownConverter.html":{},"modules/ShowdownModule.html":{},"index.html":{},"overview.html":{}}}],["public",{"_index":66,"title":{},"body":{"components/ShowdownComponent.html":{},"injectables/ShowdownConfig.html":{},"injectables/ShowdownConverter.html":{},"directives/SourceDirective.html":{}}}],["publish",{"_index":522,"title":{},"body":{"license.html":{}}}],["pull",{"_index":483,"title":{},"body":{"index.html":{}}}],["pure",{"_index":320,"title":{},"body":{"pipes/ShowdownPipe.html":{}}}],["purpose",{"_index":550,"title":{},"body":{"license.html":{}}}],["red",{"_index":432,"title":{},"body":{"index.html":{}}}],["reference",{"_index":54,"title":{},"body":{"components/ShowdownComponent.html":{},"directives/SourceDirective.html":{}}}],["regex",{"_index":456,"title":{},"body":{"index.html":{}}}],["regexp('markdown",{"_index":457,"title":{},"body":{"index.html":{}}}],["release",{"_index":494,"title":{},"body":{"index.html":{}}}],["remove",{"_index":475,"title":{},"body":{"index.html":{}}}],["renamed",{"_index":199,"title":{},"body":{"components/ShowdownComponent.html":{},"directives/SourceDirective.html":{}}}],["render",{"_index":11,"title":{},"body":{"components/ShowdownComponent.html":{},"index.html":{}}}],["render(value",{"_index":115,"title":{},"body":{"components/ShowdownComponent.html":{}}}],["replace",{"_index":459,"title":{},"body":{"index.html":{}}}],["request",{"_index":325,"title":{},"body":{"directives/SourceDirective.html":{}}}],["requests",{"_index":484,"title":{},"body":{"index.html":{}}}],["requires",{"_index":410,"title":{},"body":{"index.html":{}}}],["reset",{"_index":287,"title":{},"body":{"modules/ShowdownModule.html":{},"overview.html":{}}}],["responsetype",{"_index":355,"title":{},"body":{"directives/SourceDirective.html":{}}}],["restriction",{"_index":517,"title":{},"body":{"license.html":{}}}],["result",{"_index":118,"title":{},"body":{"components/ShowdownComponent.html":{},"injectables/ShowdownConfig.html":{},"injectables/ShowdownConverter.html":{},"modules/ShowdownModule.html":{},"pipes/ShowdownPipe.html":{},"directives/SourceDirective.html":{},"coverage.html":{},"dependencies.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{}}}],["results",{"_index":219,"title":{},"body":{"components/ShowdownComponent.html":{},"injectables/ShowdownConfig.html":{},"injectables/ShowdownConverter.html":{},"modules/ShowdownModule.html":{},"pipes/ShowdownPipe.html":{},"directives/SourceDirective.html":{},"coverage.html":{},"dependencies.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{}}}],["return",{"_index":153,"title":{},"body":{"components/ShowdownComponent.html":{},"modules/ShowdownModule.html":{},"pipes/ShowdownPipe.html":{},"index.html":{}}}],["returns",{"_index":122,"title":{},"body":{"components/ShowdownComponent.html":{},"injectables/ShowdownConfig.html":{},"injectables/ShowdownConverter.html":{},"modules/ShowdownModule.html":{},"pipes/ShowdownPipe.html":{},"directives/SourceDirective.html":{}}}],["rights",{"_index":520,"title":{},"body":{"license.html":{}}}],["root",{"_index":302,"title":{},"body":{"modules/ShowdownModule.html":{},"index.html":{}}}],["sanitize",{"_index":68,"title":{},"body":{"components/ShowdownComponent.html":{},"index.html":{}}}],["sanitize(sanitize",{"_index":161,"title":{},"body":{"components/ShowdownComponent.html":{}}}],["save",{"_index":395,"title":{},"body":{"index.html":{}}}],["saveand",{"_index":394,"title":{},"body":{"index.html":{}}}],["search",{"_index":452,"title":{},"body":{"index.html":{}}}],["securitycontext",{"_index":128,"title":{},"body":{"components/ShowdownComponent.html":{}}}],["see",{"_index":246,"title":{},"body":{"injectables/ShowdownConfig.html":{},"index.html":{}}}],["selector",{"_index":31,"title":{},"body":{"components/ShowdownComponent.html":{},"pipes/ShowdownPipe.html":{},"directives/SourceDirective.html":{},"index.html":{}}}],["sell",{"_index":526,"title":{},"body":{"license.html":{}}}],["service",{"_index":420,"title":{},"body":{"index.html":{}}}],["set",{"_index":45,"title":{},"body":{"components/ShowdownComponent.html":{},"injectables/ShowdownConfig.html":{},"injectables/ShowdownConverter.html":{},"directives/SourceDirective.html":{},"index.html":{}}}],["set(value",{"_index":207,"title":{},"body":{"components/ShowdownComponent.html":{}}}],["setoptions",{"_index":263,"title":{},"body":{"injectables/ShowdownConverter.html":{}}}],["setoptions(options",{"_index":125,"title":{},"body":{"components/ShowdownComponent.html":{},"injectables/ShowdownConverter.html":{}}}],["setsanitize(sanitize",{"_index":127,"title":{},"body":{"components/ShowdownComponent.html":{}}}],["setshowdown(value",{"_index":124,"title":{},"body":{"components/ShowdownComponent.html":{}}}],["setter",{"_index":144,"title":{},"body":{"components/ShowdownComponent.html":{}}}],["setup",{"_index":15,"title":{},"body":{"components/ShowdownComponent.html":{},"injectables/ShowdownConverter.html":{},"pipes/ShowdownPipe.html":{},"directives/SourceDirective.html":{},"index.html":{}}}],["setvalue?(value",{"_index":195,"title":{},"body":{"components/ShowdownComponent.html":{}}}],["shall",{"_index":536,"title":{},"body":{"license.html":{}}}],["showdown",{"_index":22,"title":{},"body":{"components/ShowdownComponent.html":{},"injectables/ShowdownConfig.html":{},"injectables/ShowdownConverter.html":{},"modules/ShowdownModule.html":{},"pipes/ShowdownPipe.html":{},"directives/SourceDirective.html":{},"dependencies.html":{},"index.html":{}}}],["showdown(value",{"_index":151,"title":{},"body":{"components/ShowdownComponent.html":{}}}],["showdown,[showdown",{"_index":63,"title":{},"body":{"components/ShowdownComponent.html":{}}}],["showdown.component",{"_index":305,"title":{},"body":{"modules/ShowdownModule.html":{},"directives/SourceDirective.html":{}}}],["showdown.converter",{"_index":267,"title":{},"body":{"injectables/ShowdownConverter.html":{}}}],["showdown.converteroptions",{"_index":240,"title":{},"body":{"injectables/ShowdownConfig.html":{},"injectables/ShowdownConverter.html":{},"modules/ShowdownModule.html":{}}}],["showdown.filterextension",{"_index":425,"title":{},"body":{"index.html":{}}}],["showdown.flavor",{"_index":244,"title":{},"body":{"injectables/ShowdownConfig.html":{}}}],["showdown.pipe",{"_index":307,"title":{},"body":{"modules/ShowdownModule.html":{}}}],["showdown.showdownextension",{"_index":455,"title":{},"body":{"index.html":{}}}],["showdown.showdownoptions",{"_index":38,"title":{},"body":{"components/ShowdownComponent.html":{},"injectables/ShowdownConverter.html":{},"pipes/ShowdownPipe.html":{},"index.html":{}}}],["showdown/readme.md",{"_index":332,"title":{},"body":{"directives/SourceDirective.html":{}}}],["showdown:**howdown**load",{"_index":407,"title":{},"body":{"index.html":{}}}],["showdown:options",{"_index":419,"title":{},"body":{"index.html":{}}}],["showdown[src],[showdown][src",{"_index":216,"title":{},"body":{"components/ShowdownComponent.html":{},"directives/SourceDirective.html":{}}}],["showdowncomponent",{"_index":1,"title":{"components/ShowdownComponent.html":{}},"body":{"components/ShowdownComponent.html":{},"modules/ShowdownModule.html":{},"directives/SourceDirective.html":{},"coverage.html":{},"index.html":{}}}],["showdowncomponent#render",{"_index":194,"title":{},"body":{"components/ShowdownComponent.html":{}}}],["showdowncomponent#smartindentationfix",{"_index":187,"title":{},"body":{"components/ShowdownComponent.html":{}}}],["showdowncomponent#value",{"_index":121,"title":{},"body":{"components/ShowdownComponent.html":{},"directives/SourceDirective.html":{}}}],["showdowncomponent.addextension(highlightextension",{"_index":438,"title":{},"body":{"index.html":{}}}],["showdowncomponent.setflavor('ghost",{"_index":439,"title":{},"body":{"index.html":{}}}],["showdowncomponent.setoptions({emoji",{"_index":440,"title":{},"body":{"index.html":{}}}],["showdownconfig",{"_index":76,"title":{"injectables/ShowdownConfig.html":{}},"body":{"components/ShowdownComponent.html":{},"injectables/ShowdownConfig.html":{},"injectables/ShowdownConverter.html":{},"modules/ShowdownModule.html":{},"coverage.html":{},"index.html":{}}}],["showdownconverter",{"_index":57,"title":{"injectables/ShowdownConverter.html":{}},"body":{"components/ShowdownComponent.html":{},"injectables/ShowdownConverter.html":{},"modules/ShowdownModule.html":{},"pipes/ShowdownPipe.html":{},"coverage.html":{},"index.html":{},"overview.html":{}}}],["showdownconverter.makehtml(markdown",{"_index":259,"title":{},"body":{"injectables/ShowdownConverter.html":{}}}],["showdowndirective",{"_index":200,"title":{},"body":{"components/ShowdownComponent.html":{}}}],["showdownmodule",{"_index":227,"title":{"modules/ShowdownModule.html":{}},"body":{"injectables/ShowdownConfig.html":{},"modules/ShowdownModule.html":{},"index.html":{},"modules.html":{},"overview.html":{}}}],["showdownmodule.forroot",{"_index":295,"title":{},"body":{"modules/ShowdownModule.html":{},"index.html":{}}}],["showdownmodule.forroot({emoji",{"_index":401,"title":{},"body":{"index.html":{}}}],["showdownmodule.forroot({extensions",{"_index":460,"title":{},"body":{"index.html":{}}}],["showdownmodule.forroot({flavor",{"_index":442,"title":{},"body":{"index.html":{}}}],["showdownmodule.forroot({underline",{"_index":445,"title":{},"body":{"index.html":{}}}],["showdownpipe",{"_index":306,"title":{"pipes/ShowdownPipe.html":{}},"body":{"modules/ShowdownModule.html":{},"pipes/ShowdownPipe.html":{},"coverage.html":{},"index.html":{}}}],["single",{"_index":41,"title":{},"body":{"components/ShowdownComponent.html":{},"index.html":{}}}],["smartindentationfix",{"_index":39,"title":{},"body":{"components/ShowdownComponent.html":{},"modules/ShowdownModule.html":{},"index.html":{}}}],["software",{"_index":512,"title":{},"body":{"license.html":{}}}],["solid",{"_index":103,"title":{},"body":{"components/ShowdownComponent.html":{}}}],["solution",{"_index":467,"title":{},"body":{"index.html":{}}}],["somecomponent",{"_index":33,"title":{},"body":{"components/ShowdownComponent.html":{},"pipes/ShowdownPipe.html":{},"directives/SourceDirective.html":{},"index.html":{}}}],["someextension",{"_index":454,"title":{},"body":{"index.html":{}}}],["someservice",{"_index":257,"title":{},"body":{"injectables/ShowdownConverter.html":{},"index.html":{}}}],["source",{"_index":4,"title":{},"body":{"components/ShowdownComponent.html":{},"injectables/ShowdownConfig.html":{},"injectables/ShowdownConverter.html":{},"modules/ShowdownModule.html":{},"pipes/ShowdownPipe.html":{},"directives/SourceDirective.html":{},"index.html":{}}}],["source.directive",{"_index":308,"title":{},"body":{"modules/ShowdownModule.html":{}}}],["sourcedirective",{"_index":215,"title":{"directives/SourceDirective.html":{}},"body":{"components/ShowdownComponent.html":{},"modules/ShowdownModule.html":{},"directives/SourceDirective.html":{},"coverage.html":{},"index.html":{}}}],["sourcedirective#src",{"_index":348,"title":{},"body":{"directives/SourceDirective.html":{}}}],["sources",{"_index":412,"title":{},"body":{"index.html":{}}}],["src",{"_index":329,"title":{},"body":{"directives/SourceDirective.html":{},"index.html":{}}}],["src/showdown",{"_index":222,"title":{},"body":{"injectables/ShowdownConfig.html":{},"injectables/ShowdownConverter.html":{},"coverage.html":{}}}],["src/showdown.component.ts",{"_index":8,"title":{},"body":{"components/ShowdownComponent.html":{},"coverage.html":{}}}],["src/showdown.component.ts:126",{"_index":113,"title":{},"body":{"components/ShowdownComponent.html":{}}}],["src/showdown.component.ts:142",{"_index":110,"title":{},"body":{"components/ShowdownComponent.html":{}}}],["src/showdown.component.ts:171",{"_index":85,"title":{},"body":{"components/ShowdownComponent.html":{}}}],["src/showdown.component.ts:175",{"_index":126,"title":{},"body":{"components/ShowdownComponent.html":{}}}],["src/showdown.component.ts:211",{"_index":92,"title":{},"body":{"components/ShowdownComponent.html":{}}}],["src/showdown.component.ts:213",{"_index":78,"title":{},"body":{"components/ShowdownComponent.html":{}}}],["src/showdown.component.ts:248",{"_index":116,"title":{},"body":{"components/ShowdownComponent.html":{}}}],["src/showdown.module.ts",{"_index":289,"title":{},"body":{"modules/ShowdownModule.html":{}}}],["src/showdown.module.ts:59",{"_index":294,"title":{},"body":{"modules/ShowdownModule.html":{}}}],["src/showdown.pipe.ts",{"_index":312,"title":{},"body":{"pipes/ShowdownPipe.html":{},"coverage.html":{}}}],["src/showdown.pipe.ts:55",{"_index":318,"title":{},"body":{"pipes/ShowdownPipe.html":{}}}],["src/source.directive.ts",{"_index":322,"title":{},"body":{"directives/SourceDirective.html":{},"coverage.html":{}}}],["src/source.directive.ts:112",{"_index":347,"title":{},"body":{"directives/SourceDirective.html":{}}}],["src/source.directive.ts:75",{"_index":342,"title":{},"body":{"directives/SourceDirective.html":{}}}],["src/source.directive.ts:87",{"_index":340,"title":{},"body":{"directives/SourceDirective.html":{}}}],["srcdirective",{"_index":359,"title":{},"body":{"directives/SourceDirective.html":{}}}],["stackblitz",{"_index":390,"title":{},"body":{"index.html":{}}}],["standalone",{"_index":16,"title":{},"body":{"components/ShowdownComponent.html":{},"injectables/ShowdownConverter.html":{},"pipes/ShowdownPipe.html":{},"directives/SourceDirective.html":{}}}],["started",{"_index":384,"title":{"index.html":{},"license.html":{}},"body":{}}],["statements",{"_index":363,"title":{},"body":{"coverage.html":{}}}],["static",{"_index":46,"title":{},"body":{"components/ShowdownComponent.html":{},"modules/ShowdownModule.html":{},"directives/SourceDirective.html":{}}}],["string",{"_index":35,"title":{},"body":{"components/ShowdownComponent.html":{},"injectables/ShowdownConverter.html":{},"pipes/ShowdownPipe.html":{},"directives/SourceDirective.html":{},"index.html":{}}}],["styles",{"_index":95,"title":{},"body":{"components/ShowdownComponent.html":{}}}],["subject",{"_index":531,"title":{},"body":{"license.html":{}}}],["sublicense",{"_index":524,"title":{},"body":{"license.html":{}}}],["subscribe((response",{"_index":356,"title":{},"body":{"directives/SourceDirective.html":{}}}],["substantial",{"_index":538,"title":{},"body":{"license.html":{}}}],["super(config",{"_index":165,"title":{},"body":{"components/ShowdownComponent.html":{},"injectables/ShowdownConverter.html":{}}}],["support",{"_index":566,"title":{},"body":{"modules.html":{}}}],["svg",{"_index":567,"title":{},"body":{"modules.html":{}}}],["table",{"_index":375,"title":{},"body":{"coverage.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":374,"title":{},"body":{"coverage.html":{}}}],["template",{"_index":32,"title":{},"body":{"components/ShowdownComponent.html":{},"pipes/ShowdownPipe.html":{},"directives/SourceDirective.html":{},"index.html":{}}}],["test",{"_index":492,"title":{},"body":{"index.html":{}}}],["testbuild",{"_index":493,"title":{},"body":{"index.html":{}}}],["text",{"_index":34,"title":{},"body":{"components/ShowdownComponent.html":{},"pipes/ShowdownPipe.html":{},"directives/SourceDirective.html":{},"index.html":{}}}],["text.replace('$color",{"_index":427,"title":{},"body":{"index.html":{}}}],["this._domsanitizer.sanitize(securitycontext.html",{"_index":182,"title":{},"body":{"components/ShowdownComponent.html":{}}}],["this._elementref.nativeelement.innerhtml",{"_index":183,"title":{},"body":{"components/ShowdownComponent.html":{}}}],["this._elementref.nativeelement.innerhtml.trim",{"_index":173,"title":{},"body":{"components/ShowdownComponent.html":{}}}],["this._sanitize",{"_index":162,"title":{},"body":{"components/ShowdownComponent.html":{}}}],["this._showdowncomponent.render(response",{"_index":357,"title":{},"body":{"directives/SourceDirective.html":{}}}],["this.error.emit(error",{"_index":358,"title":{},"body":{"directives/SourceDirective.html":{}}}],["this.getoptions",{"_index":154,"title":{},"body":{"components/ShowdownComponent.html":{}}}],["this.load",{"_index":352,"title":{},"body":{"directives/SourceDirective.html":{}}}],["this.makehtml(this.value",{"_index":181,"title":{},"body":{"components/ShowdownComponent.html":{}}}],["this.makehtml(value",{"_index":321,"title":{},"body":{"pipes/ShowdownPipe.html":{}}}],["this.merge(options",{"_index":248,"title":{},"body":{"injectables/ShowdownConfig.html":{}}}],["this.render",{"_index":178,"title":{},"body":{"components/ShowdownComponent.html":{}}}],["this.render(this._elementref.nativeelement.innerhtml",{"_index":174,"title":{},"body":{"components/ShowdownComponent.html":{}}}],["this.setflavor((config",{"_index":271,"title":{},"body":{"injectables/ShowdownConverter.html":{}}}],["this.setoption(key",{"_index":208,"title":{},"body":{"components/ShowdownComponent.html":{},"injectables/ShowdownConverter.html":{}}}],["this.setoptions(config",{"_index":274,"title":{},"body":{"injectables/ShowdownConverter.html":{}}}],["this.setoptions(options",{"_index":156,"title":{},"body":{"components/ShowdownComponent.html":{},"pipes/ShowdownPipe.html":{}}}],["this.src",{"_index":353,"title":{},"body":{"directives/SourceDirective.html":{}}}],["this.value",{"_index":152,"title":{},"body":{"components/ShowdownComponent.html":{}}}],["this[key",{"_index":251,"title":{},"body":{"injectables/ShowdownConfig.html":{}}}],["tohtml",{"_index":198,"title":{},"body":{"components/ShowdownComponent.html":{}}}],["tort",{"_index":561,"title":{},"body":{"license.html":{}}}],["transform",{"_index":313,"title":{},"body":{"pipes/ShowdownPipe.html":{},"index.html":{}}}],["transform(value",{"_index":317,"title":{},"body":{"pipes/ShowdownPipe.html":{}}}],["tree",{"_index":6,"title":{},"body":{"components/ShowdownComponent.html":{}}}],["trimeachline",{"_index":193,"title":{},"body":{"components/ShowdownComponent.html":{}}}],["troubleshoot",{"_index":461,"title":{},"body":{"index.html":{}}}],["true",{"_index":40,"title":{},"body":{"components/ShowdownComponent.html":{},"injectables/ShowdownConfig.html":{},"modules/ShowdownModule.html":{},"pipes/ShowdownPipe.html":{},"index.html":{}}}],["tslint:disable",{"_index":189,"title":{},"body":{"components/ShowdownComponent.html":{}}}],["type",{"_index":81,"title":{},"body":{"components/ShowdownComponent.html":{},"injectables/ShowdownConfig.html":{},"injectables/ShowdownConverter.html":{},"modules/ShowdownModule.html":{},"pipes/ShowdownPipe.html":{},"directives/SourceDirective.html":{},"coverage.html":{},"index.html":{}}}],["type:'listener",{"_index":298,"title":{},"body":{"modules/ShowdownModule.html":{}}}],["typeof",{"_index":180,"title":{},"body":{"components/ShowdownComponent.html":{},"injectables/ShowdownConfig.html":{},"directives/SourceDirective.html":{}}}],["types/showdown",{"_index":380,"title":{},"body":{"dependencies.html":{},"index.html":{}}}],["typescript",{"_index":148,"title":{},"body":{"components/ShowdownComponent.html":{},"injectables/ShowdownConfig.html":{},"injectables/ShowdownConverter.html":{},"modules/ShowdownModule.html":{},"pipes/ShowdownPipe.html":{},"directives/SourceDirective.html":{},"index.html":{}}}],["undefined",{"_index":172,"title":{},"body":{"components/ShowdownComponent.html":{}}}],["under",{"_index":502,"title":{},"body":{"index.html":{}}}],["underline",{"_index":316,"title":{},"body":{"pipes/ShowdownPipe.html":{},"index.html":{}}}],["underline__",{"_index":315,"title":{},"body":{"pipes/ShowdownPipe.html":{}}}],["underscore",{"_index":230,"title":{},"body":{"injectables/ShowdownConfig.html":{}}}],["unescaped",{"_index":464,"title":{},"body":{"index.html":{}}}],["url",{"_index":328,"title":{},"body":{"directives/SourceDirective.html":{},"index.html":{}}}],["url..**note",{"_index":409,"title":{},"body":{"index.html":{}}}],["use",{"_index":47,"title":{},"body":{"components/ShowdownComponent.html":{},"injectables/ShowdownConfig.html":{},"injectables/ShowdownConverter.html":{},"directives/SourceDirective.html":{},"index.html":{},"license.html":{}}}],["useclass",{"_index":236,"title":{},"body":{"injectables/ShowdownConfig.html":{}}}],["usevalue",{"_index":309,"title":{},"body":{"modules/ShowdownModule.html":{},"index.html":{}}}],["using",{"_index":463,"title":{},"body":{"index.html":{}}}],["v5",{"_index":186,"title":{},"body":{"components/ShowdownComponent.html":{},"injectables/ShowdownConfig.html":{},"injectables/ShowdownConverter.html":{},"directives/SourceDirective.html":{}}}],["value",{"_index":28,"title":{},"body":{"components/ShowdownComponent.html":{},"pipes/ShowdownPipe.html":{},"index.html":{}}}],["vanilla",{"_index":273,"title":{},"body":{"injectables/ShowdownConverter.html":{},"index.html":{}}}],["var",{"_index":212,"title":{},"body":{"components/ShowdownComponent.html":{}}}],["variable",{"_index":55,"title":{},"body":{"components/ShowdownComponent.html":{},"directives/SourceDirective.html":{}}}],["void",{"_index":123,"title":{},"body":{"components/ShowdownComponent.html":{},"injectables/ShowdownConfig.html":{},"injectables/ShowdownConverter.html":{},"directives/SourceDirective.html":{}}}],["warranties",{"_index":546,"title":{},"body":{"license.html":{}}}],["warranty",{"_index":541,"title":{},"body":{"license.html":{}}}],["welcome",{"_index":485,"title":{},"body":{"index.html":{}}}],["whether",{"_index":558,"title":{},"body":{"license.html":{}}}],["whitespaces",{"_index":472,"title":{},"body":{"index.html":{}}}],["width",{"_index":97,"title":{},"body":{"components/ShowdownComponent.html":{}}}],["without",{"_index":516,"title":{},"body":{"license.html":{}}}],["yarn",{"_index":490,"title":{},"body":{"index.html":{}}}],["yes",{"_index":84,"title":{},"body":{"components/ShowdownComponent.html":{},"injectables/ShowdownConfig.html":{},"injectables/ShowdownConverter.html":{},"pipes/ShowdownPipe.html":{},"directives/SourceDirective.html":{}}}],["yisrael",{"_index":499,"title":{},"body":{"index.html":{},"license.html":{}}}],["zoom",{"_index":286,"title":{},"body":{"modules/ShowdownModule.html":{},"overview.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"components/ShowdownComponent.html":{"url":"components/ShowdownComponent.html","title":"component - ShowdownComponent","body":"\n                   \n\n\n\n\n\n  Components\n  ShowdownComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/showdown.component.ts\n\n\n    \n        Description\n    \n    \n        A angular component for render Markdown to HTML.\nExample\nSetup as standalone\n * import { NgModule } from '@angular/core';\n * import { ShowdownComponent } from 'ngx-showdown';\n *\n * @NgModule({\n *   declarations: [ ShowdownComponent ];\n * })\n * export class AppModule {}\n *Bind markdown value and options object\n * import { Component } from '@angular/core';\n * import * as Showdown from 'showdown';\n *\n * @Component({\n *   selector: 'some',\n *   template: ''\n * })\n * export class SomeComponent {\n *   text: string = `\n     # Some header\n     ---\n     **Some bold**\n   `;\n *   options: Showdown.ShowdownOptions = { smartIndentationFix: true };\n *   // ...\n * }\n *Bind single option (it have properties for all showdown options).\n * # Some text :+1:\n *Set static markdown value.\n * \n *Use as directive on anther element.\n * \n *Static markdown value in the element content.\n * \n *    \n *       # List:\n *       * a\n *            * A\n *       * b\n *    \n * \n *Set template reference variable.\n * \n *Or\n * \n *\n    \n\n    \n        Extends\n    \n    \n            ShowdownConverter\n    \n\n    \n        Implements\n    \n    \n                OnInit\n                OnChanges\n                \n    \n\n\n\n    Metadata\n    \n        \n\n\n\n\n            \n                exportAs\n                showdown\n            \n\n\n\n\n\n\n\n            \n                selector\n                showdown,[showdown]\n            \n\n\n\n            \n                template\n                \n            \n\n\n\n\n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                render\n                            \n                        \n                    \n                \n\n                \n                    \n                        Inputs\n                    \n                \n                \n                    \n                        \n                            \n                                options\n                            \n                            \n                                sanitize\n                            \n                            \n                                showdown\n                            \n                            \n                                value\n                            \n                        \n                    \n                \n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    showdown\n                                \n                                \n                                    options\n                                \n                                \n                                    sanitize\n                                \n                            \n                        \n                    \n        \n    \n\n\n    \n    Constructor\n        \n            \n                \n                    \nconstructor(_elementRef: ElementRef, _domSanitizer?: DomSanitizer, config?: ShowdownConfig)\n                    \n                \n                        \n                            \n                                Defined in src/showdown.component.ts:213\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        _elementRef\n                                                  \n                                                        \n                                                                    ElementRef\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        _domSanitizer\n                                                  \n                                                        \n                                                                    DomSanitizer\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                                \n                                                        config\n                                                  \n                                                        \n                                                                    ShowdownConfig\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n    \n    Inputs\n        \n            \n                \n                    \n                        \n                        options\n                    \n                \n                \n                    \n                        Type :     Showdown.ShowdownOptions\n\n                    \n                \n                        \n                            \n                                    Defined in src/showdown.component.ts:171\n                            \n                        \n                \n                    \n                        The showdown options of the converter.\nExample :\nBind options\n   * import { Component } from '@angular/core';\n   * import * as Showdown from 'showdown';\n   *\n   * @Component({\n   *   selector: `some`,\n   *   template: `# Some Header`\n   * })\n   * export class SomeComponent {\n   *   options: Showdown.ShowdownOptions = {headerLevelStart: 3};\n   *   // ...\n   * }\n   *Or\n   *  # Indentation Fix\n   *\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        sanitize\n                    \n                \n                \n                    \n                        Type :     boolean\n\n                    \n                \n                        \n                            \n                                    Defined in src/showdown.component.ts:211\n                            \n                        \n                \n                    \n                        Enables html sanitize, it will sanitize the converter html output by DomSanitizer.\nExample :\n   * import { Component } from '@angular/core';\n   *\n   * @Component({\n   *   selector: 'some',\n   *   styles: [`.box { width: 95%; padding: 5px; border: 1px solid black;}`],\n   *   template: `\n     Input\n     \n      Sanitize\n     Markdown\n     {{ text }}\n     Preview\n     \n       \n     \n   `;\n   * })\n   * export class SomeComponent {\n   *    text: string = `# A cool link\nclick me`;\n   * }\n   *\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        showdown\n                    \n                \n                \n                    \n                        Type :     string\n\n                    \n                \n                        \n                            \n                                    Defined in src/showdown.component.ts:142\n                            \n                        \n                \n                    \n                        Input alias to value.\nExample :\n   * \n   *Equivalent to\n   * \n   *\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        value\n                    \n                \n                \n                    \n                        Type :     string\n\n                    \n                \n                        \n                            \n                                    Defined in src/showdown.component.ts:126\n                            \n                        \n                \n                    \n                        The input markdown value.\nExample :\nSet some static markdown value.\n   * \n   *Bind property with markdown value.\n   * \n   * \n   *\n                    \n                \n            \n        \n\n\n\n\n    \n    \n        \n            Methods\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            render\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        render(value?: string)\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/showdown.component.ts:248\n                            \n                        \n\n\n                \n                    \n                            Convert the markdown value of ShowdownComponent to html and set the html result to the element content.\nExample :\n   * # Some Header\n   * \n   *\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        value\n                                                        \n                                                                    string\n                                                        \n                                                    \n                                                    \n                                                            Yes\n                                                    \n                                                    \n\n                                                        \n                                                                \nA markdown value to render (it will override the current value of ShowdownComponent#value)\n\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     void\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n\n\n\n    \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        showdown\n                    \n                \n\n\n                \n                    \n                        setshowdown(value: string)\n                    \n                \n                            \n                                \n                                    Defined in src/showdown.component.ts:142\n                                \n                            \n                    \n                        \n                                Input alias to value.\nExample :\n   * \n   *Equivalent to\n   * \n   *\n\n                                \n                                        Parameters :\n                                        \n                                            \n                                                \n                                                    Name\n                                                        Type\n                                                    Optional\n                                                \n                                            \n                                            \n                                                    \n                                                            value\n                                                    \n                                                            \n                                                                        string\n                                                            \n                                                    \n                                                        \n                                                                No\n                                                        \n                                                        \n                                                    \n                                            \n                                        \n                                \n                                \n                                \n                                \n                                    Returns :     void\n\n                                \n                        \n                    \n            \n        \n        \n            \n                \n                    \n                        \n                        options\n                    \n                \n\n\n                \n                    \n                        setoptions(options)\n                    \n                \n                            \n                                \n                                    Defined in src/showdown.component.ts:175\n                                \n                            \n                    \n                        \n\n                                \n                                        Parameters :\n                                        \n                                            \n                                                \n                                                    Name\n                                                    Optional\n                                                \n                                            \n                                            \n                                                    \n                                                            options\n                                                    \n                                                    \n                                                        \n                                                                No\n                                                        \n                                                        \n                                                    \n                                            \n                                        \n                                \n                                \n                                \n                                \n                                    Returns :     void\n\n                                \n                        \n                    \n            \n        \n        \n            \n                \n                    \n                        \n                        sanitize\n                    \n                \n\n\n                \n                    \n                        setsanitize(sanitize: boolean)\n                    \n                \n                            \n                                \n                                    Defined in src/showdown.component.ts:211\n                                \n                            \n                    \n                        \n                                Enables html sanitize, it will sanitize the converter html output by DomSanitizer.\nExample :\n   * import { Component } from '@angular/core';\n   *\n   * @Component({\n   *   selector: 'some',\n   *   styles: [`.box { width: 95%; padding: 5px; border: 1px solid black;}`],\n   *   template: `\n     Input\n     \n      Sanitize\n     Markdown\n     {{ text }}\n     Preview\n     \n       \n     \n   `;\n   * })\n   * export class SomeComponent {\n   *    text: string = `# A cool link\nclick me`;\n   * }\n   *\n\n                                \n                                        Parameters :\n                                        \n                                            \n                                                \n                                                    Name\n                                                        Type\n                                                    Optional\n                                                \n                                            \n                                            \n                                                    \n                                                            sanitize\n                                                    \n                                                            \n                                                                        boolean\n                                                            \n                                                    \n                                                        \n                                                                No\n                                                        \n                                                        \n                                                    \n                                            \n                                        \n                                \n                                \n                                \n                                \n                                    Returns :     void\n\n                                \n                        \n                    \n            \n        \n\n\n\n\n    \n        import { Component, ElementRef, Input, OnChanges, OnInit, Optional, SecurityContext } from '@angular/core';\nimport { DomSanitizer } from '@angular/platform-browser';\nimport * as Showdown from 'showdown';\nimport { ShowdownConfig } from './showdown-config.provider';\nimport { ShowdownConverter } from './showdown-converter.provider';\n\n/**\n * @internal\n */\nconst MAP_OPTION = {\n  '': true,\n  true: true,\n  false: false\n};\n\n/**\n * @internal\n */\nlet _toOption = (value: any) => MAP_OPTION.hasOwnProperty(value) ? MAP_OPTION[value] : value;\n\n/**\n * The options keys for the dynamic properties set\n * @internal\n */\nconst OPTIONS_PROPERTIES_KEYS: string[] = Object.keys(Showdown.getDefaultOptions());\n\n// For the options setter properties that dynamic definition (the code after the class)\nexport interface ShowdownComponent extends Showdown.ShowdownOptions {\n}\n\n/**\n * A angular component for render `Markdown` to `HTML`.\n *\n * ### Example\n *\n * Setup as standalone\n * ```typescript\n * import { NgModule } from '@angular/core';\n * import { ShowdownComponent } from 'ngx-showdown';\n *\n * @NgModule({\n *   declarations: [ ShowdownComponent ];\n * })\n * export class AppModule {}\n * ```\n *\n * Bind markdown value and options object\n * ```typescript\n * import { Component } from '@angular/core';\n * import * as Showdown from 'showdown';\n *\n * @Component({\n *   selector: 'some',\n *   template: ''\n * })\n * export class SomeComponent {\n *   text: string = `\n *     # Some header\n *     ---\n *     **Some bold**\n *   `;\n *   options: Showdown.ShowdownOptions = { smartIndentationFix: true };\n *   // ...\n * }\n * ```\n * Bind single option (it have properties for all showdown options).\n * ```html\n * # Some text :+1:\n * ```\n *\n * Set static markdown value.\n * ```html\n * \n * ```\n *\n * Use as directive on anther element.\n * ```html\n * \n * ```\n *\n * Static markdown value in the element content.\n * ```html\n * \n *    \n *       # List:\n *       * a\n *            * A\n *       * b\n *    \n * \n * ```\n *\n * Set template reference variable.\n * ```html\n * \n * ```\n * Or\n * ```html\n * \n * ```\n */\n@Component({\n  selector: 'showdown,[showdown]',\n  template: '',\n  exportAs: 'showdown',\n  inputs: OPTIONS_PROPERTIES_KEYS\n})\nexport class ShowdownComponent extends ShowdownConverter implements OnInit, OnChanges, Showdown.ShowdownOptions {\n\n  /**\n   * The input markdown value.\n   *\n   * __Example :__\n   *\n   * Set some static markdown value.\n   * ```html\n   * \n   * ```\n   *\n   * Bind property with markdown value.\n   * ```html\n   * \n   * \n   * ```\n   */\n  @Input() value: string;\n\n  /**\n   * Input alias to `value`.\n   *\n   * __Example :__\n   *\n   * ```html\n   * \n   * ```\n   *\n   * Equivalent to\n   * ```html\n   * \n   * ```\n   */\n  @Input() set showdown(value: string) {\n    this.value = value;\n  }\n\n  /**\n   * The showdown options of the converter.\n   *\n   * __Example :__\n   *\n   * Bind options\n   * ```typescript\n   * import { Component } from '@angular/core';\n   * import * as Showdown from 'showdown';\n   *\n   * @Component({\n   *   selector: `some`,\n   *   template: `# Some Header`\n   * })\n   * export class SomeComponent {\n   *   options: Showdown.ShowdownOptions = {headerLevelStart: 3};\n   *   // ...\n   * }\n   * ```\n   * Or\n   * ```html\n   *  # Indentation Fix\n   * ```\n   */\n  @Input()\n  get options(): Showdown.ShowdownOptions {\n    return this.getOptions();\n  }\n\n  set options(options: Showdown.ShowdownOptions) {\n    this.setOptions(options);\n  }\n\n  private _sanitize: boolean;\n\n  /**\n   * Enables html sanitize, it will sanitize the converter html output by [`DomSanitizer`](https://angular.io/api/platform-browser/DomSanitizer#sanitize).\n   *\n   * __Example :__\n   *\n   * ```typescript\n   * import { Component } from '@angular/core';\n   *\n   * @Component({\n   *   selector: 'some',\n   *   styles: [`.box { width: 95%; padding: 5px; border: 1px solid black;}`],\n   *   template: `\n   *     Input\n   *     \n   *      Sanitize\n   *     Markdown\n   *     {{ text }}\n   *     Preview\n   *     \n   *       \n   *     \n   *   `;\n   * })\n   * export class SomeComponent {\n   *    text: string = `# A cool link\n   * click me`;\n   * }\n   * ```\n   */\n  @Input()\n  set sanitize(sanitize: boolean) {\n    this._sanitize = _toOption(sanitize);\n  }\n\n  constructor(private _elementRef: ElementRef, @Optional() private _domSanitizer?: DomSanitizer, @Optional() config?: ShowdownConfig) {\n    super(config);\n  }\n\n  /**\n   * A angular lifecycle method, Use on init to check if it `content` type and load the element `content` to `value`.\n   * @internal\n   */\n  ngOnInit(): void {\n    if (this.value === undefined && this._elementRef.nativeElement.innerHTML.trim() !== '') {\n      this.render(this._elementRef.nativeElement.innerHTML);\n    }\n  }\n\n  /**\n   * A angular lifecycle method, Use to call to render method after changes.\n   * @internal\n   */\n  ngOnChanges(): void {\n    this.render();\n  }\n\n  /**\n   * Convert the markdown value of {@link ShowdownComponent#value} to html and set the html result to the element content.\n   *\n   * __Example :__\n   *\n   * ```html\n   * # Some Header\n   * \n   * ```\n   * @param value - A markdown value to render (it will override the current value of `ShowdownComponent#value`)\n   */\n  public render(value?: string): void {\n    if (typeof value === 'string') {\n      this.value = value;\n    }\n\n    if (typeof this.value === 'string') {\n      let result = this.makeHtml(this.value);\n\n      if (this._sanitize) {\n        result = this._domSanitizer.sanitize(SecurityContext.HTML, result);\n      }\n\n      this._elementRef.nativeElement.innerHTML = result;\n    }\n  }\n\n  /**\n   * @ignore\n   * @deprecated from v5, use {@link ShowdownComponent#smartIndentationFix} instead.\n   */\n  // tslint:disable-next-line:member-ordering\n  trimEachLine;\n\n  /**\n   * @ignore\n   * @deprecated from v5,  use {@link ShowdownComponent#render} method instead.\n   */\n  setValue?(value: string): void;\n\n  /**\n   * @ignore\n   * @deprecated from v5, use {@link ShowdownComponent#render} method instead.\n   */\n  compile?(): void;\n\n  /**\n   * @ignore\n   * @deprecated from v5, use `innerHTML` property of the element instead.\n   */\n  toHTML?(): string;\n\n}\n\n/**\n * @ignore\n * @deprecated from v5, renamed `ShowdownDirective` to {@link ShowdownComponent}.\n */\nexport declare let ShowdownDirective: typeof ShowdownComponent;\n\n// Define options properties setter for angular directive and direct access\nfor (let key of OPTIONS_PROPERTIES_KEYS) {\n  Object.defineProperty(ShowdownComponent.prototype, key, {\n    set(value: any): void {\n      this.setOption(key, _toOption(value));\n    },\n    configurable: true\n  });\n}\n\n    \n\n\n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = ''\n    var COMPONENTS = [{'name': 'ShowdownComponent', 'selector': 'showdown,[showdown]'}];\n    var DIRECTIVES = [{'name': 'SourceDirective', 'selector': 'showdown[src],[showdown][src]'}];\n    var ACTUAL_COMPONENT = {'name': 'ShowdownComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/ShowdownConfig.html":{"url":"injectables/ShowdownConfig.html","title":"injectable - ShowdownConfig","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  ShowdownConfig\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/showdown-config.provider.ts\n        \n\n            \n                Description\n            \n            \n                A config provider\nExample\nSet custom config provider.\n * import { NgModel } from '@angular/core';\n * import { ShowdownModule, ShowdownConfig } from 'ngx-showdown';\n *\n * export class MyShowdownConfig extends ShowdownConfig {\n *   emoji = true;\n *   underscore = false;\n *   flavor = 'github';\n * }\n *\n * @NgModel({\n *   imports: [ ShowdownModule ],\n *   providers: [ {provide: ShowdownConfig, useClass: MyConverterOptions} ]\n * })\n * export class AppModule {}\n *\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Optional\n                                flavor\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Optional\n                                merge\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(options?: ShowdownConfig | Showdown.ConverterOptions)\n                    \n                \n                        \n                            \n                                Defined in src/showdown-config.provider.ts:41\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        options\n                                                  \n                                                        \n                                                                    ShowdownConfig | Showdown.ConverterOptions\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Methods\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                                Optional\n                            merge\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        merge(options: ShowdownConfig | Showdown.ConverterOptions)\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/showdown-config.provider.ts:52\n                            \n                        \n\n\n                \n                    \n                            Merge options\n\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        options\n                                                        \n                                                                    ShowdownConfig | Showdown.ConverterOptions\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                        \n                                                                \nA options object to merge.\n\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     void\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Optional\n                            flavor\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     Showdown.Flavor\n\n                        \n                    \n                        \n                            \n                                    Defined in src/showdown-config.provider.ts:41\n                            \n                        \n\n\n            \n        \n\n\n    \n\n\n    \n        import { Injectable } from '@angular/core';\nimport * as Showdown from 'showdown';\n\n/**\n * @internal\n */\nlet {hasOwnProperty} = {};\n\nexport interface ShowdownConfig extends Showdown.ConverterOptions {\n}\n\n/**\n * A config provider\n *\n * ### Example\n *\n * Set custom config provider.\n * ```typescript\n * import { NgModel } from '@angular/core';\n * import { ShowdownModule, ShowdownConfig } from 'ngx-showdown';\n *\n * export class MyShowdownConfig extends ShowdownConfig {\n *   emoji = true;\n *   underscore = false;\n *   flavor = 'github';\n * }\n *\n * @NgModel({\n *   imports: [ ShowdownModule ],\n *   providers: [ {provide: ShowdownConfig, useClass: MyConverterOptions} ]\n * })\n * export class AppModule {}\n * ```\n */\n@Injectable()\nexport class ShowdownConfig implements Showdown.ConverterOptions {\n\n  /**\n   * @see https://github.com/showdownjs/showdown/blob/master/README.md#flavors\n   */\n  flavor?: Showdown.Flavor;\n\n  constructor(options?: ShowdownConfig | Showdown.ConverterOptions) {\n    this.merge(options);\n  }\n\n  /**\n   * Merge options\n   *\n   * @param options - A options object to merge.\n   */\n  public merge?(options: ShowdownConfig | Showdown.ConverterOptions) {\n    for (let key in options) {\n      if (hasOwnProperty.call(options, key)) {\n        this[key] = options[key];\n      }\n    }\n  }\n\n}\n\n/**\n * @ignore\n * @deprecated from v5, use {@link ShowdownConfig} or {@link Showdown.ConverterOptions} instead.\n */\nexport declare let ConverterOptions: typeof ShowdownConfig;\n\n/**\n * @ignore\n * @deprecated from v5, use {@link ShowdownConfig} or {@link Showdown.ConverterOptions} instead.\n */\nexport declare let BaseConverterOptions: typeof ShowdownConfig;\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/ShowdownConverter.html":{"url":"injectables/ShowdownConverter.html","title":"injectable - ShowdownConverter","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  ShowdownConverter\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/showdown-converter.provider.ts\n        \n\n            \n                Description\n            \n            \n                Example\nSetup as standalone\n * import { NgModule } from '@angular/core';\n * import { ShowdownConverter } from 'ngx-showdown';\n *\n * @NgModule({\n *   providers: [ ShowdownConverter ];\n * })\n * export class AppModule {}\n *Use the converter instance.\n * import { Injectable } from '@angular/core';\n * import { ShowdownConverter } from 'ngx-showdown';\n *\n * @Injectable()\n * export class SomeService {\n *   constructor(showdownConverter: ShowdownConverter) {\n *     let markdown: string = \"**Some**\";\n *     let html: string = showdownConverter.makeHtml(markdown);\n *     console.log(`some:\\nmarkdown: ${markdown)\\nhtml: ${html}\\n`);\n *   }\n * }\n *\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                setOptions\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(config?: ShowdownConfig)\n                    \n                \n                        \n                            \n                                Defined in src/showdown-converter.provider.ts:40\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        config\n                                                  \n                                                        \n                                                                    ShowdownConfig\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Methods\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            setOptions\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        setOptions(options: Showdown.ShowdownOptions)\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/showdown-converter.provider.ts:53\n                            \n                        \n\n\n                \n                    \n                            Set options to the converter.\n\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        options\n                                                        \n                                                                    Showdown.ShowdownOptions\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                        \n                                                                \nA options object to set.\n\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     void\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n\n\n\n    \n\n\n    \n        import { Injectable, Optional } from '@angular/core';\nimport * as Showdown from 'showdown';\nimport { ShowdownConfig } from './showdown-config.provider';\n\n/**\n * @internal\n */\nlet {hasOwnProperty} = {};\n\n/**\n * ### Example\n *\n * Setup as standalone\n * ```typescript\n * import { NgModule } from '@angular/core';\n * import { ShowdownConverter } from 'ngx-showdown';\n *\n * @NgModule({\n *   providers: [ ShowdownConverter ];\n * })\n * export class AppModule {}\n * ```\n *\n * Use the converter instance.\n * ```typescript\n * import { Injectable } from '@angular/core';\n * import { ShowdownConverter } from 'ngx-showdown';\n *\n * @Injectable()\n * export class SomeService {\n *   constructor(showdownConverter: ShowdownConverter) {\n *     let markdown: string = \"**Some**\";\n *     let html: string = showdownConverter.makeHtml(markdown);\n *     console.log(`some:\\nmarkdown: ${markdown)\\nhtml: ${html}\\n`);\n *   }\n * }\n * ```\n */\n@Injectable()\nexport class ShowdownConverter extends Showdown.Converter {\n\n  constructor(@Optional() config?: ShowdownConfig) {\n    super(config && {extensions: config.extensions});\n    this.setFlavor((config && config.flavor) || 'vanilla');\n    this.setOptions(config);\n  }\n\n  /**\n   * Set options to the converter.\n   *\n   * @param options - A options object to set.\n   */\n  public setOptions(options: Showdown.ShowdownOptions): void {\n    for (let key in options) {\n      if (hasOwnProperty.call(options, key)) {\n        this.setOption(key, options[key]);\n      }\n    }\n  }\n\n}\n\n/**\n * @ignore\n * @deprecated from v5, use {@link Showdown.ConverterOptions} instead.\n */\nexport interface IConverterOptions extends Showdown.ConverterOptions {\n}\n\n/**\n * @ignore\n * @deprecated from v5, use {@link Showdown.ShowdownOptions} instead.\n */\nexport interface IConverterOptionsChangeable extends Showdown.ShowdownOptions {\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/ShowdownModule.html":{"url":"modules/ShowdownModule.html","title":"module - ShowdownModule","body":"\n                   \n\n\n\n\n    Modules\n    ShowdownModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_ShowdownModule\n\n\n\ncluster_ShowdownModule_declarations\n\n\n\ncluster_ShowdownModule_exports\n\n\n\ncluster_ShowdownModule_providers\n\n\n\n\nDECLARATIONS\n\nDECLARATIONS\n\n\n\nShowdownModule\n\nShowdownModule\n\nShowdownModule -->\n\nDECLARATIONS->ShowdownModule\n\n\n\n\n\nDECLARATIONS \n\nDECLARATIONS \n\nDECLARATIONS  -->\n\nShowdownModule->DECLARATIONS \n\n\n\n\n\nShowdownConverter\n\nShowdownConverter\n\nShowdownModule -->\n\nShowdownConverter->ShowdownModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/showdown.module.ts\n        \n\n\n        \n            Description\n        \n        \n            Example\nAdd ShowdownModule to app imports.\n * import { NgModule } from '@angular/core';\n * import { ShowdownModule } from 'ngx-showdown';\n *\n * @NgModule({\n *   imports: [ ShowdownModule ];\n * })\n * export class AppModule {}\n *\n        \n\n\n        \n            \n                \n                    Declarations\n                    \n                        \n                            DECLARATIONS\n                        \n                    \n                \n                \n                    Providers\n                    \n                        \n                            ShowdownConverter\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            DECLARATIONS\n                        \n                    \n                \n            \n        \n\n        \n    \n        \n            Methods\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Static\n                            forRoot\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        forRoot(config: ShowdownConfig | Showdown.ConverterOptions)\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/showdown.module.ts:59\n                            \n                        \n\n\n                \n                    \n                            Example :\nAdd ShowdownModule to app imports with config.\n   * import { NgModule } from '@angular/core';\n   * import { ShowdownModule } from 'ngx-showdown';\n   *\n   * @NgModule({\n   *   imports: [ ShowdownModule.forRoot({\n   *     smartIndentationFix: true,\n   *     foo: 'bar',\n   *     flavor: 'github',\n   *     extensions: [ {type:'listener', listeners: {'codeBlocks.after': console.log}} ]\n   *   }) ];\n   * })\n   * export class AppModule {}\n   *\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        config\n                                                        \n                                                                    ShowdownConfig | Showdown.ConverterOptions\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                        \n                                                                \nA root converter config for all converter instances.\n\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     ModuleWithProviders\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { ModuleWithProviders, NgModule } from '@angular/core';\nimport * as Showdown from 'showdown';\nimport { ShowdownConfig } from './showdown-config.provider';\nimport { ShowdownConverter } from './showdown-converter.provider';\nimport { ShowdownComponent } from './showdown.component';\nimport { ShowdownPipe } from './showdown.pipe';\nimport { SourceDirective } from './source.directive';\n\n/**\n * @internal\n */\nconst DECLARATIONS = [\n  ShowdownComponent,\n  ShowdownPipe,\n  SourceDirective\n];\n\n/**\n * ### Example\n *\n * Add `ShowdownModule` to app `imports`.\n * ```typescript\n * import { NgModule } from '@angular/core';\n * import { ShowdownModule } from 'ngx-showdown';\n *\n * @NgModule({\n *   imports: [ ShowdownModule ];\n * })\n * export class AppModule {}\n * ```\n */\n@NgModule({\n  declarations: DECLARATIONS,\n  providers: [ShowdownConverter],\n  exports: DECLARATIONS\n})\nexport class ShowdownModule {\n\n  /**\n   * __Example :__\n   *\n   * Add `ShowdownModule` to app `imports` with config.\n   * ```typescript\n   * import { NgModule } from '@angular/core';\n   * import { ShowdownModule } from 'ngx-showdown';\n   *\n   * @NgModule({\n   *   imports: [ ShowdownModule.forRoot({\n   *     smartIndentationFix: true,\n   *     foo: 'bar',\n   *     flavor: 'github',\n   *     extensions: [ {type:'listener', listeners: {'codeBlocks.after': console.log}} ]\n   *   }) ];\n   * })\n   * export class AppModule {}\n   * ```\n   * @param config - A root converter config for all converter instances.\n   */\n  static forRoot(config: ShowdownConfig | Showdown.ConverterOptions): ModuleWithProviders {\n    return {\n      ngModule: ShowdownModule,\n      providers: [{provide: ShowdownConfig, useValue: config}]\n    };\n  }\n\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"pipes/ShowdownPipe.html":{"url":"pipes/ShowdownPipe.html","title":"pipe - ShowdownPipe","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n  Pipes\n  ShowdownPipe\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n\n        \n            File\n        \n        \n            src/showdown.pipe.ts\n        \n\n            \n                Description\n            \n            \n                A angular pipe to transform Markdown to HTML.\nExample\nSetup as standalone\n * import { NgModule } from '@angular/core';\n * import { ShowdownPipe } from 'ngx-showdown';\n *\n * @NgModule({\n *   declarations: [ ShowdownPipe ];\n * })\n * export class AppModule {}\n *Transform markdown value to html.\n * \n * \n *Transform markdown value to html with options.\n * import * as Showdown from 'showdown';\n *\n * @Component({\n *   selector: 'some',\n *   template: ``\n * })\n * export class SomeComponent {\n *   text: string = \"__Some Underline__\";\n *   options: Showdown.ShowdownOptions = { underline: true };\n *   // ...\n * }\n *\n            \n\n\n        \n            Metadata\n            \n                \n                    \n                        Name\n                        showdown\n                    \n                \n            \n        \n\n            \n    \n        \n            Methods\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            transform\n                            \n                            \n                        \n                    \n                \n                \n                    \ntransform(value: string, options?: Showdown.ShowdownOptions)\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/showdown.pipe.ts:55\n                            \n                        \n\n\n                \n                    \n                            Transform markdown value to html.\n\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        value\n                                                        \n                                                                    string\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                        \n                                                                \nThe markdown value to transform to html.\n\n\n                                                        \n                                                \n                                                \n                                                        options\n                                                        \n                                                                    Showdown.ShowdownOptions\n                                                        \n                                                    \n                                                    \n                                                            Yes\n                                                    \n                                                    \n\n                                                        \n                                                                \nA Showdown converter options.\n\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     string\n\n                            \n                                \n                                    Returns the transform result of value to html.\n\n                                \n                    \n                \n            \n        \n\n\n\n    \n\n\n    \n        import { Pipe, PipeTransform } from '@angular/core';\nimport * as Showdown from 'showdown';\nimport { ShowdownConverter } from './showdown-converter.provider';\n\n/**\n * A angular pipe to transform `Markdown` to `HTML`.\n *\n * ### Example\n *\n * Setup as standalone\n * ```typescript\n * import { NgModule } from '@angular/core';\n * import { ShowdownPipe } from 'ngx-showdown';\n *\n * @NgModule({\n *   declarations: [ ShowdownPipe ];\n * })\n * export class AppModule {}\n * ```\n *\n * Transform markdown value to html.\n * ```html\n * \n * \n * ```\n *\n * Transform markdown value to html with `options`.\n * ```typescript\n * import * as Showdown from 'showdown';\n *\n * @Component({\n *   selector: 'some',\n *   template: ``\n * })\n * export class SomeComponent {\n *   text: string = \"__Some Underline__\";\n *   options: Showdown.ShowdownOptions = { underline: true };\n *   // ...\n * }\n * ```\n */\n@Pipe({\n  name: 'showdown',\n  pure: false\n})\nexport class ShowdownPipe extends ShowdownConverter implements PipeTransform {\n\n  /**\n   * Transform markdown value to html.\n   *\n   * @param value - The markdown value to transform to html.\n   * @param options - A `Showdown` converter options.\n   * @returns Returns the transform result of `value` to html.\n   */\n  transform(value: string, options?: Showdown.ShowdownOptions): string {\n    this.setOptions(options);\n    return this.makeHtml(value);\n  }\n\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"directives/SourceDirective.html":{"url":"directives/SourceDirective.html","title":"directive - SourceDirective","body":"\n                   \n\n\n\n\n\n\n\n  Directives\n  SourceDirective\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/source.directive.ts\n        \n\n            \n                Description\n            \n            \n                A angular directive to ShowdownComponent for make http request of markdown content.\nExample\nSetup as standalone\n * import { NgModule } from '@angular/core';\n * import { HttpClientModule } from '@angular/common/http';\n * import { ShowdownComponent, SourceDirective } from 'ngx-showdown';\n *\n * @NgModule({\n *    declarations: [ ShowdownComponent, SourceDirective ],\n *    imports: [ HttpClientModule ]\n * })\n * export class AppModule {}\n *Bind url src directive\n * import { Component } from '@angular/core';\n *\n * @Component({\n *     selector: 'some',\n *     template: '**Loading...**\n * })\n * class SomeComponent {\n *     url: string = 'https://unpkg.com/ngx-showdown/README.md';\n *     // ...\n * }\n *Set static url\n * \n *Set template reference variable\n * \n *Listening to error events.\n * \n *\n            \n\n            \n                Implements\n            \n            \n                        OnChanges\n            \n\n\n        \n            Metadata\n            \n                \n\n                    \n                        Selector\n                        showdown[src],[showdown][src]\n                    \n\n                \n            \n        \n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                load\n                            \n                        \n                    \n                \n\n                \n                    \n                        Inputs\n                    \n                \n                \n                    \n                        \n                            \n                                src\n                            \n                        \n                    \n                \n\n                \n                    \n                        Outputs\n                    \n                \n                \n                    \n                        \n                            \n                                error\n                            \n                        \n                    \n                \n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(_showdownComponent: ShowdownComponent, _http: HttpClient)\n                    \n                \n                        \n                            \n                                Defined in src/source.directive.ts:87\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        _showdownComponent\n                                                  \n                                                        \n                                                                    ShowdownComponent\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        _http\n                                                  \n                                                        \n                                                                    HttpClient\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    Inputs\n        \n            \n                \n                    \n                        \n                        src\n                    \n                \n                \n                    \n                        Type :     string\n\n                    \n                \n                        \n                            \n                                    Defined in src/source.directive.ts:75\n                            \n                        \n                \n                    \n                        The source url of the markdown content.\nExample :\nSet static url to src directive.\n   * \n   *Bind url to src directive.\n   * \n   * Load\n   * **Loading...**\n   *\n                    \n                \n            \n        \n\n            \n    Outputs\n        \n            \n                \n                    \n                        \n                        error\n                    \n                \n                \n                    \n                        Type :     EventEmitter\n\n                    \n                \n                        \n                            \n                                    Defined in src/source.directive.ts:87\n                            \n                        \n                \n                    \n                        On error occur.\nExample :\n   * \n   *  '+$event.message)\">**Loading...**\n   *\n                    \n                \n            \n        \n\n\n\n            \n    \n        \n            Methods\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            load\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        load(url?: string)\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/source.directive.ts:112\n                            \n                        \n\n\n                \n                    \n                            Load the markdown content of SourceDirective url to ShowdownComponent.\nExample :\n   * \n   * Load\n   * \n   *\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        url\n                                                        \n                                                                    string\n                                                        \n                                                    \n                                                    \n                                                            Yes\n                                                    \n                                                    \n\n                                                        \n                                                                \nA url of markdown content to load (it will override the current url of SourceDirective#src)\n\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     void\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n\n\n\n\n    \n\n\n    \n        import { HttpClient, HttpErrorResponse } from '@angular/common/http';\nimport { Directive, EventEmitter, Input, OnChanges, Output } from '@angular/core';\nimport { ShowdownComponent } from './showdown.component';\n\n/**\n * A angular directive to `ShowdownComponent` for make http request of markdown content.\n *\n * ### Example\n *\n * Setup as standalone\n * ```typescript\n * import { NgModule } from '@angular/core';\n * import { HttpClientModule } from '@angular/common/http';\n * import { ShowdownComponent, SourceDirective } from 'ngx-showdown';\n *\n * @NgModule({\n *    declarations: [ ShowdownComponent, SourceDirective ],\n *    imports: [ HttpClientModule ]\n * })\n * export class AppModule {}\n * ```\n *\n * Bind url `src` directive\n * ```typescript\n * import { Component } from '@angular/core';\n *\n * @Component({\n *     selector: 'some',\n *     template: '**Loading...**\n * })\n * class SomeComponent {\n *     url: string = 'https://unpkg.com/ngx-showdown/README.md';\n *     // ...\n * }\n * ```\n *\n * Set static url\n * ```html\n * \n * ```\n *\n * Set template reference variable\n * ```html\n * \n * ```\n *\n * Listening to `error` events.\n * ```html\n * \n * ```\n */\n@Directive({\n  selector: 'showdown[src],[showdown][src]',\n  exportAs: 'source'\n})\nexport class SourceDirective implements OnChanges {\n\n  /**\n   * The source url of the markdown content.\n   *\n   * __Example :__\n   *\n   * Set static url to `src` directive.\n   * ```html\n   * \n   * ```\n   *\n   * Bind url to `src` directive.\n   * ```html\n   * \n   * Load\n   * **Loading...**\n   * ```\n   */\n  @Input() src: string;\n\n  /**\n   * On error occur.\n   *\n   * __Example :__\n   *\n   * ```html\n   * \n   *  '+$event.message)\">**Loading...**\n   * ```\n   */\n  @Output() error: EventEmitter = new EventEmitter();\n\n  constructor(private _showdownComponent: ShowdownComponent, private _http: HttpClient) {\n  }\n\n  /**\n   * A angular lifecycle method, Use to call to `load` method on src init/changes\n   * @internal\n   */\n  ngOnChanges(): void {\n    this.load();\n  }\n\n  /**\n   * Load the markdown content of {@link SourceDirective#src} url to {@link ShowdownComponent#value}.\n   *\n   * __Example :__\n   *\n   * ```html\n   * \n   * Load\n   * \n   * ```\n   * @param url - A url of markdown content to load (it will override the current url of `SourceDirective#src`)\n   */\n  public load(url?: string): void {\n    if (url) {\n      this.src = url;\n    }\n\n    if (this.src) {\n      this\n        ._http\n        .get(this.src, {responseType: 'text'})\n        .subscribe((response: string) => {\n          this._showdownComponent.render(response);\n        }, (error: HttpErrorResponse) => {\n          this.error.emit(error);\n        });\n    }\n  }\n\n}\n\n/**\n * @ignore\n * @deprecated from v5, renamed `SrcDirective` to {@link SourceDirective}.\n */\nexport declare let SrcDirective: typeof SourceDirective;\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                src/showdown-config.provider.ts\n            \n            injectable\n            ShowdownConfig\n            \n                50 %\n                (2/4)\n            \n        \n        \n            \n                \n                src/showdown-converter.provider.ts\n            \n            injectable\n            ShowdownConverter\n            \n                66 %\n                (2/3)\n            \n        \n        \n            \n                \n                src/showdown.component.ts\n            \n            component\n            ShowdownComponent\n            \n                85 %\n                (6/7)\n            \n        \n        \n            \n                \n                src/showdown.pipe.ts\n            \n            pipe\n            ShowdownPipe\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/source.directive.ts\n            \n            directive\n            SourceDirective\n            \n                80 %\n                (4/5)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Peer dependencies\n    \n    \n        \n            @angular/common : ^8.0.0\n        \n            @angular/core : ^8.0.0\n        \n            @angular/platform-browser : ^8.0.0\n        \n            @types/showdown : ^1.9.3\n        \n            showdown : ^1.9.0\n    \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\n\n  \n  Angular Showdown\n\n\n\n\n\n\n\n\n\n\n\nngx-showdown is an Angular (>=2) integration for Showdown, A Markdown to HTML converter.\n\nDemo\n\nDemo app in source code (live).\nYou can play with it in Stackblitz and Plunker.\n\nInstall\n$ npm install ngx-showdown --saveand install peer dependencies (@angular/common/http for SourceDirective)\n$ npm install showdown @angular/common @angular/platform-browser --saveand install type package of Showdown for TypeScript \n$ npm install @types/showdown --save-devUsage\nFor more information and explanations, see the full documentation.\nSetup ShowdownModule in your app.\nAdd ShowdownModule to imports of App.\nimport { NgModule } from '@angular/core';\nimport { ShowdownModule } from 'ngx-showdown';\n\n@NgModule({\n  imports: [ ShowdownModule ]\n})\nexport class AppModule {}Or with config (it will init ShowdownConfig provider)\nimport { NgModule } from '@angular/core';\nimport { ShowdownModule } from 'ngx-showdown';\n\n@NgModule({\n  imports: [ ShowdownModule.forRoot({emoji: true, noHeaderId: true, flavor: 'github'}) ]\n})\nexport class AppModule {}Use ShowdownComponent in the template\nBinding to [value] property\nBind markdown value to value property of showdown component.\n\nBind value and options.\nimport { Component } from '@angular/core';\nimport * as Showdown from 'showdown';\n\n@Component({\n  selector: 'some',\n  template: ''\n})\nexport class SomeComponent {\n  text: string = `\n# h1\n## h2\n`;\n  options: Showdown.ShowdownOptions = {...};\n  // ...\n}As directive on anther element \nMarkdown in component content\nA markdown value in the component content.  \n\n# H1\n## H2\nWith options\n\n    * a\n    * b\n    * c\nAs directive on anther element \n:showdown:**howdown**Load .md content (by SourceDirective)\nLoad markdown content of url source.\nBind input url to src directive.\n\n**No Url..**Note: Loading markdown content requires HttpClient of @angular/common/http\nMixing sources\nWhen both Content and [value], It will render [value].\n# ContentWhen both Content and [src], It will render Content and when src loads then results will be src content. \n# ContentWhen both [value] and [src], It will render [value] and when src loads then results will be src content. \nBinding options\nBind options object (it init root ShowdownConfig and then set the bind options)\nimport { Component } from '@angular/core';\nimport * as Showdown from 'showdown';\n\n@Component({\n  selector: `some`,\n  template: ``\n})\nexport class SomeComponent {\n  text: string = '# Some';\n  options: Showdown.ShowdownOptions = {noHeaderId: true};\n  // ...\n}Or\n# abcBind single option (it have input properties for all showdown options).\n# abcSanitize the convert html output\nSanitize the convert html output by DomSanitizer.\n\n# Some\nClick\n__Foo__\nAlso sanitize content of src url.\nUse ShowdownPipe in the template\nTransform markdown value of text property to html. \n{{ text | showdown }}Transform value with options (it init root ShowdownConfig and then set the pipe options)\nimport { Component } from '@angular/core';\nimport * as Showdown from 'showdown';\n\n@Component({\n  selector: 'some',\n  template: '{{ text | showdown:options }}'\n})\nexport class SomeComponent {\n  text: string = `\n      # h1\n      ## h2\n  `;\n  options: Showdown.ShowdownOptions = {smartIndentationFix: true};\n  // ...\n}Use ShowdownConverter service\nimport { Injectable } from '@angular/core';\nimport { ShowdownConverter } from 'ngx-showdown';\n\n@Injectable()\nexport class SomeService {\n  constructor(showdownConverter: ShowdownConverter){\n    console.log(showdownConverter.makeHtml('# Showdown'));\n  }\n}Set config provider (ShowdownConfig)\nSet root config that will be injected to ShowdownComponent, ShowdownPipe, ShowdownConverter when they are created.\nimport { NgModel } from '@angular/core';\nimport { ShowdownModule, ShowdownConverter } from 'ngx-showdown';\nimport * as Showdown from 'showdown';\n\nlet colorExtension: Showdown.FilterExtension = {\n  type: 'output',\n  filter(text: string, converter: ShowdownConverter){\n    return text.replace('$color', converter.getOption('color') || 'green')\n  }\n};\n\n@NgModel({\n  imports:[\n    ShowdownModule.forRoot({\n      flavor: 'original',\n      emoji: true,\n      color: 'red',\n      extensions: [ colorExtension ]\n    })\n  ]\n})\nexport class AppModule {}Override the root config provider value.\nimport { Component } from '@angular/core';\nimport { ShowdownConfig } from 'ngx-showdown';\n\n@Component({\n  selector: 'some',\n  template: '# Header',\n  providers: [ {provide: ShowdownConfig, useValue: {underline: true, emoji: false}} ]\n})\nexport class SomeComponent {}Set the config manually by the converter methods.\nimport { Component } from '@angular/core';\nimport { ShowdownComponent } from 'ngx-showdown';\nimport * as highlightExtension from 'showdown-highlight';\nimport 'highlight.js/styles/default.css';\n\n@Component({\n  selector: 'some',\n  template: '# Header'\n})\nexport class SomeComponent {\n  constructor(showdownComponent: ShowdownComponent) {\n    showdownComponent.addExtension(highlightExtension);\n    showdownComponent.setFlavor('ghost');\n    showdownComponent.setOptions({emoji: true});\n  }\n}Flavor\nSet root flavor (Showdown flavors).\nimport { NgModel } from '@angular/core';\nimport { ShowdownModule } from 'ngx-showdown';\n\n@NgModel({\n  imports:[\n    ShowdownModule.forRoot({flavor: 'github'})\n  ]\n})\nexport class AppModule {}Note: If flavor is not set then the default value is 'vanilla' flavor.\nConverterOptions\nSet root ConverterOptions (Showdown options).\nimport { NgModel } from '@angular/core';\nimport { ShowdownModule } from 'ngx-showdown';\n\n@NgModel({\n  imports:[\n    ShowdownModule.forRoot({underline: true, emoji: false})\n  ]\n})\nexport class AppModule {}Extensions\nSet root Extensions (Showdown extensions).\nWith extension can be made changes to the Markdown input ('lang') and the Html output also listen to parse event, you can make extension or search in npm for existing extension.\nimport { NgModel } from '@angular/core';\nimport { ShowdownModule } from 'ngx-showdown';\nimport * as Showdown from 'showdown';\nimport * as highlightExtension from 'showdown-highlight';\nimport 'highlight.js/styles/default.css';\n\nlet someExtension: Showdown.ShowdownExtension = {\n  type: 'lang',\n  regex: new RegExp('markdown', 'g'),\n  replace: 'showdown'\n};\n\n\n@NgModel({\n  imports: [ \n    ShowdownModule.forRoot({extensions: [ someExtension, highlightExtension ]}) \n  ]\n})\nexport class AppModule {}Troubleshoot\nInterpolation\nUsing unescaped {} ({}) in template causes an template parse error (@angular/angular/#11859), \nThe solution is to use escape chars (html char code etc.), \nAnther solution is to override the default interpolation.\nWhitespaces\nAngular aot compiler remove whitespaces by default, use ngPreserveWhitespaces to preserve whitespaces. \n\n* a\n  * 1\n  * 2\n* b\nWith ngPreserveWhitespaces\n* a\n  * 1\n  * 2\n* bWithout ngPreserveWhitespaces\n* a * 1 * 2\n* bIndentation\nShowdown converter smartIndentationFix option can fix string indentation problems of es6 template and html. \ntext = `\n  # A\n  ## B\n`;With smartIndentationFix\n# A\n## BWithout smartIndentationFix\n  # A\n  ## BContribute\nPull requests are welcome!\nDevelopment\nThis project built with Angular Cli.\nInstall dependencies\n$ yarn installRun test\n$ yarn testBuild for release\n$ yarn buildCredits\nThis project use Showdown library to convert Markdown to Html.\nLicense\nCopyright © Yisrael Eliav,\nLicensed under the MIT license.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"license.html":{"url":"license.html","title":"getting-started - license","body":"\n                   \n\nThe MIT License (MIT)\nCopyright © Yisrael Eliav\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n            \n                \n                    \n                        ShowdownModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n  \n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_ShowdownModule\n\n\n\ncluster_ShowdownModule_declarations\n\n\n\ncluster_ShowdownModule_exports\n\n\n\ncluster_ShowdownModule_providers\n\n\n\n\nDECLARATIONS\n\nDECLARATIONS\n\n\n\nShowdownModule\n\nShowdownModule\n\nShowdownModule -->\n\nDECLARATIONS->ShowdownModule\n\n\n\n\n\nDECLARATIONS \n\nDECLARATIONS \n\nDECLARATIONS  -->\n\nShowdownModule->DECLARATIONS \n\n\n\n\n\nShowdownConverter\n\nShowdownConverter\n\nShowdownModule -->\n\nShowdownConverter->ShowdownModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n  \n\n    \n        \n            \n                \n                    \n                    \n                        1 Module\n                    \n                \n            \n        \n        \n            \n                \n                    \n                    1 Component\n                \n            \n        \n        \n            \n                \n                    \n                    1 Directive\n                \n            \n        \n        \n            \n                \n                    \n                    2 Injectables\n                \n            \n        \n        \n            \n                \n                    \n                    1 Pipe\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
