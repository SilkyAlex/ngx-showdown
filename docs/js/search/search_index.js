var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.5","fields":["title","body"],"fieldVectors":[["title/components/ShowdownComponent.html",[0,0.576,1,0.726]],["body/components/ShowdownComponent.html",[0,1.015,1,1.169,2,1.68,3,0.327,4,0.26,5,1.02,6,1.02,7,0.26,8,0.779,9,0.539,10,1.348,11,2.382,12,1.612,13,1.659,14,1.084,15,0.669,16,0.825,17,0.086,18,1.023,19,0.797,20,0.684,21,0.428,22,0.811,23,0.669,24,0.927,25,0.908,26,0.428,27,1.981,28,2.599,29,1.612,30,0.825,31,1.752,32,1.752,33,1.533,34,1.709,35,1.587,36,2.253,37,1.68,38,1.66,39,1.021,40,1.176,41,1.282,42,1.282,43,1.667,44,1.021,45,1.45,46,1.794,47,1.046,48,0.797,49,1.282,50,2.656,51,1.794,52,1.68,53,1.282,54,1.282,55,1.282,56,1.052,57,0.421,58,0.825,59,2.141,60,1.634,61,0.62,62,1.282,63,2.141,64,0.406,65,0.428,66,1.052,67,1.634,68,2.876,69,1.68,70,0.501,71,1.02,72,2.482,73,2.141,74,2.253,75,0.853,76,0.632,77,1.084,78,1.02,79,0.881,80,1.046,81,0.665,82,1.046,83,1.68,84,0.853,85,1.02,86,1.093,87,1.68,88,1.68,89,1.282,90,1.282,91,2.744,92,1.68,93,2.141,94,1.301,95,2.141,96,2.141,97,2.141,98,2.141,99,2.141,100,2.141,101,2.141,102,2.141,103,2.141,104,2.141,105,2.253,106,2.141,107,2.141,108,1.602,109,1.634,110,1.68,111,2.141,112,2.141,113,1.02,114,1.634,115,1.68,116,1.02,117,1.282,118,0.057,119,1.021,120,1.282,121,1.634,122,0.797,123,1.709,124,1.02,125,0.779,126,1.02,127,1.02,128,1.02,129,0.62,130,0.501,131,0.62,132,0.62,133,1.093,134,1.282,135,1.02,136,0.825,137,1.02,138,1.02,139,1.02,140,1.02,141,1.68,142,2.141,143,1.02,144,1.68,145,1.02,146,0.779,147,0.62,148,0.632,149,1.667,150,1.667,151,1.02,152,2.482,153,0.501,154,1.02,155,1.02,156,0.779,157,1.282,158,1.02,159,1.02,160,1.02,161,1.02,162,1.68,163,1.02,164,0.779,165,0.779,166,1.282,167,2.095,168,0.779,169,1.02,170,0.62,171,1.02,172,1.02,173,1.02,174,1.02,175,0.779,176,0.779,177,0.779,178,1.02,179,0.327,180,1.301,181,1.02,182,1.02,183,1.02,184,1.348,185,1.348,186,1.348,187,1.02,188,1.508,189,1.02,190,1.02,191,1.02,192,1.02,193,1.02,194,1.68,195,1.02,196,1.02,197,1.02,198,1.02,199,0.779,200,1.68,201,0.62,202,1.02,203,1.02,204,1.02,205,1.021,206,1.02,207,1.02,208,0.779,209,1.02,210,1.02,211,0.62,212,2.482,213,1.02,214,0.779,215,0.327,216,0.779,217,1.02,218,0.031,219,0.019]],["title/injectables/ShowdownConfig.html",[76,0.576,220,0.726]],["body/injectables/ShowdownConfig.html",[3,0.71,4,0.564,7,0.564,9,0.969,14,0.969,17,0.085,18,1.016,20,0.676,21,0.769,22,0.726,24,1.058,25,0.984,26,0.769,29,1.655,30,1.483,40,1.203,43,1.835,45,1.203,47,0.969,56,1.688,58,1.087,64,0.881,65,0.769,66,1.688,70,1.087,75,1.471,76,1.141,77,1.103,79,0.969,80,0.969,81,0.676,82,1.28,84,0.881,108,1.814,118,0.04,122,0.71,123,1.087,133,0.881,136,1.483,147,1.345,148,0.564,179,0.71,180,1.835,184,1.483,185,1.483,186,1.483,188,1.835,201,1.835,205,1.835,218,0.055,219,0.04,220,0.969,221,1.345,222,2.244,223,1.689,224,2.819,225,3.019,226,2.819,227,1.185,228,3.019,229,2.305,230,3.019,231,2.348,232,1.835,233,1.483,234,1.203,235,1.835,236,3.019,237,3.019,238,3.045,239,3.019,240,2.59,241,3.019,242,2.213,243,2.213,244,3.019,245,1.689,246,1.689,247,2.213,248,2.213,249,2.213,250,1.689,251,2.213,252,1.689,253,1.689,254,2.213]],["title/injectables/ShowdownConverter.html",[57,0.445,220,0.726]],["body/injectables/ShowdownConverter.html",[3,0.708,4,0.562,7,0.562,9,0.967,12,1.2,13,1.2,14,0.967,15,1.2,16,1.48,17,0.086,18,1.095,19,1.183,20,0.759,21,0.939,22,0.802,24,1.039,25,0.983,26,0.767,29,1.625,30,1.48,35,1.469,38,1.896,45,1.469,47,1.183,56,1.685,57,0.838,64,0.878,65,0.767,66,1.685,70,1.083,75,1.2,76,0.939,77,0.967,79,0.967,80,0.967,81,0.593,82,1.101,84,0.878,86,1.469,108,1.48,118,0.04,122,0.708,123,1.48,125,2.3,131,1.34,133,0.878,147,1.83,148,0.767,165,1.683,179,0.708,184,1.48,185,1.48,186,1.48,188,1.83,205,1.83,208,1.683,218,0.055,219,0.04,220,1.279,221,1.34,222,2.085,234,1.2,240,1.83,245,1.683,250,1.683,252,1.683,255,1.683,256,3.012,257,2.3,258,2.3,259,3.012,260,3.012,261,3.012,262,3.012,263,3.012,264,2.205,265,2.205,266,2.205,267,2.205,268,2.205,269,1.34,270,2.205,271,2.205,272,2.205,273,1.683,274,2.205,275,2.205,276,2.205]],["title/modules/ShowdownModule.html",[227,0.726,277,1.375]],["body/modules/ShowdownModule.html",[1,0.946,3,0.686,4,0.544,7,0.544,9,0.946,14,1.083,17,0.085,18,1.119,19,1.372,20,0.751,21,0.927,22,0.811,23,1.75,24,0.972,25,0.972,26,0.927,39,1.791,40,1.174,46,1.791,57,0.776,65,0.544,75,1.611,76,0.972,77,0.686,79,0.686,80,0.686,81,0.42,82,0.686,86,1.449,118,0.039,122,0.686,131,1.299,132,1.299,133,0.851,134,1.632,148,0.751,149,1.299,150,1.299,153,1.05,179,0.686,211,1.299,215,0.946,218,0.054,219,0.039,227,1.437,231,1.791,232,1.791,233,2.024,234,1.449,235,1.299,240,2.051,269,1.791,277,1.299,278,1.299,279,0.851,280,1.632,281,2.577,282,1.632,283,1.632,284,1.632,285,1.632,286,2.251,287,1.632,288,1.299,289,2.137,290,2.778,291,2.778,292,2.137,293,2.948,294,2.137,295,2.251,296,2.948,297,2.948,298,2.948,299,2.948,300,2.948,301,2.948,302,2.251,303,2.948,304,3.375,305,1.632,306,1.174,307,2.137,308,2.137,309,1.632]],["title/pipes/ShowdownPipe.html",[306,0.901,310,0.901]],["body/pipes/ShowdownPipe.html",[0,0.778,3,0.722,4,0.573,7,0.573,9,0.98,10,1.5,12,1.703,13,1.743,14,0.98,15,1.216,16,1.5,17,0.086,18,1.077,19,1.193,20,0.682,21,0.778,22,0.861,23,1.216,24,0.99,25,0.99,26,0.778,28,2.642,29,1.703,31,1.5,32,1.5,33,1.5,34,1.5,35,1.633,38,1.909,40,1.216,56,1.105,57,0.601,58,1.105,61,1.367,65,0.573,77,0.722,79,0.722,80,1.113,81,0.443,82,0.722,84,0.896,86,1.216,118,0.063,122,1.193,132,1.367,136,1.105,148,0.778,153,1.105,156,1.718,179,0.98,218,0.055,219,0.041,306,1.597,310,1.481,311,2.25,312,1.718,313,3.341,314,3.054,315,3.054,316,2.331,317,3.054,318,2.25,319,3.054,320,2.25,321,2.25]],["title/directives/SourceDirective.html",[48,0.726,215,0.726]],["body/directives/SourceDirective.html",[0,0.843,1,1.316,3,0.556,4,0.843,7,0.441,9,0.815,10,1.476,12,1.554,13,1.515,14,1.131,15,1.011,16,1.247,17,0.086,18,1.045,19,1.062,20,0.693,21,0.647,22,0.499,23,1.011,24,0.843,25,0.897,26,0.647,27,2.011,31,1.626,32,1.626,33,1.247,34,0.851,35,1.554,45,1.466,46,2.011,47,0.556,48,1.299,51,2.37,54,1.938,55,1.938,58,1.247,60,2.294,61,1.052,62,1.322,64,0.69,65,0.647,66,1.476,67,1.938,70,0.851,77,1.062,79,0.815,80,0.815,81,0.651,82,0.815,84,0.69,94,1.543,105,1.543,108,1.476,118,0.031,119,1.543,120,1.938,121,1.322,122,0.556,123,1.476,133,0.69,148,0.647,149,1.826,150,1.826,157,1.322,164,1.322,166,1.322,167,1.938,170,2.492,175,1.322,177,1.322,179,0.556,180,1.052,184,0.851,185,0.851,186,0.851,199,1.322,201,1.052,214,1.322,215,1.278,216,1.938,218,0.046,219,0.031,233,1.247,305,1.322,322,1.322,323,1.938,324,2.539,325,2.539,326,3.309,327,2.294,328,3.361,329,3.089,330,2.526,331,2.539,332,2.539,333,2.539,334,2.978,335,2.539,336,2.539,337,1.732,338,3.309,339,2.526,340,2.539,341,2.539,342,1.732,343,3.309,344,2.539,345,2.539,346,2.539,347,1.732,348,3.005,349,2.539,350,1.052,351,1.732,352,1.732,353,2.539,354,1.732,355,1.732,356,1.732,357,1.732,358,1.732,359,2.539]],["title/coverage.html",[360,2.34]],["body/coverage.html",[0,0.853,1,1.075,7,0.853,8,2.556,17,0.081,48,1.075,57,0.659,76,0.853,81,0.659,118,0.061,215,1.075,218,0.071,219,0.061,220,1.261,222,2.387,223,2.556,255,2.556,306,1.333,310,1.333,312,2.556,322,2.556,350,2.034,360,2.556,361,2.034,362,3.348,363,3.348,364,3.348,365,3.348,366,3.348,367,3.348,368,3.348,369,3.348,370,3.348,371,3.348,372,3.348,373,3.348,374,3.348,375,3.348]],["title/dependencies.html",[279,1.081,376,1.451]],["body/dependencies.html",[17,0.082,20,0.687,22,0.687,118,0.063,129,2.121,130,1.715,218,0.073,219,0.063,279,1.391,377,2.665,378,2.665,379,4.241,380,2.665,381,3.491,382,3.491]],["title/index.html",[64,0.757,383,1.451,384,1.451]],["body/index.html",[0,1.03,1,0.973,4,0.567,10,1.489,11,2.065,12,1.474,13,1.429,15,0.579,17,0.085,18,1.125,19,0.973,20,0.786,21,1.003,22,0.879,24,1.018,25,1.018,26,0.878,27,1.985,28,2.458,29,1.591,30,0.714,31,1.605,32,1.902,33,1.605,34,1.762,35,1.301,36,1.699,38,1.329,39,1.842,40,1.474,41,1.109,42,1.699,43,0.883,44,1.643,45,1.511,47,1.049,48,0.868,49,2.065,50,1.699,51,2.393,53,2.065,57,0.678,65,0.37,68,1.699,74,1.109,75,1.301,76,0.878,81,0.532,86,1.207,89,1.109,90,1.109,94,1.842,105,1.643,109,1.109,114,2.065,117,1.699,118,0.026,119,1.352,129,0.883,130,0.714,136,1.093,146,1.699,148,0.37,153,0.714,168,2.065,170,0.883,176,1.109,215,0.714,218,0.04,219,0.049,220,0.714,224,2.065,226,2.825,227,1.218,229,2.065,231,2.094,232,1.352,233,1.762,234,0.579,235,0.883,246,1.109,253,1.699,257,1.109,258,1.109,269,1.842,273,1.109,279,0.886,290,1.109,291,2.065,295,1.109,302,2.739,306,0.886,309,1.109,310,0.579,313,1.699,316,1.109,323,1.109,327,1.699,328,2.065,329,2.825,330,1.109,334,1.109,339,1.109,350,0.883,361,0.883,376,1.109,377,1.109,378,1.109,380,1.109,385,2.314,386,1.453,387,2.225,388,1.453,389,1.453,390,1.453,391,1.453,392,3.587,393,3.031,394,2.225,395,1.453,396,1.453,397,1.453,398,1.453,399,1.453,400,1.453,401,1.453,402,2.225,403,2.225,404,2.704,405,2.704,406,1.453,407,1.453,408,1.453,409,1.453,410,1.453,411,1.453,412,1.453,413,2.704,414,2.225,415,2.225,416,1.453,417,1.453,418,1.453,419,1.453,420,1.453,421,1.453,422,1.453,423,1.453,424,2.225,425,1.453,426,1.453,427,1.453,428,1.453,429,1.453,430,1.453,431,1.453,432,1.453,433,1.453,434,2.704,435,2.225,436,2.225,437,1.453,438,1.453,439,1.453,440,1.453,441,1.453,442,1.453,443,1.453,444,2.704,445,1.453,446,2.704,447,1.453,448,2.225,449,1.453,450,2.225,451,1.109,452,1.453,453,1.453,454,2.225,455,1.453,456,1.453,457,1.453,458,1.453,459,1.453,460,1.453,461,1.453,462,2.225,463,1.453,464,1.453,465,1.453,466,1.453,467,2.225,468,1.453,469,1.453,470,1.453,471,1.453,472,2.704,473,1.453,474,1.453,475,1.453,476,2.704,477,1.453,478,2.225,479,1.453,480,1.453,481,1.453,482,1.453,483,1.453,484,1.453,485,1.453,486,1.453,487,1.453,488,1.453,489,1.453,490,2.704,491,1.453,492,1.453,493,1.453,494,1.453,495,1.453,496,1.109,497,1.109,498,1.109,499,1.453,500,1.453,501,1.109,502,0.883]],["title/license.html",[383,1.451,384,1.451,502,1.155]],["body/license.html",[17,0.073,47,1.196,118,0.056,218,0.068,219,0.056,238,2.338,288,1.861,361,1.861,451,2.338,496,3.064,497,2.338,498,2.338,501,2.844,502,1.861,503,3.725,504,3.063,505,3.063,506,3.063,507,3.063,508,3.063,509,3.063,510,3.725,511,4.477,512,3.063,513,3.063,514,3.063,515,4.014,516,3.063,517,3.725,518,3.063,519,3.063,520,3.063,521,3.063,522,3.063,523,3.063,524,3.063,525,3.063,526,3.725,527,3.063,528,3.063,529,3.063,530,3.063,531,3.063,532,3.063,533,3.063,534,3.725,535,3.725,536,3.063,537,3.063,538,3.063,539,3.063,540,3.063,541,3.063,542,3.063,543,3.063,544,3.063,545,3.063,546,3.063,547,3.063,548,3.063,549,3.063,550,3.063,551,3.063,552,3.063,553,3.063,554,3.063,555,3.063,556,3.063,557,3.063,558,3.063,559,3.063,560,3.063,561,3.063,562,3.063,563,3.063,564,3.063]],["title/modules.html",[278,1.862]],["body/modules.html",[17,0.074,118,0.065,130,1.754,218,0.074,219,0.065,227,1.146,278,2.17,565,3.571,566,3.571,567,3.571]],["title/overview.html",[568,2.34]],["body/overview.html",[0,0.845,17,0.079,23,1.796,44,2.606,48,1.065,57,0.817,118,0.06,211,2.016,218,0.071,219,0.06,221,2.016,227,1.436,234,1.322,277,2.374,279,1.322,280,2.533,281,2.533,282,2.533,283,2.533,284,2.533,285,2.533,286,2.983,287,2.533,288,2.016,310,1.322,385,2.533,568,2.533]]],"invertedIndex":[["",{"_index":17,"title":{},"body":{"components/ShowdownComponent.html":{},"injectables/ShowdownConfig.html":{},"injectables/ShowdownConverter.html":{},"modules/ShowdownModule.html":{},"pipes/ShowdownPipe.html":{},"directives/SourceDirective.html":{},"coverage.html":{},"dependencies.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{}}}],["1",{"_index":44,"title":{},"body":{"components/ShowdownComponent.html":{},"index.html":{},"overview.html":{}}}],["1.9.0",{"_index":382,"title":{},"body":{"dependencies.html":{}}}],["1.9.3",{"_index":381,"title":{},"body":{"dependencies.html":{}}}],["1/1",{"_index":371,"title":{},"body":{"coverage.html":{}}}],["100",{"_index":370,"title":{},"body":{"coverage.html":{}}}],["1px",{"_index":102,"title":{},"body":{"components/ShowdownComponent.html":{}}}],["2",{"_index":385,"title":{},"body":{"index.html":{},"overview.html":{}}}],["2/3",{"_index":367,"title":{},"body":{"coverage.html":{}}}],["2/4",{"_index":365,"title":{},"body":{"coverage.html":{}}}],["3",{"_index":88,"title":{},"body":{"components/ShowdownComponent.html":{}}}],["4/5",{"_index":373,"title":{},"body":{"coverage.html":{}}}],["50",{"_index":364,"title":{},"body":{"coverage.html":{}}}],["5px",{"_index":100,"title":{},"body":{"components/ShowdownComponent.html":{}}}],["6/7",{"_index":369,"title":{},"body":{"coverage.html":{}}}],["66",{"_index":366,"title":{},"body":{"coverage.html":{}}}],["8.0.0",{"_index":379,"title":{},"body":{"dependencies.html":{}}}],["80",{"_index":372,"title":{},"body":{"coverage.html":{}}}],["85",{"_index":368,"title":{},"body":{"coverage.html":{}}}],["95",{"_index":98,"title":{},"body":{"components/ShowdownComponent.html":{}}}],["__",{"_index":150,"title":{},"body":{"components/ShowdownComponent.html":{},"modules/ShowdownModule.html":{},"directives/SourceDirective.html":{}}}],["__example",{"_index":149,"title":{},"body":{"components/ShowdownComponent.html":{},"modules/ShowdownModule.html":{},"directives/SourceDirective.html":{}}}],["__foo__",{"_index":418,"title":{},"body":{"index.html":{}}}],["__some",{"_index":314,"title":{},"body":{"pipes/ShowdownPipe.html":{}}}],["_domsanitizer",{"_index":73,"title":{},"body":{"components/ShowdownComponent.html":{}}}],["_elementref",{"_index":83,"title":{},"body":{"components/ShowdownComponent.html":{}}}],["_http",{"_index":338,"title":{},"body":{"directives/SourceDirective.html":{}}}],["_sanitize",{"_index":158,"title":{},"body":{"components/ShowdownComponent.html":{}}}],["_showdowncomponent",{"_index":341,"title":{},"body":{"directives/SourceDirective.html":{}}}],["_tooption",{"_index":137,"title":{},"body":{"components/ShowdownComponent.html":{}}}],["_tooption(sanitize",{"_index":163,"title":{},"body":{"components/ShowdownComponent.html":{}}}],["_tooption(value",{"_index":209,"title":{},"body":{"components/ShowdownComponent.html":{}}}],["abcbind",{"_index":416,"title":{},"body":{"index.html":{}}}],["abcsanitize",{"_index":417,"title":{},"body":{"index.html":{}}}],["above",{"_index":533,"title":{},"body":{"license.html":{}}}],["access",{"_index":204,"title":{},"body":{"components/ShowdownComponent.html":{}}}],["accessors",{"_index":69,"title":{},"body":{"components/ShowdownComponent.html":{}}}],["action",{"_index":558,"title":{},"body":{"license.html":{}}}],["actual_component",{"_index":217,"title":{},"body":{"components/ShowdownComponent.html":{}}}],["add",{"_index":290,"title":{},"body":{"modules/ShowdownModule.html":{},"index.html":{}}}],["alias",{"_index":111,"title":{},"body":{"components/ShowdownComponent.html":{}}}],["and/or",{"_index":524,"title":{},"body":{"license.html":{}}}],["angular",{"_index":10,"title":{},"body":{"components/ShowdownComponent.html":{},"pipes/ShowdownPipe.html":{},"directives/SourceDirective.html":{},"index.html":{}}}],["angular/angular/#11859",{"_index":466,"title":{},"body":{"index.html":{}}}],["angular/common",{"_index":378,"title":{},"body":{"dependencies.html":{},"index.html":{}}}],["angular/common/http",{"_index":327,"title":{},"body":{"directives/SourceDirective.html":{},"index.html":{}}}],["angular/core",{"_index":20,"title":{},"body":{"components/ShowdownComponent.html":{},"injectables/ShowdownConfig.html":{},"injectables/ShowdownConverter.html":{},"modules/ShowdownModule.html":{},"pipes/ShowdownPipe.html":{},"directives/SourceDirective.html":{},"dependencies.html":{},"index.html":{}}}],["angular/platform",{"_index":129,"title":{},"body":{"components/ShowdownComponent.html":{},"dependencies.html":{},"index.html":{}}}],["anther",{"_index":49,"title":{},"body":{"components/ShowdownComponent.html":{},"index.html":{}}}],["aot",{"_index":473,"title":{},"body":{"index.html":{}}}],["app",{"_index":291,"title":{},"body":{"modules/ShowdownModule.html":{},"index.html":{}}}],["appmodule",{"_index":26,"title":{},"body":{"components/ShowdownComponent.html":{},"injectables/ShowdownConfig.html":{},"injectables/ShowdownConverter.html":{},"modules/ShowdownModule.html":{},"pipes/ShowdownPipe.html":{},"directives/SourceDirective.html":{},"index.html":{}}}],["arising",{"_index":562,"title":{},"body":{"license.html":{}}}],["associated",{"_index":512,"title":{},"body":{"license.html":{}}}],["authors",{"_index":551,"title":{},"body":{"license.html":{}}}],["b",{"_index":53,"title":{},"body":{"components/ShowdownComponent.html":{},"index.html":{}}}],["bar",{"_index":297,"title":{},"body":{"modules/ShowdownModule.html":{}}}],["baseconverteroptions",{"_index":254,"title":{},"body":{"injectables/ShowdownConfig.html":{}}}],["bcontribute",{"_index":482,"title":{},"body":{"index.html":{}}}],["bind",{"_index":27,"title":{},"body":{"components/ShowdownComponent.html":{},"directives/SourceDirective.html":{},"index.html":{}}}],["bindentation",{"_index":479,"title":{},"body":{"index.html":{}}}],["binding",{"_index":403,"title":{},"body":{"index.html":{}}}],["black",{"_index":104,"title":{},"body":{"components/ShowdownComponent.html":{}}}],["bold",{"_index":37,"title":{},"body":{"components/ShowdownComponent.html":{}}}],["boolean",{"_index":91,"title":{},"body":{"components/ShowdownComponent.html":{}}}],["bootstrap",{"_index":280,"title":{},"body":{"modules/ShowdownModule.html":{},"overview.html":{}}}],["border",{"_index":101,"title":{},"body":{"components/ShowdownComponent.html":{}}}],["both",{"_index":413,"title":{},"body":{"index.html":{}}}],["box",{"_index":96,"title":{},"body":{"components/ShowdownComponent.html":{}}}],["browse",{"_index":567,"title":{},"body":{"modules.html":{}}}],["browser",{"_index":130,"title":{},"body":{"components/ShowdownComponent.html":{},"dependencies.html":{},"index.html":{},"modules.html":{}}}],["browser/domsanitizer#sanitize",{"_index":160,"title":{},"body":{"components/ShowdownComponent.html":{}}}],["buildlicense",{"_index":495,"title":{},"body":{"index.html":{}}}],["built",{"_index":488,"title":{},"body":{"index.html":{}}}],["bwithout",{"_index":478,"title":{},"body":{"index.html":{}}}],["c",{"_index":406,"title":{},"body":{"index.html":{}}}],["call",{"_index":175,"title":{},"body":{"components/ShowdownComponent.html":{},"directives/SourceDirective.html":{}}}],["causes",{"_index":465,"title":{},"body":{"index.html":{}}}],["changes",{"_index":176,"title":{},"body":{"components/ShowdownComponent.html":{},"index.html":{}}}],["char",{"_index":470,"title":{},"body":{"index.html":{}}}],["charge",{"_index":507,"title":{},"body":{"license.html":{}}}],["chars",{"_index":469,"title":{},"body":{"index.html":{}}}],["check",{"_index":169,"title":{},"body":{"components/ShowdownComponent.html":{}}}],["claim",{"_index":554,"title":{},"body":{"license.html":{}}}],["class",{"_index":25,"title":{},"body":{"components/ShowdownComponent.html":{},"injectables/ShowdownConfig.html":{},"injectables/ShowdownConverter.html":{},"modules/ShowdownModule.html":{},"pipes/ShowdownPipe.html":{},"directives/SourceDirective.html":{},"index.html":{}}}],["cli",{"_index":489,"title":{},"body":{"index.html":{}}}],["click",{"_index":109,"title":{},"body":{"components/ShowdownComponent.html":{},"index.html":{}}}],["cluster_showdownmodule",{"_index":282,"title":{},"body":{"modules/ShowdownModule.html":{},"overview.html":{}}}],["cluster_showdownmodule_declarations",{"_index":283,"title":{},"body":{"modules/ShowdownModule.html":{},"overview.html":{}}}],["cluster_showdownmodule_exports",{"_index":284,"title":{},"body":{"modules/ShowdownModule.html":{},"overview.html":{}}}],["cluster_showdownmodule_providers",{"_index":285,"title":{},"body":{"modules/ShowdownModule.html":{},"overview.html":{}}}],["code",{"_index":146,"title":{},"body":{"components/ShowdownComponent.html":{},"index.html":{}}}],["codeblocks.after",{"_index":300,"title":{},"body":{"modules/ShowdownModule.html":{}}}],["color",{"_index":431,"title":{},"body":{"index.html":{}}}],["colorextension",{"_index":424,"title":{},"body":{"index.html":{}}}],["compile",{"_index":196,"title":{},"body":{"components/ShowdownComponent.html":{}}}],["compiler",{"_index":474,"title":{},"body":{"index.html":{}}}],["component",{"_index":0,"title":{"components/ShowdownComponent.html":{}},"body":{"components/ShowdownComponent.html":{},"pipes/ShowdownPipe.html":{},"directives/SourceDirective.html":{},"coverage.html":{},"index.html":{},"overview.html":{}}}],["component_template",{"_index":213,"title":{},"body":{"components/ShowdownComponent.html":{}}}],["components",{"_index":2,"title":{},"body":{"components/ShowdownComponent.html":{}}}],["conditions",{"_index":532,"title":{},"body":{"license.html":{}}}],["config",{"_index":75,"title":{},"body":{"components/ShowdownComponent.html":{},"injectables/ShowdownConfig.html":{},"injectables/ShowdownConverter.html":{},"modules/ShowdownModule.html":{},"index.html":{}}}],["config.extensions",{"_index":270,"title":{},"body":{"injectables/ShowdownConverter.html":{}}}],["config.flavor",{"_index":272,"title":{},"body":{"injectables/ShowdownConverter.html":{}}}],["config.provider",{"_index":131,"title":{},"body":{"components/ShowdownComponent.html":{},"injectables/ShowdownConverter.html":{},"modules/ShowdownModule.html":{}}}],["config.provider.ts",{"_index":223,"title":{},"body":{"injectables/ShowdownConfig.html":{},"coverage.html":{}}}],["config.provider.ts:41",{"_index":241,"title":{},"body":{"injectables/ShowdownConfig.html":{}}}],["config.provider.ts:52",{"_index":243,"title":{},"body":{"injectables/ShowdownConfig.html":{}}}],["configurable",{"_index":210,"title":{},"body":{"components/ShowdownComponent.html":{}}}],["connection",{"_index":563,"title":{},"body":{"license.html":{}}}],["console.log",{"_index":301,"title":{},"body":{"modules/ShowdownModule.html":{}}}],["console.log(`some:\\nmarkdown",{"_index":260,"title":{},"body":{"injectables/ShowdownConverter.html":{}}}],["console.log(showdownconverter.makehtml",{"_index":421,"title":{},"body":{"index.html":{}}}],["const",{"_index":134,"title":{},"body":{"components/ShowdownComponent.html":{},"modules/ShowdownModule.html":{}}}],["constructor",{"_index":70,"title":{},"body":{"components/ShowdownComponent.html":{},"injectables/ShowdownConfig.html":{},"injectables/ShowdownConverter.html":{},"directives/SourceDirective.html":{}}}],["constructor(@optional",{"_index":268,"title":{},"body":{"injectables/ShowdownConverter.html":{}}}],["constructor(_elementref",{"_index":71,"title":{},"body":{"components/ShowdownComponent.html":{}}}],["constructor(_showdowncomponent",{"_index":337,"title":{},"body":{"directives/SourceDirective.html":{}}}],["constructor(config",{"_index":264,"title":{},"body":{"injectables/ShowdownConverter.html":{}}}],["constructor(options",{"_index":239,"title":{},"body":{"injectables/ShowdownConfig.html":{}}}],["constructor(private",{"_index":164,"title":{},"body":{"components/ShowdownComponent.html":{},"directives/SourceDirective.html":{}}}],["constructor(showdowncomponent",{"_index":437,"title":{},"body":{"index.html":{}}}],["constructor(showdownconverter",{"_index":258,"title":{},"body":{"injectables/ShowdownConverter.html":{},"index.html":{}}}],["content",{"_index":51,"title":{},"body":{"components/ShowdownComponent.html":{},"directives/SourceDirective.html":{},"index.html":{}}}],["contentwhen",{"_index":414,"title":{},"body":{"index.html":{}}}],["contract",{"_index":559,"title":{},"body":{"license.html":{}}}],["convert",{"_index":117,"title":{},"body":{"components/ShowdownComponent.html":{},"index.html":{}}}],["converter",{"_index":86,"title":{},"body":{"components/ShowdownComponent.html":{},"injectables/ShowdownConverter.html":{},"modules/ShowdownModule.html":{},"pipes/ShowdownPipe.html":{},"index.html":{}}}],["converter.getoption('color",{"_index":428,"title":{},"body":{"index.html":{}}}],["converter.provider",{"_index":132,"title":{},"body":{"components/ShowdownComponent.html":{},"modules/ShowdownModule.html":{},"pipes/ShowdownPipe.html":{}}}],["converter.provider.ts",{"_index":255,"title":{},"body":{"injectables/ShowdownConverter.html":{},"coverage.html":{}}}],["converter.provider.ts:40",{"_index":265,"title":{},"body":{"injectables/ShowdownConverter.html":{}}}],["converter.provider.ts:53",{"_index":266,"title":{},"body":{"injectables/ShowdownConverter.html":{}}}],["converteroptions",{"_index":253,"title":{},"body":{"injectables/ShowdownConfig.html":{},"index.html":{}}}],["cool",{"_index":107,"title":{},"body":{"components/ShowdownComponent.html":{}}}],["copies",{"_index":526,"title":{},"body":{"license.html":{}}}],["copy",{"_index":510,"title":{},"body":{"license.html":{}}}],["copyright",{"_index":496,"title":{},"body":{"index.html":{},"license.html":{}}}],["coverage",{"_index":360,"title":{"coverage.html":{}},"body":{"coverage.html":{}}}],["created",{"_index":423,"title":{},"body":{"index.html":{}}}],["current",{"_index":120,"title":{},"body":{"components/ShowdownComponent.html":{},"directives/SourceDirective.html":{}}}],["custom",{"_index":225,"title":{},"body":{"injectables/ShowdownConfig.html":{}}}],["damages",{"_index":555,"title":{},"body":{"license.html":{}}}],["deal",{"_index":514,"title":{},"body":{"license.html":{}}}],["dealings",{"_index":564,"title":{},"body":{"license.html":{}}}],["declarations",{"_index":23,"title":{},"body":{"components/ShowdownComponent.html":{},"modules/ShowdownModule.html":{},"pipes/ShowdownPipe.html":{},"directives/SourceDirective.html":{},"overview.html":{}}}],["declare",{"_index":201,"title":{},"body":{"components/ShowdownComponent.html":{},"injectables/ShowdownConfig.html":{},"directives/SourceDirective.html":{}}}],["default",{"_index":444,"title":{},"body":{"index.html":{}}}],["define",{"_index":202,"title":{},"body":{"components/ShowdownComponent.html":{}}}],["defined",{"_index":77,"title":{},"body":{"components/ShowdownComponent.html":{},"injectables/ShowdownConfig.html":{},"injectables/ShowdownConverter.html":{},"modules/ShowdownModule.html":{},"pipes/ShowdownPipe.html":{},"directives/SourceDirective.html":{}}}],["definition",{"_index":145,"title":{},"body":{"components/ShowdownComponent.html":{}}}],["demo",{"_index":387,"title":{},"body":{"index.html":{}}}],["dependencies",{"_index":279,"title":{"dependencies.html":{}},"body":{"modules/ShowdownModule.html":{},"dependencies.html":{},"index.html":{},"overview.html":{}}}],["deprecated",{"_index":185,"title":{},"body":{"components/ShowdownComponent.html":{},"injectables/ShowdownConfig.html":{},"injectables/ShowdownConverter.html":{},"directives/SourceDirective.html":{}}}],["description",{"_index":9,"title":{},"body":{"components/ShowdownComponent.html":{},"injectables/ShowdownConfig.html":{},"injectables/ShowdownConverter.html":{},"modules/ShowdownModule.html":{},"pipes/ShowdownPipe.html":{},"directives/SourceDirective.html":{}}}],["development",{"_index":486,"title":{},"body":{"index.html":{}}}],["devusage",{"_index":396,"title":{},"body":{"index.html":{}}}],["direct",{"_index":203,"title":{},"body":{"components/ShowdownComponent.html":{}}}],["directive",{"_index":48,"title":{"directives/SourceDirective.html":{}},"body":{"components/ShowdownComponent.html":{},"directives/SourceDirective.html":{},"coverage.html":{},"index.html":{},"overview.html":{}}}],["directives",{"_index":214,"title":{},"body":{"components/ShowdownComponent.html":{},"directives/SourceDirective.html":{}}}],["distribute",{"_index":522,"title":{},"body":{"license.html":{}}}],["documentation",{"_index":361,"title":{},"body":{"coverage.html":{},"index.html":{},"license.html":{}}}],["dom",{"_index":5,"title":{},"body":{"components/ShowdownComponent.html":{}}}],["domsanitizer",{"_index":74,"title":{},"body":{"components/ShowdownComponent.html":{},"index.html":{}}}],["domsanitizer`](https://angular.io/api/platform",{"_index":159,"title":{},"body":{"components/ShowdownComponent.html":{}}}],["dynamic",{"_index":141,"title":{},"body":{"components/ShowdownComponent.html":{}}}],["element",{"_index":50,"title":{},"body":{"components/ShowdownComponent.html":{},"index.html":{}}}],["elementref",{"_index":72,"title":{},"body":{"components/ShowdownComponent.html":{}}}],["eliav",{"_index":498,"title":{},"body":{"index.html":{},"license.html":{}}}],["emoji",{"_index":229,"title":{},"body":{"injectables/ShowdownConfig.html":{},"index.html":{}}}],["enables",{"_index":93,"title":{},"body":{"components/ShowdownComponent.html":{}}}],["equivalent",{"_index":112,"title":{},"body":{"components/ShowdownComponent.html":{}}}],["error",{"_index":334,"title":{},"body":{"directives/SourceDirective.html":{},"index.html":{}}}],["es6",{"_index":481,"title":{},"body":{"index.html":{}}}],["escape",{"_index":468,"title":{},"body":{"index.html":{}}}],["etc",{"_index":471,"title":{},"body":{"index.html":{}}}],["event",{"_index":451,"title":{},"body":{"index.html":{},"license.html":{}}}],["event.message)\">**loading",{"_index":345,"title":{},"body":{"directives/SourceDirective.html":{}}}],["eventemitter",{"_index":343,"title":{},"body":{"directives/SourceDirective.html":{}}}],["events",{"_index":335,"title":{},"body":{"directives/SourceDirective.html":{}}}],["example",{"_index":14,"title":{},"body":{"components/ShowdownComponent.html":{},"injectables/ShowdownConfig.html":{},"injectables/ShowdownConverter.html":{},"modules/ShowdownModule.html":{},"pipes/ShowdownPipe.html":{},"directives/SourceDirective.html":{}}}],["existing",{"_index":453,"title":{},"body":{"index.html":{}}}],["explanations",{"_index":399,"title":{},"body":{"index.html":{}}}],["export",{"_index":24,"title":{},"body":{"components/ShowdownComponent.html":{},"injectables/ShowdownConfig.html":{},"injectables/ShowdownConverter.html":{},"modules/ShowdownModule.html":{},"pipes/ShowdownPipe.html":{},"directives/SourceDirective.html":{},"index.html":{}}}],["exportas",{"_index":62,"title":{},"body":{"components/ShowdownComponent.html":{},"directives/SourceDirective.html":{}}}],["exports",{"_index":281,"title":{},"body":{"modules/ShowdownModule.html":{},"overview.html":{}}}],["express",{"_index":542,"title":{},"body":{"license.html":{}}}],["extends",{"_index":56,"title":{},"body":{"components/ShowdownComponent.html":{},"injectables/ShowdownConfig.html":{},"injectables/ShowdownConverter.html":{},"pipes/ShowdownPipe.html":{}}}],["extension",{"_index":446,"title":{},"body":{"index.html":{}}}],["extensions",{"_index":269,"title":{},"body":{"injectables/ShowdownConverter.html":{},"modules/ShowdownModule.html":{},"index.html":{}}}],["false",{"_index":136,"title":{},"body":{"components/ShowdownComponent.html":{},"injectables/ShowdownConfig.html":{},"pipes/ShowdownPipe.html":{},"index.html":{}}}],["file",{"_index":7,"title":{},"body":{"components/ShowdownComponent.html":{},"injectables/ShowdownConfig.html":{},"injectables/ShowdownConverter.html":{},"modules/ShowdownModule.html":{},"pipes/ShowdownPipe.html":{},"directives/SourceDirective.html":{},"coverage.html":{}}}],["files",{"_index":513,"title":{},"body":{"license.html":{}}}],["filter(text",{"_index":426,"title":{},"body":{"index.html":{}}}],["fitness",{"_index":547,"title":{},"body":{"license.html":{}}}],["fix",{"_index":90,"title":{},"body":{"components/ShowdownComponent.html":{},"index.html":{}}}],["flavor",{"_index":231,"title":{},"body":{"injectables/ShowdownConfig.html":{},"modules/ShowdownModule.html":{},"index.html":{}}}],["flavors",{"_index":441,"title":{},"body":{"index.html":{}}}],["following",{"_index":531,"title":{},"body":{"license.html":{}}}],["foo",{"_index":296,"title":{},"body":{"modules/ShowdownModule.html":{}}}],["forroot",{"_index":292,"title":{},"body":{"modules/ShowdownModule.html":{}}}],["forroot(config",{"_index":293,"title":{},"body":{"modules/ShowdownModule.html":{}}}],["free",{"_index":506,"title":{},"body":{"license.html":{}}}],["full",{"_index":400,"title":{},"body":{"index.html":{}}}],["furnished",{"_index":529,"title":{},"body":{"license.html":{}}}],["g",{"_index":458,"title":{},"body":{"index.html":{}}}],["get(this.src",{"_index":354,"title":{},"body":{"directives/SourceDirective.html":{}}}],["getting",{"_index":383,"title":{"index.html":{},"license.html":{}},"body":{}}],["github",{"_index":232,"title":{},"body":{"injectables/ShowdownConfig.html":{},"modules/ShowdownModule.html":{},"index.html":{}}}],["granted",{"_index":505,"title":{},"body":{"license.html":{}}}],["green",{"_index":429,"title":{},"body":{"index.html":{}}}],["h1",{"_index":404,"title":{},"body":{"index.html":{}}}],["h2",{"_index":405,"title":{},"body":{"index.html":{}}}],["hasownproperty",{"_index":245,"title":{},"body":{"injectables/ShowdownConfig.html":{},"injectables/ShowdownConverter.html":{}}}],["hasownproperty.call(options",{"_index":250,"title":{},"body":{"injectables/ShowdownConfig.html":{},"injectables/ShowdownConverter.html":{}}}],["header",{"_index":36,"title":{},"body":{"components/ShowdownComponent.html":{},"index.html":{}}}],["headerlevelstart",{"_index":87,"title":{},"body":{"components/ShowdownComponent.html":{}}}],["hereby",{"_index":504,"title":{},"body":{"license.html":{}}}],["highlight",{"_index":435,"title":{},"body":{"index.html":{}}}],["highlight.js/styles/default.css",{"_index":436,"title":{},"body":{"index.html":{}}}],["highlightextension",{"_index":434,"title":{},"body":{"index.html":{}}}],["holders",{"_index":552,"title":{},"body":{"license.html":{}}}],["html",{"_index":13,"title":{},"body":{"components/ShowdownComponent.html":{},"injectables/ShowdownConverter.html":{},"pipes/ShowdownPipe.html":{},"directives/SourceDirective.html":{},"index.html":{}}}],["html}\\n",{"_index":262,"title":{},"body":{"injectables/ShowdownConverter.html":{}}}],["http",{"_index":324,"title":{},"body":{"directives/SourceDirective.html":{}}}],["httpclient",{"_index":339,"title":{},"body":{"directives/SourceDirective.html":{},"index.html":{}}}],["httpclientmodule",{"_index":326,"title":{},"body":{"directives/SourceDirective.html":{}}}],["httperrorresponse",{"_index":349,"title":{},"body":{"directives/SourceDirective.html":{}}}],["https://github.com/showdownjs/showdown/blob/master/readme.md#flavors",{"_index":247,"title":{},"body":{"injectables/ShowdownConfig.html":{}}}],["https://unpkg.com/ngx",{"_index":331,"title":{},"body":{"directives/SourceDirective.html":{}}}],["iconverteroptions",{"_index":275,"title":{},"body":{"injectables/ShowdownConverter.html":{}}}],["iconverteroptionschangeable",{"_index":276,"title":{},"body":{"injectables/ShowdownConverter.html":{}}}],["identifier",{"_index":362,"title":{},"body":{"coverage.html":{}}}],["ignore",{"_index":184,"title":{},"body":{"components/ShowdownComponent.html":{},"injectables/ShowdownConfig.html":{},"injectables/ShowdownConverter.html":{},"directives/SourceDirective.html":{}}}],["implements",{"_index":58,"title":{},"body":{"components/ShowdownComponent.html":{},"injectables/ShowdownConfig.html":{},"pipes/ShowdownPipe.html":{},"directives/SourceDirective.html":{}}}],["implied",{"_index":543,"title":{},"body":{"license.html":{}}}],["import",{"_index":18,"title":{},"body":{"components/ShowdownComponent.html":{},"injectables/ShowdownConfig.html":{},"injectables/ShowdownConverter.html":{},"modules/ShowdownModule.html":{},"pipes/ShowdownPipe.html":{},"directives/SourceDirective.html":{},"index.html":{}}}],["imports",{"_index":233,"title":{},"body":{"injectables/ShowdownConfig.html":{},"modules/ShowdownModule.html":{},"directives/SourceDirective.html":{},"index.html":{}}}],["included",{"_index":536,"title":{},"body":{"license.html":{}}}],["including",{"_index":517,"title":{},"body":{"license.html":{}}}],["indentation",{"_index":89,"title":{},"body":{"components/ShowdownComponent.html":{},"index.html":{}}}],["index",{"_index":64,"title":{"index.html":{}},"body":{"components/ShowdownComponent.html":{},"injectables/ShowdownConfig.html":{},"injectables/ShowdownConverter.html":{},"directives/SourceDirective.html":{}}}],["info",{"_index":3,"title":{},"body":{"components/ShowdownComponent.html":{},"injectables/ShowdownConfig.html":{},"injectables/ShowdownConverter.html":{},"modules/ShowdownModule.html":{},"pipes/ShowdownPipe.html":{},"directives/SourceDirective.html":{}}}],["information",{"_index":398,"title":{},"body":{"index.html":{}}}],["init",{"_index":168,"title":{},"body":{"components/ShowdownComponent.html":{},"index.html":{}}}],["init/changes",{"_index":351,"title":{},"body":{"directives/SourceDirective.html":{}}}],["injectable",{"_index":220,"title":{"injectables/ShowdownConfig.html":{},"injectables/ShowdownConverter.html":{}},"body":{"injectables/ShowdownConfig.html":{},"injectables/ShowdownConverter.html":{},"coverage.html":{},"index.html":{}}}],["injectables",{"_index":221,"title":{},"body":{"injectables/ShowdownConfig.html":{},"injectables/ShowdownConverter.html":{},"overview.html":{}}}],["injected",{"_index":422,"title":{},"body":{"index.html":{}}}],["innerhtml",{"_index":197,"title":{},"body":{"components/ShowdownComponent.html":{}}}],["input",{"_index":105,"title":{},"body":{"components/ShowdownComponent.html":{},"directives/SourceDirective.html":{},"index.html":{}}}],["inputs",{"_index":67,"title":{},"body":{"components/ShowdownComponent.html":{},"directives/SourceDirective.html":{}}}],["install",{"_index":392,"title":{},"body":{"index.html":{}}}],["installrun",{"_index":491,"title":{},"body":{"index.html":{}}}],["instance",{"_index":256,"title":{},"body":{"injectables/ShowdownConverter.html":{}}}],["instances",{"_index":303,"title":{},"body":{"modules/ShowdownModule.html":{}}}],["instead",{"_index":188,"title":{},"body":{"components/ShowdownComponent.html":{},"injectables/ShowdownConfig.html":{},"injectables/ShowdownConverter.html":{}}}],["integration",{"_index":386,"title":{},"body":{"index.html":{}}}],["interface",{"_index":147,"title":{},"body":{"components/ShowdownComponent.html":{},"injectables/ShowdownConfig.html":{},"injectables/ShowdownConverter.html":{}}}],["internal",{"_index":133,"title":{},"body":{"components/ShowdownComponent.html":{},"injectables/ShowdownConfig.html":{},"injectables/ShowdownConverter.html":{},"modules/ShowdownModule.html":{},"directives/SourceDirective.html":{}}}],["interpolation",{"_index":462,"title":{},"body":{"index.html":{}}}],["key",{"_index":205,"title":{},"body":{"components/ShowdownComponent.html":{},"injectables/ShowdownConfig.html":{},"injectables/ShowdownConverter.html":{}}}],["keys",{"_index":140,"title":{},"body":{"components/ShowdownComponent.html":{}}}],["kind",{"_index":541,"title":{},"body":{"license.html":{}}}],["lang",{"_index":448,"title":{},"body":{"index.html":{}}}],["legend",{"_index":211,"title":{},"body":{"components/ShowdownComponent.html":{},"modules/ShowdownModule.html":{},"overview.html":{}}}],["liability",{"_index":556,"title":{},"body":{"license.html":{}}}],["liable",{"_index":553,"title":{},"body":{"license.html":{}}}],["license",{"_index":502,"title":{"license.html":{}},"body":{"index.html":{},"license.html":{}}}],["licensed",{"_index":499,"title":{},"body":{"index.html":{}}}],["lifecycle",{"_index":166,"title":{},"body":{"components/ShowdownComponent.html":{},"directives/SourceDirective.html":{}}}],["limitation",{"_index":518,"title":{},"body":{"license.html":{}}}],["limited",{"_index":544,"title":{},"body":{"license.html":{}}}],["line:member",{"_index":191,"title":{},"body":{"components/ShowdownComponent.html":{}}}],["link",{"_index":108,"title":{},"body":{"components/ShowdownComponent.html":{},"injectables/ShowdownConfig.html":{},"injectables/ShowdownConverter.html":{},"directives/SourceDirective.html":{}}}],["list",{"_index":52,"title":{},"body":{"components/ShowdownComponent.html":{}}}],["listen",{"_index":449,"title":{},"body":{"index.html":{}}}],["listeners",{"_index":299,"title":{},"body":{"modules/ShowdownModule.html":{}}}],["listening",{"_index":333,"title":{},"body":{"directives/SourceDirective.html":{}}}],["live",{"_index":388,"title":{},"body":{"index.html":{}}}],["load",{"_index":170,"title":{},"body":{"components/ShowdownComponent.html":{},"directives/SourceDirective.html":{},"index.html":{}}}],["load(url",{"_index":346,"title":{},"body":{"directives/SourceDirective.html":{}}}],["loading",{"_index":330,"title":{},"body":{"directives/SourceDirective.html":{},"index.html":{}}}],["loads",{"_index":415,"title":{},"body":{"index.html":{}}}],["made",{"_index":447,"title":{},"body":{"index.html":{}}}],["make",{"_index":323,"title":{},"body":{"directives/SourceDirective.html":{},"index.html":{}}}],["manually",{"_index":433,"title":{},"body":{"index.html":{}}}],["map_option",{"_index":135,"title":{},"body":{"components/ShowdownComponent.html":{}}}],["map_option.hasownproperty(value",{"_index":138,"title":{},"body":{"components/ShowdownComponent.html":{}}}],["map_option[value",{"_index":139,"title":{},"body":{"components/ShowdownComponent.html":{}}}],["markdown",{"_index":12,"title":{},"body":{"components/ShowdownComponent.html":{},"injectables/ShowdownConverter.html":{},"pipes/ShowdownPipe.html":{},"directives/SourceDirective.html":{},"index.html":{}}}],["markdown)\\nhtml",{"_index":261,"title":{},"body":{"injectables/ShowdownConverter.html":{}}}],["matching",{"_index":218,"title":{},"body":{"components/ShowdownComponent.html":{},"injectables/ShowdownConfig.html":{},"injectables/ShowdownConverter.html":{},"modules/ShowdownModule.html":{},"pipes/ShowdownPipe.html":{},"directives/SourceDirective.html":{},"coverage.html":{},"dependencies.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{}}}],["md",{"_index":408,"title":{},"body":{"index.html":{}}}],["merchantability",{"_index":546,"title":{},"body":{"license.html":{}}}],["merge",{"_index":238,"title":{},"body":{"injectables/ShowdownConfig.html":{},"license.html":{}}}],["merge(options",{"_index":242,"title":{},"body":{"injectables/ShowdownConfig.html":{}}}],["merge?(options",{"_index":249,"title":{},"body":{"injectables/ShowdownConfig.html":{}}}],["metadata",{"_index":61,"title":{},"body":{"components/ShowdownComponent.html":{},"pipes/ShowdownPipe.html":{},"directives/SourceDirective.html":{}}}],["method",{"_index":167,"title":{},"body":{"components/ShowdownComponent.html":{},"directives/SourceDirective.html":{}}}],["methods",{"_index":65,"title":{},"body":{"components/ShowdownComponent.html":{},"injectables/ShowdownConfig.html":{},"injectables/ShowdownConverter.html":{},"modules/ShowdownModule.html":{},"pipes/ShowdownPipe.html":{},"directives/SourceDirective.html":{},"index.html":{}}}],["mit",{"_index":501,"title":{},"body":{"index.html":{},"license.html":{}}}],["mixing",{"_index":411,"title":{},"body":{"index.html":{}}}],["modify",{"_index":520,"title":{},"body":{"license.html":{}}}],["module",{"_index":277,"title":{"modules/ShowdownModule.html":{}},"body":{"modules/ShowdownModule.html":{},"overview.html":{}}}],["modules",{"_index":278,"title":{"modules.html":{}},"body":{"modules/ShowdownModule.html":{},"modules.html":{}}}],["modulewithproviders",{"_index":304,"title":{},"body":{"modules/ShowdownModule.html":{}}}],["more",{"_index":397,"title":{},"body":{"index.html":{}}}],["myconverteroptions",{"_index":237,"title":{},"body":{"injectables/ShowdownConfig.html":{}}}],["myshowdownconfig",{"_index":228,"title":{},"body":{"injectables/ShowdownConfig.html":{}}}],["name",{"_index":80,"title":{},"body":{"components/ShowdownComponent.html":{},"injectables/ShowdownConfig.html":{},"injectables/ShowdownConverter.html":{},"modules/ShowdownModule.html":{},"pipes/ShowdownPipe.html":{},"directives/SourceDirective.html":{}}}],["new",{"_index":350,"title":{},"body":{"directives/SourceDirective.html":{},"coverage.html":{},"index.html":{}}}],["next",{"_index":190,"title":{},"body":{"components/ShowdownComponent.html":{}}}],["ngmodel",{"_index":226,"title":{},"body":{"injectables/ShowdownConfig.html":{},"index.html":{}}}],["ngmodule",{"_index":19,"title":{},"body":{"components/ShowdownComponent.html":{},"injectables/ShowdownConverter.html":{},"modules/ShowdownModule.html":{},"pipes/ShowdownPipe.html":{},"directives/SourceDirective.html":{},"index.html":{}}}],["ngonchanges",{"_index":177,"title":{},"body":{"components/ShowdownComponent.html":{},"directives/SourceDirective.html":{}}}],["ngoninit",{"_index":171,"title":{},"body":{"components/ShowdownComponent.html":{}}}],["ngpreservewhitespaces",{"_index":476,"title":{},"body":{"index.html":{}}}],["ngx",{"_index":21,"title":{},"body":{"components/ShowdownComponent.html":{},"injectables/ShowdownConfig.html":{},"injectables/ShowdownConverter.html":{},"modules/ShowdownModule.html":{},"pipes/ShowdownPipe.html":{},"directives/SourceDirective.html":{},"index.html":{}}}],["noheaderid",{"_index":402,"title":{},"body":{"index.html":{}}}],["noninfringement",{"_index":550,"title":{},"body":{"license.html":{}}}],["note",{"_index":443,"title":{},"body":{"index.html":{}}}],["notice",{"_index":534,"title":{},"body":{"license.html":{}}}],["npm",{"_index":393,"title":{},"body":{"index.html":{}}}],["object",{"_index":30,"title":{},"body":{"components/ShowdownComponent.html":{},"injectables/ShowdownConfig.html":{},"injectables/ShowdownConverter.html":{},"index.html":{}}}],["object.defineproperty(showdowncomponent.prototype",{"_index":206,"title":{},"body":{"components/ShowdownComponent.html":{}}}],["object.keys(showdown.getdefaultoptions",{"_index":143,"title":{},"body":{"components/ShowdownComponent.html":{}}}],["obtaining",{"_index":509,"title":{},"body":{"license.html":{}}}],["occur",{"_index":344,"title":{},"body":{"directives/SourceDirective.html":{}}}],["onchanges",{"_index":60,"title":{},"body":{"components/ShowdownComponent.html":{},"directives/SourceDirective.html":{}}}],["oninit",{"_index":59,"title":{},"body":{"components/ShowdownComponent.html":{}}}],["option",{"_index":42,"title":{},"body":{"components/ShowdownComponent.html":{},"index.html":{}}}],["optional",{"_index":82,"title":{},"body":{"components/ShowdownComponent.html":{},"injectables/ShowdownConfig.html":{},"injectables/ShowdownConverter.html":{},"modules/ShowdownModule.html":{},"pipes/ShowdownPipe.html":{},"directives/SourceDirective.html":{}}}],["options",{"_index":29,"title":{},"body":{"components/ShowdownComponent.html":{},"injectables/ShowdownConfig.html":{},"injectables/ShowdownConverter.html":{},"pipes/ShowdownPipe.html":{},"index.html":{}}}],["options(options",{"_index":155,"title":{},"body":{"components/ShowdownComponent.html":{}}}],["options[key",{"_index":252,"title":{},"body":{"injectables/ShowdownConfig.html":{},"injectables/ShowdownConverter.html":{}}}],["options_properties_keys",{"_index":142,"title":{},"body":{"components/ShowdownComponent.html":{}}}],["ordering",{"_index":192,"title":{},"body":{"components/ShowdownComponent.html":{}}}],["original",{"_index":430,"title":{},"body":{"index.html":{}}}],["otherwise",{"_index":561,"title":{},"body":{"license.html":{}}}],["out",{"_index":288,"title":{},"body":{"modules/ShowdownModule.html":{},"license.html":{},"overview.html":{}}}],["output",{"_index":94,"title":{},"body":{"components/ShowdownComponent.html":{},"directives/SourceDirective.html":{},"index.html":{}}}],["outputs",{"_index":336,"title":{},"body":{"directives/SourceDirective.html":{}}}],["override",{"_index":119,"title":{},"body":{"components/ShowdownComponent.html":{},"directives/SourceDirective.html":{},"index.html":{}}}],["overview",{"_index":568,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["package",{"_index":376,"title":{"dependencies.html":{}},"body":{"index.html":{}}}],["padding",{"_index":99,"title":{},"body":{"components/ShowdownComponent.html":{}}}],["param",{"_index":179,"title":{},"body":{"components/ShowdownComponent.html":{},"injectables/ShowdownConfig.html":{},"injectables/ShowdownConverter.html":{},"modules/ShowdownModule.html":{},"pipes/ShowdownPipe.html":{},"directives/SourceDirective.html":{}}}],["parameters",{"_index":79,"title":{},"body":{"components/ShowdownComponent.html":{},"injectables/ShowdownConfig.html":{},"injectables/ShowdownConverter.html":{},"modules/ShowdownModule.html":{},"pipes/ShowdownPipe.html":{},"directives/SourceDirective.html":{}}}],["parse",{"_index":450,"title":{},"body":{"index.html":{}}}],["particular",{"_index":548,"title":{},"body":{"license.html":{}}}],["peer",{"_index":377,"title":{},"body":{"dependencies.html":{},"index.html":{}}}],["permission",{"_index":503,"title":{},"body":{"license.html":{}}}],["permit",{"_index":527,"title":{},"body":{"license.html":{}}}],["person",{"_index":508,"title":{},"body":{"license.html":{}}}],["persons",{"_index":528,"title":{},"body":{"license.html":{}}}],["pipe",{"_index":310,"title":{"pipes/ShowdownPipe.html":{}},"body":{"pipes/ShowdownPipe.html":{},"coverage.html":{},"index.html":{},"overview.html":{}}}],["pipes",{"_index":311,"title":{},"body":{"pipes/ShowdownPipe.html":{}}}],["pipetransform",{"_index":319,"title":{},"body":{"pipes/ShowdownPipe.html":{}}}],["play",{"_index":389,"title":{},"body":{"index.html":{}}}],["plunker",{"_index":391,"title":{},"body":{"index.html":{}}}],["portions",{"_index":538,"title":{},"body":{"license.html":{}}}],["preserve",{"_index":477,"title":{},"body":{"index.html":{}}}],["preview",{"_index":106,"title":{},"body":{"components/ShowdownComponent.html":{}}}],["private",{"_index":157,"title":{},"body":{"components/ShowdownComponent.html":{},"directives/SourceDirective.html":{}}}],["problems",{"_index":480,"title":{},"body":{"index.html":{}}}],["project",{"_index":487,"title":{},"body":{"index.html":{}}}],["properties",{"_index":43,"title":{},"body":{"components/ShowdownComponent.html":{},"injectables/ShowdownConfig.html":{},"index.html":{}}}],["property",{"_index":114,"title":{},"body":{"components/ShowdownComponent.html":{},"index.html":{}}}],["provide",{"_index":235,"title":{},"body":{"injectables/ShowdownConfig.html":{},"modules/ShowdownModule.html":{},"index.html":{}}}],["provided",{"_index":539,"title":{},"body":{"license.html":{}}}],["provider",{"_index":224,"title":{},"body":{"injectables/ShowdownConfig.html":{},"index.html":{}}}],["providers",{"_index":234,"title":{},"body":{"injectables/ShowdownConfig.html":{},"injectables/ShowdownConverter.html":{},"modules/ShowdownModule.html":{},"index.html":{},"overview.html":{}}}],["public",{"_index":66,"title":{},"body":{"components/ShowdownComponent.html":{},"injectables/ShowdownConfig.html":{},"injectables/ShowdownConverter.html":{},"directives/SourceDirective.html":{}}}],["publish",{"_index":521,"title":{},"body":{"license.html":{}}}],["pull",{"_index":483,"title":{},"body":{"index.html":{}}}],["pure",{"_index":320,"title":{},"body":{"pipes/ShowdownPipe.html":{}}}],["purpose",{"_index":549,"title":{},"body":{"license.html":{}}}],["red",{"_index":432,"title":{},"body":{"index.html":{}}}],["reference",{"_index":54,"title":{},"body":{"components/ShowdownComponent.html":{},"directives/SourceDirective.html":{}}}],["regex",{"_index":456,"title":{},"body":{"index.html":{}}}],["regexp('markdown",{"_index":457,"title":{},"body":{"index.html":{}}}],["release",{"_index":494,"title":{},"body":{"index.html":{}}}],["remove",{"_index":475,"title":{},"body":{"index.html":{}}}],["renamed",{"_index":199,"title":{},"body":{"components/ShowdownComponent.html":{},"directives/SourceDirective.html":{}}}],["render",{"_index":11,"title":{},"body":{"components/ShowdownComponent.html":{},"index.html":{}}}],["render(value",{"_index":115,"title":{},"body":{"components/ShowdownComponent.html":{}}}],["replace",{"_index":459,"title":{},"body":{"index.html":{}}}],["request",{"_index":325,"title":{},"body":{"directives/SourceDirective.html":{}}}],["requests",{"_index":484,"title":{},"body":{"index.html":{}}}],["requires",{"_index":410,"title":{},"body":{"index.html":{}}}],["reset",{"_index":287,"title":{},"body":{"modules/ShowdownModule.html":{},"overview.html":{}}}],["responsetype",{"_index":355,"title":{},"body":{"directives/SourceDirective.html":{}}}],["restriction",{"_index":516,"title":{},"body":{"license.html":{}}}],["result",{"_index":118,"title":{},"body":{"components/ShowdownComponent.html":{},"injectables/ShowdownConfig.html":{},"injectables/ShowdownConverter.html":{},"modules/ShowdownModule.html":{},"pipes/ShowdownPipe.html":{},"directives/SourceDirective.html":{},"coverage.html":{},"dependencies.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{}}}],["results",{"_index":219,"title":{},"body":{"components/ShowdownComponent.html":{},"injectables/ShowdownConfig.html":{},"injectables/ShowdownConverter.html":{},"modules/ShowdownModule.html":{},"pipes/ShowdownPipe.html":{},"directives/SourceDirective.html":{},"coverage.html":{},"dependencies.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{}}}],["return",{"_index":153,"title":{},"body":{"components/ShowdownComponent.html":{},"modules/ShowdownModule.html":{},"pipes/ShowdownPipe.html":{},"index.html":{}}}],["returns",{"_index":122,"title":{},"body":{"components/ShowdownComponent.html":{},"injectables/ShowdownConfig.html":{},"injectables/ShowdownConverter.html":{},"modules/ShowdownModule.html":{},"pipes/ShowdownPipe.html":{},"directives/SourceDirective.html":{}}}],["rights",{"_index":519,"title":{},"body":{"license.html":{}}}],["root",{"_index":302,"title":{},"body":{"modules/ShowdownModule.html":{},"index.html":{}}}],["sanitize",{"_index":68,"title":{},"body":{"components/ShowdownComponent.html":{},"index.html":{}}}],["sanitize(sanitize",{"_index":161,"title":{},"body":{"components/ShowdownComponent.html":{}}}],["save",{"_index":395,"title":{},"body":{"index.html":{}}}],["saveand",{"_index":394,"title":{},"body":{"index.html":{}}}],["search",{"_index":452,"title":{},"body":{"index.html":{}}}],["securitycontext",{"_index":128,"title":{},"body":{"components/ShowdownComponent.html":{}}}],["see",{"_index":246,"title":{},"body":{"injectables/ShowdownConfig.html":{},"index.html":{}}}],["selector",{"_index":31,"title":{},"body":{"components/ShowdownComponent.html":{},"pipes/ShowdownPipe.html":{},"directives/SourceDirective.html":{},"index.html":{}}}],["sell",{"_index":525,"title":{},"body":{"license.html":{}}}],["service",{"_index":420,"title":{},"body":{"index.html":{}}}],["set",{"_index":45,"title":{},"body":{"components/ShowdownComponent.html":{},"injectables/ShowdownConfig.html":{},"injectables/ShowdownConverter.html":{},"directives/SourceDirective.html":{},"index.html":{}}}],["set(value",{"_index":207,"title":{},"body":{"components/ShowdownComponent.html":{}}}],["setoptions",{"_index":263,"title":{},"body":{"injectables/ShowdownConverter.html":{}}}],["setoptions(options",{"_index":125,"title":{},"body":{"components/ShowdownComponent.html":{},"injectables/ShowdownConverter.html":{}}}],["setsanitize(sanitize",{"_index":127,"title":{},"body":{"components/ShowdownComponent.html":{}}}],["setshowdown(value",{"_index":124,"title":{},"body":{"components/ShowdownComponent.html":{}}}],["setter",{"_index":144,"title":{},"body":{"components/ShowdownComponent.html":{}}}],["setup",{"_index":15,"title":{},"body":{"components/ShowdownComponent.html":{},"injectables/ShowdownConverter.html":{},"pipes/ShowdownPipe.html":{},"directives/SourceDirective.html":{},"index.html":{}}}],["setvalue?(value",{"_index":195,"title":{},"body":{"components/ShowdownComponent.html":{}}}],["shall",{"_index":535,"title":{},"body":{"license.html":{}}}],["showdown",{"_index":22,"title":{},"body":{"components/ShowdownComponent.html":{},"injectables/ShowdownConfig.html":{},"injectables/ShowdownConverter.html":{},"modules/ShowdownModule.html":{},"pipes/ShowdownPipe.html":{},"directives/SourceDirective.html":{},"dependencies.html":{},"index.html":{}}}],["showdown(value",{"_index":151,"title":{},"body":{"components/ShowdownComponent.html":{}}}],["showdown,[showdown",{"_index":63,"title":{},"body":{"components/ShowdownComponent.html":{}}}],["showdown.component",{"_index":305,"title":{},"body":{"modules/ShowdownModule.html":{},"directives/SourceDirective.html":{}}}],["showdown.converter",{"_index":267,"title":{},"body":{"injectables/ShowdownConverter.html":{}}}],["showdown.converteroptions",{"_index":240,"title":{},"body":{"injectables/ShowdownConfig.html":{},"injectables/ShowdownConverter.html":{},"modules/ShowdownModule.html":{}}}],["showdown.filterextension",{"_index":425,"title":{},"body":{"index.html":{}}}],["showdown.flavor",{"_index":244,"title":{},"body":{"injectables/ShowdownConfig.html":{}}}],["showdown.pipe",{"_index":307,"title":{},"body":{"modules/ShowdownModule.html":{}}}],["showdown.showdownextension",{"_index":455,"title":{},"body":{"index.html":{}}}],["showdown.showdownoptions",{"_index":38,"title":{},"body":{"components/ShowdownComponent.html":{},"injectables/ShowdownConverter.html":{},"pipes/ShowdownPipe.html":{},"index.html":{}}}],["showdown/readme.md",{"_index":332,"title":{},"body":{"directives/SourceDirective.html":{}}}],["showdown:**howdown**load",{"_index":407,"title":{},"body":{"index.html":{}}}],["showdown:options",{"_index":419,"title":{},"body":{"index.html":{}}}],["showdown[src],[showdown][src",{"_index":216,"title":{},"body":{"components/ShowdownComponent.html":{},"directives/SourceDirective.html":{}}}],["showdowncomponent",{"_index":1,"title":{"components/ShowdownComponent.html":{}},"body":{"components/ShowdownComponent.html":{},"modules/ShowdownModule.html":{},"directives/SourceDirective.html":{},"coverage.html":{},"index.html":{}}}],["showdowncomponent#render",{"_index":194,"title":{},"body":{"components/ShowdownComponent.html":{}}}],["showdowncomponent#smartindentationfix",{"_index":187,"title":{},"body":{"components/ShowdownComponent.html":{}}}],["showdowncomponent#value",{"_index":121,"title":{},"body":{"components/ShowdownComponent.html":{},"directives/SourceDirective.html":{}}}],["showdowncomponent.addextension(highlightextension",{"_index":438,"title":{},"body":{"index.html":{}}}],["showdowncomponent.setflavor('ghost",{"_index":439,"title":{},"body":{"index.html":{}}}],["showdowncomponent.setoptions({emoji",{"_index":440,"title":{},"body":{"index.html":{}}}],["showdownconfig",{"_index":76,"title":{"injectables/ShowdownConfig.html":{}},"body":{"components/ShowdownComponent.html":{},"injectables/ShowdownConfig.html":{},"injectables/ShowdownConverter.html":{},"modules/ShowdownModule.html":{},"coverage.html":{},"index.html":{}}}],["showdownconverter",{"_index":57,"title":{"injectables/ShowdownConverter.html":{}},"body":{"components/ShowdownComponent.html":{},"injectables/ShowdownConverter.html":{},"modules/ShowdownModule.html":{},"pipes/ShowdownPipe.html":{},"coverage.html":{},"index.html":{},"overview.html":{}}}],["showdownconverter.makehtml(markdown",{"_index":259,"title":{},"body":{"injectables/ShowdownConverter.html":{}}}],["showdowndirective",{"_index":200,"title":{},"body":{"components/ShowdownComponent.html":{}}}],["showdownmodule",{"_index":227,"title":{"modules/ShowdownModule.html":{}},"body":{"injectables/ShowdownConfig.html":{},"modules/ShowdownModule.html":{},"index.html":{},"modules.html":{},"overview.html":{}}}],["showdownmodule.forroot",{"_index":295,"title":{},"body":{"modules/ShowdownModule.html":{},"index.html":{}}}],["showdownmodule.forroot({emoji",{"_index":401,"title":{},"body":{"index.html":{}}}],["showdownmodule.forroot({extensions",{"_index":460,"title":{},"body":{"index.html":{}}}],["showdownmodule.forroot({flavor",{"_index":442,"title":{},"body":{"index.html":{}}}],["showdownmodule.forroot({underline",{"_index":445,"title":{},"body":{"index.html":{}}}],["showdownpipe",{"_index":306,"title":{"pipes/ShowdownPipe.html":{}},"body":{"modules/ShowdownModule.html":{},"pipes/ShowdownPipe.html":{},"coverage.html":{},"index.html":{}}}],["single",{"_index":41,"title":{},"body":{"components/ShowdownComponent.html":{},"index.html":{}}}],["smartindentationfix",{"_index":39,"title":{},"body":{"components/ShowdownComponent.html":{},"modules/ShowdownModule.html":{},"index.html":{}}}],["software",{"_index":511,"title":{},"body":{"license.html":{}}}],["solid",{"_index":103,"title":{},"body":{"components/ShowdownComponent.html":{}}}],["solution",{"_index":467,"title":{},"body":{"index.html":{}}}],["somecomponent",{"_index":33,"title":{},"body":{"components/ShowdownComponent.html":{},"pipes/ShowdownPipe.html":{},"directives/SourceDirective.html":{},"index.html":{}}}],["someextension",{"_index":454,"title":{},"body":{"index.html":{}}}],["someservice",{"_index":257,"title":{},"body":{"injectables/ShowdownConverter.html":{},"index.html":{}}}],["source",{"_index":4,"title":{},"body":{"components/ShowdownComponent.html":{},"injectables/ShowdownConfig.html":{},"injectables/ShowdownConverter.html":{},"modules/ShowdownModule.html":{},"pipes/ShowdownPipe.html":{},"directives/SourceDirective.html":{},"index.html":{}}}],["source.directive",{"_index":308,"title":{},"body":{"modules/ShowdownModule.html":{}}}],["sourcedirective",{"_index":215,"title":{"directives/SourceDirective.html":{}},"body":{"components/ShowdownComponent.html":{},"modules/ShowdownModule.html":{},"directives/SourceDirective.html":{},"coverage.html":{},"index.html":{}}}],["sourcedirective#src",{"_index":348,"title":{},"body":{"directives/SourceDirective.html":{}}}],["sources",{"_index":412,"title":{},"body":{"index.html":{}}}],["src",{"_index":329,"title":{},"body":{"directives/SourceDirective.html":{},"index.html":{}}}],["src/showdown",{"_index":222,"title":{},"body":{"injectables/ShowdownConfig.html":{},"injectables/ShowdownConverter.html":{},"coverage.html":{}}}],["src/showdown.component.ts",{"_index":8,"title":{},"body":{"components/ShowdownComponent.html":{},"coverage.html":{}}}],["src/showdown.component.ts:126",{"_index":113,"title":{},"body":{"components/ShowdownComponent.html":{}}}],["src/showdown.component.ts:142",{"_index":110,"title":{},"body":{"components/ShowdownComponent.html":{}}}],["src/showdown.component.ts:171",{"_index":85,"title":{},"body":{"components/ShowdownComponent.html":{}}}],["src/showdown.component.ts:175",{"_index":126,"title":{},"body":{"components/ShowdownComponent.html":{}}}],["src/showdown.component.ts:211",{"_index":92,"title":{},"body":{"components/ShowdownComponent.html":{}}}],["src/showdown.component.ts:213",{"_index":78,"title":{},"body":{"components/ShowdownComponent.html":{}}}],["src/showdown.component.ts:248",{"_index":116,"title":{},"body":{"components/ShowdownComponent.html":{}}}],["src/showdown.module.ts",{"_index":289,"title":{},"body":{"modules/ShowdownModule.html":{}}}],["src/showdown.module.ts:59",{"_index":294,"title":{},"body":{"modules/ShowdownModule.html":{}}}],["src/showdown.pipe.ts",{"_index":312,"title":{},"body":{"pipes/ShowdownPipe.html":{},"coverage.html":{}}}],["src/showdown.pipe.ts:55",{"_index":318,"title":{},"body":{"pipes/ShowdownPipe.html":{}}}],["src/source.directive.ts",{"_index":322,"title":{},"body":{"directives/SourceDirective.html":{},"coverage.html":{}}}],["src/source.directive.ts:112",{"_index":347,"title":{},"body":{"directives/SourceDirective.html":{}}}],["src/source.directive.ts:75",{"_index":342,"title":{},"body":{"directives/SourceDirective.html":{}}}],["src/source.directive.ts:87",{"_index":340,"title":{},"body":{"directives/SourceDirective.html":{}}}],["srcdirective",{"_index":359,"title":{},"body":{"directives/SourceDirective.html":{}}}],["stackblitz",{"_index":390,"title":{},"body":{"index.html":{}}}],["standalone",{"_index":16,"title":{},"body":{"components/ShowdownComponent.html":{},"injectables/ShowdownConverter.html":{},"pipes/ShowdownPipe.html":{},"directives/SourceDirective.html":{}}}],["started",{"_index":384,"title":{"index.html":{},"license.html":{}},"body":{}}],["statements",{"_index":363,"title":{},"body":{"coverage.html":{}}}],["static",{"_index":46,"title":{},"body":{"components/ShowdownComponent.html":{},"modules/ShowdownModule.html":{},"directives/SourceDirective.html":{}}}],["string",{"_index":35,"title":{},"body":{"components/ShowdownComponent.html":{},"injectables/ShowdownConverter.html":{},"pipes/ShowdownPipe.html":{},"directives/SourceDirective.html":{},"index.html":{}}}],["styles",{"_index":95,"title":{},"body":{"components/ShowdownComponent.html":{}}}],["subject",{"_index":530,"title":{},"body":{"license.html":{}}}],["sublicense",{"_index":523,"title":{},"body":{"license.html":{}}}],["subscribe((response",{"_index":356,"title":{},"body":{"directives/SourceDirective.html":{}}}],["substantial",{"_index":537,"title":{},"body":{"license.html":{}}}],["super(config",{"_index":165,"title":{},"body":{"components/ShowdownComponent.html":{},"injectables/ShowdownConverter.html":{}}}],["support",{"_index":565,"title":{},"body":{"modules.html":{}}}],["svg",{"_index":566,"title":{},"body":{"modules.html":{}}}],["table",{"_index":375,"title":{},"body":{"coverage.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":374,"title":{},"body":{"coverage.html":{}}}],["template",{"_index":32,"title":{},"body":{"components/ShowdownComponent.html":{},"pipes/ShowdownPipe.html":{},"directives/SourceDirective.html":{},"index.html":{}}}],["test",{"_index":492,"title":{},"body":{"index.html":{}}}],["testbuild",{"_index":493,"title":{},"body":{"index.html":{}}}],["text",{"_index":34,"title":{},"body":{"components/ShowdownComponent.html":{},"pipes/ShowdownPipe.html":{},"directives/SourceDirective.html":{},"index.html":{}}}],["text.replace('$color",{"_index":427,"title":{},"body":{"index.html":{}}}],["this._domsanitizer.sanitize(securitycontext.html",{"_index":182,"title":{},"body":{"components/ShowdownComponent.html":{}}}],["this._elementref.nativeelement.innerhtml",{"_index":183,"title":{},"body":{"components/ShowdownComponent.html":{}}}],["this._elementref.nativeelement.innerhtml.trim",{"_index":173,"title":{},"body":{"components/ShowdownComponent.html":{}}}],["this._sanitize",{"_index":162,"title":{},"body":{"components/ShowdownComponent.html":{}}}],["this._showdowncomponent.render(response",{"_index":357,"title":{},"body":{"directives/SourceDirective.html":{}}}],["this.error.emit(error",{"_index":358,"title":{},"body":{"directives/SourceDirective.html":{}}}],["this.getoptions",{"_index":154,"title":{},"body":{"components/ShowdownComponent.html":{}}}],["this.load",{"_index":352,"title":{},"body":{"directives/SourceDirective.html":{}}}],["this.makehtml(this.value",{"_index":181,"title":{},"body":{"components/ShowdownComponent.html":{}}}],["this.makehtml(value",{"_index":321,"title":{},"body":{"pipes/ShowdownPipe.html":{}}}],["this.merge(options",{"_index":248,"title":{},"body":{"injectables/ShowdownConfig.html":{}}}],["this.render",{"_index":178,"title":{},"body":{"components/ShowdownComponent.html":{}}}],["this.render(this._elementref.nativeelement.innerhtml",{"_index":174,"title":{},"body":{"components/ShowdownComponent.html":{}}}],["this.setflavor((config",{"_index":271,"title":{},"body":{"injectables/ShowdownConverter.html":{}}}],["this.setoption(key",{"_index":208,"title":{},"body":{"components/ShowdownComponent.html":{},"injectables/ShowdownConverter.html":{}}}],["this.setoptions(config",{"_index":274,"title":{},"body":{"injectables/ShowdownConverter.html":{}}}],["this.setoptions(options",{"_index":156,"title":{},"body":{"components/ShowdownComponent.html":{},"pipes/ShowdownPipe.html":{}}}],["this.src",{"_index":353,"title":{},"body":{"directives/SourceDirective.html":{}}}],["this.value",{"_index":152,"title":{},"body":{"components/ShowdownComponent.html":{}}}],["this[key",{"_index":251,"title":{},"body":{"injectables/ShowdownConfig.html":{}}}],["tohtml",{"_index":198,"title":{},"body":{"components/ShowdownComponent.html":{}}}],["tort",{"_index":560,"title":{},"body":{"license.html":{}}}],["transform",{"_index":313,"title":{},"body":{"pipes/ShowdownPipe.html":{},"index.html":{}}}],["transform(value",{"_index":317,"title":{},"body":{"pipes/ShowdownPipe.html":{}}}],["tree",{"_index":6,"title":{},"body":{"components/ShowdownComponent.html":{}}}],["trimeachline",{"_index":193,"title":{},"body":{"components/ShowdownComponent.html":{}}}],["troubleshoot",{"_index":461,"title":{},"body":{"index.html":{}}}],["true",{"_index":40,"title":{},"body":{"components/ShowdownComponent.html":{},"injectables/ShowdownConfig.html":{},"modules/ShowdownModule.html":{},"pipes/ShowdownPipe.html":{},"index.html":{}}}],["tslint:disable",{"_index":189,"title":{},"body":{"components/ShowdownComponent.html":{}}}],["type",{"_index":81,"title":{},"body":{"components/ShowdownComponent.html":{},"injectables/ShowdownConfig.html":{},"injectables/ShowdownConverter.html":{},"modules/ShowdownModule.html":{},"pipes/ShowdownPipe.html":{},"directives/SourceDirective.html":{},"coverage.html":{},"index.html":{}}}],["type:'listener",{"_index":298,"title":{},"body":{"modules/ShowdownModule.html":{}}}],["typeof",{"_index":180,"title":{},"body":{"components/ShowdownComponent.html":{},"injectables/ShowdownConfig.html":{},"directives/SourceDirective.html":{}}}],["types/showdown",{"_index":380,"title":{},"body":{"dependencies.html":{},"index.html":{}}}],["typescript",{"_index":148,"title":{},"body":{"components/ShowdownComponent.html":{},"injectables/ShowdownConfig.html":{},"injectables/ShowdownConverter.html":{},"modules/ShowdownModule.html":{},"pipes/ShowdownPipe.html":{},"directives/SourceDirective.html":{},"index.html":{}}}],["undefined",{"_index":172,"title":{},"body":{"components/ShowdownComponent.html":{}}}],["under",{"_index":500,"title":{},"body":{"index.html":{}}}],["underline",{"_index":316,"title":{},"body":{"pipes/ShowdownPipe.html":{},"index.html":{}}}],["underline__",{"_index":315,"title":{},"body":{"pipes/ShowdownPipe.html":{}}}],["underscore",{"_index":230,"title":{},"body":{"injectables/ShowdownConfig.html":{}}}],["unescaped",{"_index":464,"title":{},"body":{"index.html":{}}}],["url",{"_index":328,"title":{},"body":{"directives/SourceDirective.html":{},"index.html":{}}}],["url..**note",{"_index":409,"title":{},"body":{"index.html":{}}}],["use",{"_index":47,"title":{},"body":{"components/ShowdownComponent.html":{},"injectables/ShowdownConfig.html":{},"injectables/ShowdownConverter.html":{},"directives/SourceDirective.html":{},"index.html":{},"license.html":{}}}],["useclass",{"_index":236,"title":{},"body":{"injectables/ShowdownConfig.html":{}}}],["usevalue",{"_index":309,"title":{},"body":{"modules/ShowdownModule.html":{},"index.html":{}}}],["using",{"_index":463,"title":{},"body":{"index.html":{}}}],["v5",{"_index":186,"title":{},"body":{"components/ShowdownComponent.html":{},"injectables/ShowdownConfig.html":{},"injectables/ShowdownConverter.html":{},"directives/SourceDirective.html":{}}}],["value",{"_index":28,"title":{},"body":{"components/ShowdownComponent.html":{},"pipes/ShowdownPipe.html":{},"index.html":{}}}],["vanilla",{"_index":273,"title":{},"body":{"injectables/ShowdownConverter.html":{},"index.html":{}}}],["var",{"_index":212,"title":{},"body":{"components/ShowdownComponent.html":{}}}],["variable",{"_index":55,"title":{},"body":{"components/ShowdownComponent.html":{},"directives/SourceDirective.html":{}}}],["void",{"_index":123,"title":{},"body":{"components/ShowdownComponent.html":{},"injectables/ShowdownConfig.html":{},"injectables/ShowdownConverter.html":{},"directives/SourceDirective.html":{}}}],["warranties",{"_index":545,"title":{},"body":{"license.html":{}}}],["warranty",{"_index":540,"title":{},"body":{"license.html":{}}}],["welcome",{"_index":485,"title":{},"body":{"index.html":{}}}],["whether",{"_index":557,"title":{},"body":{"license.html":{}}}],["whitespaces",{"_index":472,"title":{},"body":{"index.html":{}}}],["width",{"_index":97,"title":{},"body":{"components/ShowdownComponent.html":{}}}],["without",{"_index":515,"title":{},"body":{"license.html":{}}}],["yarn",{"_index":490,"title":{},"body":{"index.html":{}}}],["yes",{"_index":84,"title":{},"body":{"components/ShowdownComponent.html":{},"injectables/ShowdownConfig.html":{},"injectables/ShowdownConverter.html":{},"pipes/ShowdownPipe.html":{},"directives/SourceDirective.html":{}}}],["yisrael",{"_index":497,"title":{},"body":{"index.html":{},"license.html":{}}}],["zoom",{"_index":286,"title":{},"body":{"modules/ShowdownModule.html":{},"overview.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"components/ShowdownComponent.html":{"url":"components/ShowdownComponent.html","title":"component - ShowdownComponent","body":"\n                   \n\n\n\n\n\n  Components\n  ShowdownComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/showdown.component.ts\n\n\n    \n        Description\n    \n    \n        A angular component for render Markdown to HTML.\nExample\nSetup as standalone\n * import { NgModule } from '@angular/core';\n * import { ShowdownComponent } from 'ngx-showdown';\n *\n * @NgModule({\n *   declarations: [ ShowdownComponent ];\n * })\n * export class AppModule {}\n *Bind markdown value and options object\n * import { Component } from '@angular/core';\n * import * as Showdown from 'showdown';\n *\n * @Component({\n *   selector: 'some',\n *   template: ''\n * })\n * export class SomeComponent {\n *   text: string = `\n     # Some header\n     ---\n     **Some bold**\n   `;\n *   options: Showdown.ShowdownOptions = { smartIndentationFix: true };\n *   // ...\n * }\n *Bind single option (it have properties for all showdown options).\n * # Some text :+1:\n *Set static markdown value.\n * \n *Use as directive on anther element.\n * \n *Static markdown value in the element content.\n * \n *    \n *       # List:\n *       * a\n *            * A\n *       * b\n *    \n * \n *Set template reference variable.\n * \n *Or\n * \n *\n    \n\n    \n        Extends\n    \n    \n            ShowdownConverter\n    \n\n    \n        Implements\n    \n    \n                OnInit\n                OnChanges\n                \n    \n\n\n\n    Metadata\n    \n        \n\n\n\n\n            \n                exportAs\n                showdown\n            \n\n\n\n\n\n\n\n            \n                selector\n                showdown,[showdown]\n            \n\n\n\n            \n                template\n                \n            \n\n\n\n\n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                render\n                            \n                        \n                    \n                \n\n                \n                    \n                        Inputs\n                    \n                \n                \n                    \n                        \n                            \n                                options\n                            \n                            \n                                sanitize\n                            \n                            \n                                showdown\n                            \n                            \n                                value\n                            \n                        \n                    \n                \n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    showdown\n                                \n                                \n                                    options\n                                \n                                \n                                    sanitize\n                                \n                            \n                        \n                    \n        \n    \n\n\n    \n    Constructor\n        \n            \n                \n                    \nconstructor(_elementRef: ElementRef, _domSanitizer?: DomSanitizer, config?: ShowdownConfig)\n                    \n                \n                        \n                            \n                                Defined in src/showdown.component.ts:213\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        _elementRef\n                                                  \n                                                        \n                                                                    ElementRef\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        _domSanitizer\n                                                  \n                                                        \n                                                                    DomSanitizer\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                                \n                                                        config\n                                                  \n                                                        \n                                                                    ShowdownConfig\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n    \n    Inputs\n        \n            \n                \n                    \n                        \n                        options\n                    \n                \n                \n                    \n                        Type :     Showdown.ShowdownOptions\n\n                    \n                \n                        \n                            \n                                    Defined in src/showdown.component.ts:171\n                            \n                        \n                \n                    \n                        The showdown options of the converter.\nExample :\nBind options\n   * import { Component } from '@angular/core';\n   * import * as Showdown from 'showdown';\n   *\n   * @Component({\n   *   selector: `some`,\n   *   template: `# Some Header`\n   * })\n   * export class SomeComponent {\n   *   options: Showdown.ShowdownOptions = {headerLevelStart: 3};\n   *   // ...\n   * }\n   *Or\n   *  # Indentation Fix\n   *\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        sanitize\n                    \n                \n                \n                    \n                        Type :     boolean\n\n                    \n                \n                        \n                            \n                                    Defined in src/showdown.component.ts:211\n                            \n                        \n                \n                    \n                        Enables html sanitize, it will sanitize the converter html output by DomSanitizer.\nExample :\n   * import { Component } from '@angular/core';\n   *\n   * @Component({\n   *   selector: 'some',\n   *   styles: [`.box { width: 95%; padding: 5px; border: 1px solid black;}`],\n   *   template: `\n     Input\n     \n      Sanitize\n     Markdown\n     {{ text }}\n     Preview\n     \n       \n     \n   `;\n   * })\n   * export class SomeComponent {\n   *    text: string = `# A cool link\nclick me`;\n   * }\n   *\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        showdown\n                    \n                \n                \n                    \n                        Type :     string\n\n                    \n                \n                        \n                            \n                                    Defined in src/showdown.component.ts:142\n                            \n                        \n                \n                    \n                        Input alias to value.\nExample :\n   * \n   *Equivalent to\n   * \n   *\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        value\n                    \n                \n                \n                    \n                        Type :     string\n\n                    \n                \n                        \n                            \n                                    Defined in src/showdown.component.ts:126\n                            \n                        \n                \n                    \n                        The input markdown value.\nExample :\nSet some static markdown value.\n   * \n   *Bind property with markdown value.\n   * \n   * \n   *\n                    \n                \n            \n        \n\n\n\n\n    \n    \n        \n            Methods\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            render\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        render(value?: string)\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/showdown.component.ts:248\n                            \n                        \n\n\n                \n                    \n                            Convert the markdown value of ShowdownComponent to html and set the html result to the element content.\nExample :\n   * # Some Header\n   * \n   *\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        value\n                                                        \n                                                                    string\n                                                        \n                                                    \n                                                    \n                                                            Yes\n                                                    \n                                                    \n\n                                                        \n                                                                \nA markdown value to render (it will override the current value of ShowdownComponent#value)\n\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     void\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n\n\n\n    \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        showdown\n                    \n                \n\n\n                \n                    \n                        setshowdown(value: string)\n                    \n                \n                            \n                                \n                                    Defined in src/showdown.component.ts:142\n                                \n                            \n                    \n                        \n                                Input alias to value.\nExample :\n   * \n   *Equivalent to\n   * \n   *\n\n                                \n                                        Parameters :\n                                        \n                                            \n                                                \n                                                    Name\n                                                        Type\n                                                    Optional\n                                                \n                                            \n                                            \n                                                    \n                                                            value\n                                                    \n                                                            \n                                                                        string\n                                                            \n                                                    \n                                                        \n                                                                No\n                                                        \n                                                        \n                                                    \n                                            \n                                        \n                                \n                                \n                                \n                                \n                                    Returns :     void\n\n                                \n                        \n                    \n            \n        \n        \n            \n                \n                    \n                        \n                        options\n                    \n                \n\n\n                \n                    \n                        setoptions(options)\n                    \n                \n                            \n                                \n                                    Defined in src/showdown.component.ts:175\n                                \n                            \n                    \n                        \n\n                                \n                                        Parameters :\n                                        \n                                            \n                                                \n                                                    Name\n                                                    Optional\n                                                \n                                            \n                                            \n                                                    \n                                                            options\n                                                    \n                                                    \n                                                        \n                                                                No\n                                                        \n                                                        \n                                                    \n                                            \n                                        \n                                \n                                \n                                \n                                \n                                    Returns :     void\n\n                                \n                        \n                    \n            \n        \n        \n            \n                \n                    \n                        \n                        sanitize\n                    \n                \n\n\n                \n                    \n                        setsanitize(sanitize: boolean)\n                    \n                \n                            \n                                \n                                    Defined in src/showdown.component.ts:211\n                                \n                            \n                    \n                        \n                                Enables html sanitize, it will sanitize the converter html output by DomSanitizer.\nExample :\n   * import { Component } from '@angular/core';\n   *\n   * @Component({\n   *   selector: 'some',\n   *   styles: [`.box { width: 95%; padding: 5px; border: 1px solid black;}`],\n   *   template: `\n     Input\n     \n      Sanitize\n     Markdown\n     {{ text }}\n     Preview\n     \n       \n     \n   `;\n   * })\n   * export class SomeComponent {\n   *    text: string = `# A cool link\nclick me`;\n   * }\n   *\n\n                                \n                                        Parameters :\n                                        \n                                            \n                                                \n                                                    Name\n                                                        Type\n                                                    Optional\n                                                \n                                            \n                                            \n                                                    \n                                                            sanitize\n                                                    \n                                                            \n                                                                        boolean\n                                                            \n                                                    \n                                                        \n                                                                No\n                                                        \n                                                        \n                                                    \n                                            \n                                        \n                                \n                                \n                                \n                                \n                                    Returns :     void\n\n                                \n                        \n                    \n            \n        \n\n\n\n\n    \n        import { Component, ElementRef, Input, OnChanges, OnInit, Optional, SecurityContext } from '@angular/core';\nimport { DomSanitizer } from '@angular/platform-browser';\nimport * as Showdown from 'showdown';\nimport { ShowdownConfig } from './showdown-config.provider';\nimport { ShowdownConverter } from './showdown-converter.provider';\n\n/**\n * @internal\n */\nconst MAP_OPTION = {\n  '': true,\n  true: true,\n  false: false\n};\n\n/**\n * @internal\n */\nlet _toOption = (value: any) => MAP_OPTION.hasOwnProperty(value) ? MAP_OPTION[value] : value;\n\n/**\n * The options keys for the dynamic properties set\n * @internal\n */\nconst OPTIONS_PROPERTIES_KEYS: string[] = Object.keys(Showdown.getDefaultOptions());\n\n// For the options setter properties that dynamic definition (the code after the class)\nexport interface ShowdownComponent extends Showdown.ShowdownOptions {\n}\n\n/**\n * A angular component for render `Markdown` to `HTML`.\n *\n * ### Example\n *\n * Setup as standalone\n * ```typescript\n * import { NgModule } from '@angular/core';\n * import { ShowdownComponent } from 'ngx-showdown';\n *\n * @NgModule({\n *   declarations: [ ShowdownComponent ];\n * })\n * export class AppModule {}\n * ```\n *\n * Bind markdown value and options object\n * ```typescript\n * import { Component } from '@angular/core';\n * import * as Showdown from 'showdown';\n *\n * @Component({\n *   selector: 'some',\n *   template: ''\n * })\n * export class SomeComponent {\n *   text: string = `\n *     # Some header\n *     ---\n *     **Some bold**\n *   `;\n *   options: Showdown.ShowdownOptions = { smartIndentationFix: true };\n *   // ...\n * }\n * ```\n * Bind single option (it have properties for all showdown options).\n * ```html\n * # Some text :+1:\n * ```\n *\n * Set static markdown value.\n * ```html\n * \n * ```\n *\n * Use as directive on anther element.\n * ```html\n * \n * ```\n *\n * Static markdown value in the element content.\n * ```html\n * \n *    \n *       # List:\n *       * a\n *            * A\n *       * b\n *    \n * \n * ```\n *\n * Set template reference variable.\n * ```html\n * \n * ```\n * Or\n * ```html\n * \n * ```\n */\n@Component({\n  selector: 'showdown,[showdown]',\n  template: '',\n  exportAs: 'showdown',\n  inputs: OPTIONS_PROPERTIES_KEYS\n})\nexport class ShowdownComponent extends ShowdownConverter implements OnInit, OnChanges, Showdown.ShowdownOptions {\n\n  /**\n   * The input markdown value.\n   *\n   * __Example :__\n   *\n   * Set some static markdown value.\n   * ```html\n   * \n   * ```\n   *\n   * Bind property with markdown value.\n   * ```html\n   * \n   * \n   * ```\n   */\n  @Input() value: string;\n\n  /**\n   * Input alias to `value`.\n   *\n   * __Example :__\n   *\n   * ```html\n   * \n   * ```\n   *\n   * Equivalent to\n   * ```html\n   * \n   * ```\n   */\n  @Input() set showdown(value: string) {\n    this.value = value;\n  }\n\n  /**\n   * The showdown options of the converter.\n   *\n   * __Example :__\n   *\n   * Bind options\n   * ```typescript\n   * import { Component } from '@angular/core';\n   * import * as Showdown from 'showdown';\n   *\n   * @Component({\n   *   selector: `some`,\n   *   template: `# Some Header`\n   * })\n   * export class SomeComponent {\n   *   options: Showdown.ShowdownOptions = {headerLevelStart: 3};\n   *   // ...\n   * }\n   * ```\n   * Or\n   * ```html\n   *  # Indentation Fix\n   * ```\n   */\n  @Input()\n  get options(): Showdown.ShowdownOptions {\n    return this.getOptions();\n  }\n\n  set options(options: Showdown.ShowdownOptions) {\n    this.setOptions(options);\n  }\n\n  private _sanitize: boolean;\n\n  /**\n   * Enables html sanitize, it will sanitize the converter html output by [`DomSanitizer`](https://angular.io/api/platform-browser/DomSanitizer#sanitize).\n   *\n   * __Example :__\n   *\n   * ```typescript\n   * import { Component } from '@angular/core';\n   *\n   * @Component({\n   *   selector: 'some',\n   *   styles: [`.box { width: 95%; padding: 5px; border: 1px solid black;}`],\n   *   template: `\n   *     Input\n   *     \n   *      Sanitize\n   *     Markdown\n   *     {{ text }}\n   *     Preview\n   *     \n   *       \n   *     \n   *   `;\n   * })\n   * export class SomeComponent {\n   *    text: string = `# A cool link\n   * click me`;\n   * }\n   * ```\n   */\n  @Input()\n  set sanitize(sanitize: boolean) {\n    this._sanitize = _toOption(sanitize);\n  }\n\n  constructor(private _elementRef: ElementRef, @Optional() private _domSanitizer?: DomSanitizer, @Optional() config?: ShowdownConfig) {\n    super(config);\n  }\n\n  /**\n   * A angular lifecycle method, Use on init to check if it `content` type and load the element `content` to `value`.\n   * @internal\n   */\n  ngOnInit(): void {\n    if (this.value === undefined && this._elementRef.nativeElement.innerHTML.trim() !== '') {\n      this.render(this._elementRef.nativeElement.innerHTML);\n    }\n  }\n\n  /**\n   * A angular lifecycle method, Use to call to render method after changes.\n   * @internal\n   */\n  ngOnChanges(): void {\n    this.render();\n  }\n\n  /**\n   * Convert the markdown value of {@link ShowdownComponent#value} to html and set the html result to the element content.\n   *\n   * __Example :__\n   *\n   * ```html\n   * # Some Header\n   * \n   * ```\n   * @param value - A markdown value to render (it will override the current value of `ShowdownComponent#value`)\n   */\n  public render(value?: string): void {\n    if (typeof value === 'string') {\n      this.value = value;\n    }\n\n    if (typeof this.value === 'string') {\n      let result = this.makeHtml(this.value);\n\n      if (this._sanitize) {\n        result = this._domSanitizer.sanitize(SecurityContext.HTML, result);\n      }\n\n      this._elementRef.nativeElement.innerHTML = result;\n    }\n  }\n\n  /**\n   * @ignore\n   * @deprecated from v5, use {@link ShowdownComponent#smartIndentationFix} instead.\n   */\n  // tslint:disable-next-line:member-ordering\n  trimEachLine;\n\n  /**\n   * @ignore\n   * @deprecated from v5,  use {@link ShowdownComponent#render} method instead.\n   */\n  setValue?(value: string): void;\n\n  /**\n   * @ignore\n   * @deprecated from v5, use {@link ShowdownComponent#render} method instead.\n   */\n  compile?(): void;\n\n  /**\n   * @ignore\n   * @deprecated from v5, use `innerHTML` property of the element instead.\n   */\n  toHTML?(): string;\n\n}\n\n/**\n * @ignore\n * @deprecated from v5, renamed `ShowdownDirective` to {@link ShowdownComponent}.\n */\nexport declare let ShowdownDirective: typeof ShowdownComponent;\n\n// Define options properties setter for angular directive and direct access\nfor (let key of OPTIONS_PROPERTIES_KEYS) {\n  Object.defineProperty(ShowdownComponent.prototype, key, {\n    set(value: any): void {\n      this.setOption(key, _toOption(value));\n    },\n    configurable: true\n  });\n}\n\n    \n\n\n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = ''\n    var COMPONENTS = [{'name': 'ShowdownComponent', 'selector': 'showdown,[showdown]'}];\n    var DIRECTIVES = [{'name': 'SourceDirective', 'selector': 'showdown[src],[showdown][src]'}];\n    var ACTUAL_COMPONENT = {'name': 'ShowdownComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/ShowdownConfig.html":{"url":"injectables/ShowdownConfig.html","title":"injectable - ShowdownConfig","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  ShowdownConfig\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/showdown-config.provider.ts\n        \n\n            \n                Description\n            \n            \n                A config provider\nExample\nSet custom config provider.\n * import { NgModel } from '@angular/core';\n * import { ShowdownModule, ShowdownConfig } from 'ngx-showdown';\n *\n * export class MyShowdownConfig extends ShowdownConfig {\n *   emoji = true;\n *   underscore = false;\n *   flavor = 'github';\n * }\n *\n * @NgModel({\n *   imports: [ ShowdownModule ],\n *   providers: [ {provide: ShowdownConfig, useClass: MyConverterOptions} ]\n * })\n * export class AppModule {}\n *\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Optional\n                                flavor\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Optional\n                                merge\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(options?: ShowdownConfig | Showdown.ConverterOptions)\n                    \n                \n                        \n                            \n                                Defined in src/showdown-config.provider.ts:41\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        options\n                                                  \n                                                        \n                                                                    ShowdownConfig | Showdown.ConverterOptions\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Methods\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                                Optional\n                            merge\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        merge(options: ShowdownConfig | Showdown.ConverterOptions)\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/showdown-config.provider.ts:52\n                            \n                        \n\n\n                \n                    \n                            Merge options\n\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        options\n                                                        \n                                                                    ShowdownConfig | Showdown.ConverterOptions\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                        \n                                                                \nA options object to merge.\n\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     void\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Optional\n                            flavor\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     Showdown.Flavor\n\n                        \n                    \n                        \n                            \n                                    Defined in src/showdown-config.provider.ts:41\n                            \n                        \n\n\n            \n        \n\n\n    \n\n\n    \n        import { Injectable } from '@angular/core';\nimport * as Showdown from 'showdown';\n\n/**\n * @internal\n */\nlet {hasOwnProperty} = {};\n\nexport interface ShowdownConfig extends Showdown.ConverterOptions {\n}\n\n/**\n * A config provider\n *\n * ### Example\n *\n * Set custom config provider.\n * ```typescript\n * import { NgModel } from '@angular/core';\n * import { ShowdownModule, ShowdownConfig } from 'ngx-showdown';\n *\n * export class MyShowdownConfig extends ShowdownConfig {\n *   emoji = true;\n *   underscore = false;\n *   flavor = 'github';\n * }\n *\n * @NgModel({\n *   imports: [ ShowdownModule ],\n *   providers: [ {provide: ShowdownConfig, useClass: MyConverterOptions} ]\n * })\n * export class AppModule {}\n * ```\n */\n@Injectable()\nexport class ShowdownConfig implements Showdown.ConverterOptions {\n\n  /**\n   * @see https://github.com/showdownjs/showdown/blob/master/README.md#flavors\n   */\n  flavor?: Showdown.Flavor;\n\n  constructor(options?: ShowdownConfig | Showdown.ConverterOptions) {\n    this.merge(options);\n  }\n\n  /**\n   * Merge options\n   *\n   * @param options - A options object to merge.\n   */\n  public merge?(options: ShowdownConfig | Showdown.ConverterOptions) {\n    for (let key in options) {\n      if (hasOwnProperty.call(options, key)) {\n        this[key] = options[key];\n      }\n    }\n  }\n\n}\n\n/**\n * @ignore\n * @deprecated from v5, use {@link ShowdownConfig} or {@link Showdown.ConverterOptions} instead.\n */\nexport declare let ConverterOptions: typeof ShowdownConfig;\n\n/**\n * @ignore\n * @deprecated from v5, use {@link ShowdownConfig} or {@link Showdown.ConverterOptions} instead.\n */\nexport declare let BaseConverterOptions: typeof ShowdownConfig;\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/ShowdownConverter.html":{"url":"injectables/ShowdownConverter.html","title":"injectable - ShowdownConverter","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  ShowdownConverter\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/showdown-converter.provider.ts\n        \n\n            \n                Description\n            \n            \n                Example\nSetup as standalone\n * import { NgModule } from '@angular/core';\n * import { ShowdownConverter } from 'ngx-showdown';\n *\n * @NgModule({\n *   providers: [ ShowdownConverter ];\n * })\n * export class AppModule {}\n *Use the converter instance.\n * import { Injectable } from '@angular/core';\n * import { ShowdownConverter } from 'ngx-showdown';\n *\n * @Injectable()\n * export class SomeService {\n *   constructor(showdownConverter: ShowdownConverter) {\n *     let markdown: string = \"**Some**\";\n *     let html: string = showdownConverter.makeHtml(markdown);\n *     console.log(`some:\\nmarkdown: ${markdown)\\nhtml: ${html}\\n`);\n *   }\n * }\n *\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                setOptions\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(config?: ShowdownConfig)\n                    \n                \n                        \n                            \n                                Defined in src/showdown-converter.provider.ts:40\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        config\n                                                  \n                                                        \n                                                                    ShowdownConfig\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Methods\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            setOptions\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        setOptions(options: Showdown.ShowdownOptions)\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/showdown-converter.provider.ts:53\n                            \n                        \n\n\n                \n                    \n                            Set options to the converter.\n\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        options\n                                                        \n                                                                    Showdown.ShowdownOptions\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                        \n                                                                \nA options object to set.\n\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     void\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n\n\n\n    \n\n\n    \n        import { Injectable, Optional } from '@angular/core';\nimport * as Showdown from 'showdown';\nimport { ShowdownConfig } from './showdown-config.provider';\n\n/**\n * @internal\n */\nlet {hasOwnProperty} = {};\n\n/**\n * ### Example\n *\n * Setup as standalone\n * ```typescript\n * import { NgModule } from '@angular/core';\n * import { ShowdownConverter } from 'ngx-showdown';\n *\n * @NgModule({\n *   providers: [ ShowdownConverter ];\n * })\n * export class AppModule {}\n * ```\n *\n * Use the converter instance.\n * ```typescript\n * import { Injectable } from '@angular/core';\n * import { ShowdownConverter } from 'ngx-showdown';\n *\n * @Injectable()\n * export class SomeService {\n *   constructor(showdownConverter: ShowdownConverter) {\n *     let markdown: string = \"**Some**\";\n *     let html: string = showdownConverter.makeHtml(markdown);\n *     console.log(`some:\\nmarkdown: ${markdown)\\nhtml: ${html}\\n`);\n *   }\n * }\n * ```\n */\n@Injectable()\nexport class ShowdownConverter extends Showdown.Converter {\n\n  constructor(@Optional() config?: ShowdownConfig) {\n    super(config && {extensions: config.extensions});\n    this.setFlavor((config && config.flavor) || 'vanilla');\n    this.setOptions(config);\n  }\n\n  /**\n   * Set options to the converter.\n   *\n   * @param options - A options object to set.\n   */\n  public setOptions(options: Showdown.ShowdownOptions): void {\n    for (let key in options) {\n      if (hasOwnProperty.call(options, key)) {\n        this.setOption(key, options[key]);\n      }\n    }\n  }\n\n}\n\n/**\n * @ignore\n * @deprecated from v5, use {@link Showdown.ConverterOptions} instead.\n */\nexport interface IConverterOptions extends Showdown.ConverterOptions {\n}\n\n/**\n * @ignore\n * @deprecated from v5, use {@link Showdown.ShowdownOptions} instead.\n */\nexport interface IConverterOptionsChangeable extends Showdown.ShowdownOptions {\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/ShowdownModule.html":{"url":"modules/ShowdownModule.html","title":"module - ShowdownModule","body":"\n                   \n\n\n\n\n    Modules\n    ShowdownModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_ShowdownModule\n\n\n\ncluster_ShowdownModule_declarations\n\n\n\ncluster_ShowdownModule_exports\n\n\n\ncluster_ShowdownModule_providers\n\n\n\n\nDECLARATIONS\n\nDECLARATIONS\n\n\n\nShowdownModule\n\nShowdownModule\n\nShowdownModule -->\n\nDECLARATIONS->ShowdownModule\n\n\n\n\n\nDECLARATIONS \n\nDECLARATIONS \n\nDECLARATIONS  -->\n\nShowdownModule->DECLARATIONS \n\n\n\n\n\nShowdownConverter\n\nShowdownConverter\n\nShowdownModule -->\n\nShowdownConverter->ShowdownModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/showdown.module.ts\n        \n\n\n        \n            Description\n        \n        \n            Example\nAdd ShowdownModule to app imports.\n * import { NgModule } from '@angular/core';\n * import { ShowdownModule } from 'ngx-showdown';\n *\n * @NgModule({\n *   imports: [ ShowdownModule ];\n * })\n * export class AppModule {}\n *\n        \n\n\n        \n            \n                \n                    Declarations\n                    \n                        \n                            DECLARATIONS\n                        \n                    \n                \n                \n                    Providers\n                    \n                        \n                            ShowdownConverter\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            DECLARATIONS\n                        \n                    \n                \n            \n        \n\n        \n    \n        \n            Methods\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Static\n                            forRoot\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        forRoot(config: ShowdownConfig | Showdown.ConverterOptions)\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/showdown.module.ts:59\n                            \n                        \n\n\n                \n                    \n                            Example :\nAdd ShowdownModule to app imports with config.\n   * import { NgModule } from '@angular/core';\n   * import { ShowdownModule } from 'ngx-showdown';\n   *\n   * @NgModule({\n   *   imports: [ ShowdownModule.forRoot({\n   *     smartIndentationFix: true,\n   *     foo: 'bar',\n   *     flavor: 'github',\n   *     extensions: [ {type:'listener', listeners: {'codeBlocks.after': console.log}} ]\n   *   }) ];\n   * })\n   * export class AppModule {}\n   *\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        config\n                                                        \n                                                                    ShowdownConfig | Showdown.ConverterOptions\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                        \n                                                                \nA root converter config for all converter instances.\n\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     ModuleWithProviders\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { ModuleWithProviders, NgModule } from '@angular/core';\nimport * as Showdown from 'showdown';\nimport { ShowdownConfig } from './showdown-config.provider';\nimport { ShowdownConverter } from './showdown-converter.provider';\nimport { ShowdownComponent } from './showdown.component';\nimport { ShowdownPipe } from './showdown.pipe';\nimport { SourceDirective } from './source.directive';\n\n/**\n * @internal\n */\nconst DECLARATIONS = [\n  ShowdownComponent,\n  ShowdownPipe,\n  SourceDirective\n];\n\n/**\n * ### Example\n *\n * Add `ShowdownModule` to app `imports`.\n * ```typescript\n * import { NgModule } from '@angular/core';\n * import { ShowdownModule } from 'ngx-showdown';\n *\n * @NgModule({\n *   imports: [ ShowdownModule ];\n * })\n * export class AppModule {}\n * ```\n */\n@NgModule({\n  declarations: DECLARATIONS,\n  providers: [ShowdownConverter],\n  exports: DECLARATIONS\n})\nexport class ShowdownModule {\n\n  /**\n   * __Example :__\n   *\n   * Add `ShowdownModule` to app `imports` with config.\n   * ```typescript\n   * import { NgModule } from '@angular/core';\n   * import { ShowdownModule } from 'ngx-showdown';\n   *\n   * @NgModule({\n   *   imports: [ ShowdownModule.forRoot({\n   *     smartIndentationFix: true,\n   *     foo: 'bar',\n   *     flavor: 'github',\n   *     extensions: [ {type:'listener', listeners: {'codeBlocks.after': console.log}} ]\n   *   }) ];\n   * })\n   * export class AppModule {}\n   * ```\n   * @param config - A root converter config for all converter instances.\n   */\n  static forRoot(config: ShowdownConfig | Showdown.ConverterOptions): ModuleWithProviders {\n    return {\n      ngModule: ShowdownModule,\n      providers: [{provide: ShowdownConfig, useValue: config}]\n    };\n  }\n\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"pipes/ShowdownPipe.html":{"url":"pipes/ShowdownPipe.html","title":"pipe - ShowdownPipe","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n  Pipes\n  ShowdownPipe\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n\n        \n            File\n        \n        \n            src/showdown.pipe.ts\n        \n\n            \n                Description\n            \n            \n                A angular pipe to transform Markdown to HTML.\nExample\nSetup as standalone\n * import { NgModule } from '@angular/core';\n * import { ShowdownPipe } from 'ngx-showdown';\n *\n * @NgModule({\n *   declarations: [ ShowdownPipe ];\n * })\n * export class AppModule {}\n *Transform markdown value to html.\n * \n * \n *Transform markdown value to html with options.\n * import * as Showdown from 'showdown';\n *\n * @Component({\n *   selector: 'some',\n *   template: ``\n * })\n * export class SomeComponent {\n *   text: string = \"__Some Underline__\";\n *   options: Showdown.ShowdownOptions = { underline: true };\n *   // ...\n * }\n *\n            \n\n\n        \n            Metadata\n            \n                \n                    \n                        Name\n                        showdown\n                    \n                \n            \n        \n\n            \n    \n        \n            Methods\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            transform\n                            \n                            \n                        \n                    \n                \n                \n                    \ntransform(value: string, options?: Showdown.ShowdownOptions)\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/showdown.pipe.ts:55\n                            \n                        \n\n\n                \n                    \n                            Transform markdown value to html.\n\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        value\n                                                        \n                                                                    string\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                        \n                                                                \nThe markdown value to transform to html.\n\n\n                                                        \n                                                \n                                                \n                                                        options\n                                                        \n                                                                    Showdown.ShowdownOptions\n                                                        \n                                                    \n                                                    \n                                                            Yes\n                                                    \n                                                    \n\n                                                        \n                                                                \nA Showdown converter options.\n\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     string\n\n                            \n                                \n                                    Returns the transform result of value to html.\n\n                                \n                    \n                \n            \n        \n\n\n\n    \n\n\n    \n        import { Pipe, PipeTransform } from '@angular/core';\nimport * as Showdown from 'showdown';\nimport { ShowdownConverter } from './showdown-converter.provider';\n\n/**\n * A angular pipe to transform `Markdown` to `HTML`.\n *\n * ### Example\n *\n * Setup as standalone\n * ```typescript\n * import { NgModule } from '@angular/core';\n * import { ShowdownPipe } from 'ngx-showdown';\n *\n * @NgModule({\n *   declarations: [ ShowdownPipe ];\n * })\n * export class AppModule {}\n * ```\n *\n * Transform markdown value to html.\n * ```html\n * \n * \n * ```\n *\n * Transform markdown value to html with `options`.\n * ```typescript\n * import * as Showdown from 'showdown';\n *\n * @Component({\n *   selector: 'some',\n *   template: ``\n * })\n * export class SomeComponent {\n *   text: string = \"__Some Underline__\";\n *   options: Showdown.ShowdownOptions = { underline: true };\n *   // ...\n * }\n * ```\n */\n@Pipe({\n  name: 'showdown',\n  pure: false\n})\nexport class ShowdownPipe extends ShowdownConverter implements PipeTransform {\n\n  /**\n   * Transform markdown value to html.\n   *\n   * @param value - The markdown value to transform to html.\n   * @param options - A `Showdown` converter options.\n   * @returns Returns the transform result of `value` to html.\n   */\n  transform(value: string, options?: Showdown.ShowdownOptions): string {\n    this.setOptions(options);\n    return this.makeHtml(value);\n  }\n\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"directives/SourceDirective.html":{"url":"directives/SourceDirective.html","title":"directive - SourceDirective","body":"\n                   \n\n\n\n\n\n\n\n  Directives\n  SourceDirective\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/source.directive.ts\n        \n\n            \n                Description\n            \n            \n                A angular directive to ShowdownComponent for make http request of markdown content.\nExample\nSetup as standalone\n * import { NgModule } from '@angular/core';\n * import { HttpClientModule } from '@angular/common/http';\n * import { ShowdownComponent, SourceDirective } from 'ngx-showdown';\n *\n * @NgModule({\n *    declarations: [ ShowdownComponent, SourceDirective ],\n *    imports: [ HttpClientModule ]\n * })\n * export class AppModule {}\n *Bind url src directive\n * import { Component } from '@angular/core';\n *\n * @Component({\n *     selector: 'some',\n *     template: '**Loading...**\n * })\n * class SomeComponent {\n *     url: string = 'https://unpkg.com/ngx-showdown/README.md';\n *     // ...\n * }\n *Set static url\n * \n *Set template reference variable\n * \n *Listening to error events.\n * \n *\n            \n\n            \n                Implements\n            \n            \n                        OnChanges\n            \n\n\n        \n            Metadata\n            \n                \n\n                    \n                        Selector\n                        showdown[src],[showdown][src]\n                    \n\n                \n            \n        \n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                load\n                            \n                        \n                    \n                \n\n                \n                    \n                        Inputs\n                    \n                \n                \n                    \n                        \n                            \n                                src\n                            \n                        \n                    \n                \n\n                \n                    \n                        Outputs\n                    \n                \n                \n                    \n                        \n                            \n                                error\n                            \n                        \n                    \n                \n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(_showdownComponent: ShowdownComponent, _http: HttpClient)\n                    \n                \n                        \n                            \n                                Defined in src/source.directive.ts:87\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        _showdownComponent\n                                                  \n                                                        \n                                                                    ShowdownComponent\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        _http\n                                                  \n                                                        \n                                                                    HttpClient\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    Inputs\n        \n            \n                \n                    \n                        \n                        src\n                    \n                \n                \n                    \n                        Type :     string\n\n                    \n                \n                        \n                            \n                                    Defined in src/source.directive.ts:75\n                            \n                        \n                \n                    \n                        The source url of the markdown content.\nExample :\nSet static url to src directive.\n   * \n   *Bind url to src directive.\n   * \n   * Load\n   * **Loading...**\n   *\n                    \n                \n            \n        \n\n            \n    Outputs\n        \n            \n                \n                    \n                        \n                        error\n                    \n                \n                \n                    \n                        Type :     EventEmitter\n\n                    \n                \n                        \n                            \n                                    Defined in src/source.directive.ts:87\n                            \n                        \n                \n                    \n                        On error occur.\nExample :\n   * \n   *  '+$event.message)\">**Loading...**\n   *\n                    \n                \n            \n        \n\n\n\n            \n    \n        \n            Methods\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            load\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        load(url?: string)\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/source.directive.ts:112\n                            \n                        \n\n\n                \n                    \n                            Load the markdown content of SourceDirective url to ShowdownComponent.\nExample :\n   * \n   * Load\n   * \n   *\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        url\n                                                        \n                                                                    string\n                                                        \n                                                    \n                                                    \n                                                            Yes\n                                                    \n                                                    \n\n                                                        \n                                                                \nA url of markdown content to load (it will override the current url of SourceDirective#src)\n\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     void\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n\n\n\n\n    \n\n\n    \n        import { HttpClient, HttpErrorResponse } from '@angular/common/http';\nimport { Directive, EventEmitter, Input, OnChanges, Output } from '@angular/core';\nimport { ShowdownComponent } from './showdown.component';\n\n/**\n * A angular directive to `ShowdownComponent` for make http request of markdown content.\n *\n * ### Example\n *\n * Setup as standalone\n * ```typescript\n * import { NgModule } from '@angular/core';\n * import { HttpClientModule } from '@angular/common/http';\n * import { ShowdownComponent, SourceDirective } from 'ngx-showdown';\n *\n * @NgModule({\n *    declarations: [ ShowdownComponent, SourceDirective ],\n *    imports: [ HttpClientModule ]\n * })\n * export class AppModule {}\n * ```\n *\n * Bind url `src` directive\n * ```typescript\n * import { Component } from '@angular/core';\n *\n * @Component({\n *     selector: 'some',\n *     template: '**Loading...**\n * })\n * class SomeComponent {\n *     url: string = 'https://unpkg.com/ngx-showdown/README.md';\n *     // ...\n * }\n * ```\n *\n * Set static url\n * ```html\n * \n * ```\n *\n * Set template reference variable\n * ```html\n * \n * ```\n *\n * Listening to `error` events.\n * ```html\n * \n * ```\n */\n@Directive({\n  selector: 'showdown[src],[showdown][src]',\n  exportAs: 'source'\n})\nexport class SourceDirective implements OnChanges {\n\n  /**\n   * The source url of the markdown content.\n   *\n   * __Example :__\n   *\n   * Set static url to `src` directive.\n   * ```html\n   * \n   * ```\n   *\n   * Bind url to `src` directive.\n   * ```html\n   * \n   * Load\n   * **Loading...**\n   * ```\n   */\n  @Input() src: string;\n\n  /**\n   * On error occur.\n   *\n   * __Example :__\n   *\n   * ```html\n   * \n   *  '+$event.message)\">**Loading...**\n   * ```\n   */\n  @Output() error: EventEmitter = new EventEmitter();\n\n  constructor(private _showdownComponent: ShowdownComponent, private _http: HttpClient) {\n  }\n\n  /**\n   * A angular lifecycle method, Use to call to `load` method on src init/changes\n   * @internal\n   */\n  ngOnChanges(): void {\n    this.load();\n  }\n\n  /**\n   * Load the markdown content of {@link SourceDirective#src} url to {@link ShowdownComponent#value}.\n   *\n   * __Example :__\n   *\n   * ```html\n   * \n   * Load\n   * \n   * ```\n   * @param url - A url of markdown content to load (it will override the current url of `SourceDirective#src`)\n   */\n  public load(url?: string): void {\n    if (url) {\n      this.src = url;\n    }\n\n    if (this.src) {\n      this\n        ._http\n        .get(this.src, {responseType: 'text'})\n        .subscribe((response: string) => {\n          this._showdownComponent.render(response);\n        }, (error: HttpErrorResponse) => {\n          this.error.emit(error);\n        });\n    }\n  }\n\n}\n\n/**\n * @ignore\n * @deprecated from v5, renamed `SrcDirective` to {@link SourceDirective}.\n */\nexport declare let SrcDirective: typeof SourceDirective;\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                src/showdown-config.provider.ts\n            \n            injectable\n            ShowdownConfig\n            \n                50 %\n                (2/4)\n            \n        \n        \n            \n                \n                src/showdown-converter.provider.ts\n            \n            injectable\n            ShowdownConverter\n            \n                66 %\n                (2/3)\n            \n        \n        \n            \n                \n                src/showdown.component.ts\n            \n            component\n            ShowdownComponent\n            \n                85 %\n                (6/7)\n            \n        \n        \n            \n                \n                src/showdown.pipe.ts\n            \n            pipe\n            ShowdownPipe\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/source.directive.ts\n            \n            directive\n            SourceDirective\n            \n                80 %\n                (4/5)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Peer dependencies\n    \n    \n        \n            @angular/common : ^8.0.0\n        \n            @angular/core : ^8.0.0\n        \n            @angular/platform-browser : ^8.0.0\n        \n            @types/showdown : ^1.9.3\n        \n            showdown : ^1.9.0\n    \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\n\n  \n  Angular Showdown\n\n\n\n\n\n\n\n\n\n\n\nngx-showdown is an Angular (>=2) integration for Showdown, A Markdown to HTML converter.\n\nDemo\n\nDemo app in source code (live).\nYou can play with it in Stackblitz and Plunker.\n\nInstall\n$ npm install ngx-showdown --saveand install peer dependencies (@angular/common/http for SourceDirective)\n$ npm install showdown @angular/common @angular/platform-browser --saveand install type package of Showdown for TypeScript \n$ npm install @types/showdown --save-devUsage\nFor more information and explanations, see the full documentation.\nSetup ShowdownModule in your app.\nAdd ShowdownModule to imports of App.\nimport { NgModule } from '@angular/core';\nimport { ShowdownModule } from 'ngx-showdown';\n\n@NgModule({\n  imports: [ ShowdownModule ]\n})\nexport class AppModule {}Or with config (it will init ShowdownConfig provider)\nimport { NgModule } from '@angular/core';\nimport { ShowdownModule } from 'ngx-showdown';\n\n@NgModule({\n  imports: [ ShowdownModule.forRoot({emoji: true, noHeaderId: true, flavor: 'github'}) ]\n})\nexport class AppModule {}Use ShowdownComponent in the template\nBinding to [value] property\nBind markdown value to value property of showdown component.\n\nBind value and options.\nimport { Component } from '@angular/core';\nimport * as Showdown from 'showdown';\n\n@Component({\n  selector: 'some',\n  template: ''\n})\nexport class SomeComponent {\n  text: string = `\n# h1\n## h2\n`;\n  options: Showdown.ShowdownOptions = {...};\n  // ...\n}As directive on anther element \nMarkdown in component content\nA markdown value in the component content.  \n\n# H1\n## H2\nWith options\n\n    * a\n    * b\n    * c\nAs directive on anther element \n:showdown:**howdown**Load .md content (by SourceDirective)\nLoad markdown content of url source.\nBind input url to src directive.\n\n**No Url..**Note: Loading markdown content requires HttpClient of @angular/common/http\nMixing sources\nWhen both Content and [value], It will render [value].\n# ContentWhen both Content and [src], It will render Content and when src loads then results will be src content. \n# ContentWhen both [value] and [src], It will render [value] and when src loads then results will be src content. \nBinding options\nBind options object (it init root ShowdownConfig and then set the bind options)\nimport { Component } from '@angular/core';\nimport * as Showdown from 'showdown';\n\n@Component({\n  selector: `some`,\n  template: ``\n})\nexport class SomeComponent {\n  text: string = '# Some';\n  options: Showdown.ShowdownOptions = {noHeaderId: true};\n  // ...\n}Or\n# abcBind single option (it have input properties for all showdown options).\n# abcSanitize the convert html output\nSanitize the convert html output by DomSanitizer.\n\n# Some\nClick\n__Foo__\nAlso sanitize content of src url.\nUse ShowdownPipe in the template\nTransform markdown value of text property to html. \n{{ text | showdown }}Transform value with options (it init root ShowdownConfig and then set the pipe options)\nimport { Component } from '@angular/core';\nimport * as Showdown from 'showdown';\n\n@Component({\n  selector: 'some',\n  template: '{{ text | showdown:options }}'\n})\nexport class SomeComponent {\n  text: string = `\n      # h1\n      ## h2\n  `;\n  options: Showdown.ShowdownOptions = {smartIndentationFix: true};\n  // ...\n}Use ShowdownConverter service\nimport { Injectable } from '@angular/core';\nimport { ShowdownConverter } from 'ngx-showdown';\n\n@Injectable()\nexport class SomeService {\n  constructor(showdownConverter: ShowdownConverter){\n    console.log(showdownConverter.makeHtml('# Showdown'));\n  }\n}Set config provider (ShowdownConfig)\nSet root config that will be injected to ShowdownComponent, ShowdownPipe, ShowdownConverter when they are created.\nimport { NgModel } from '@angular/core';\nimport { ShowdownModule, ShowdownConverter } from 'ngx-showdown';\nimport * as Showdown from 'showdown';\n\nlet colorExtension: Showdown.FilterExtension = {\n  type: 'output',\n  filter(text: string, converter: ShowdownConverter){\n    return text.replace('$color', converter.getOption('color') || 'green')\n  }\n};\n\n@NgModel({\n  imports:[\n    ShowdownModule.forRoot({\n      flavor: 'original',\n      emoji: true,\n      color: 'red',\n      extensions: [ colorExtension ]\n    })\n  ]\n})\nexport class AppModule {}Override the root config provider value.\nimport { Component } from '@angular/core';\nimport { ShowdownConfig } from 'ngx-showdown';\n\n@Component({\n  selector: 'some',\n  template: '# Header',\n  providers: [ {provide: ShowdownConfig, useValue: {underline: true, emoji: false}} ]\n})\nexport class SomeComponent {}Set the config manually by the converter methods.\nimport { Component } from '@angular/core';\nimport { ShowdownComponent } from 'ngx-showdown';\nimport * as highlightExtension from 'showdown-highlight';\nimport 'highlight.js/styles/default.css';\n\n@Component({\n  selector: 'some',\n  template: '# Header'\n})\nexport class SomeComponent {\n  constructor(showdownComponent: ShowdownComponent) {\n    showdownComponent.addExtension(highlightExtension);\n    showdownComponent.setFlavor('ghost');\n    showdownComponent.setOptions({emoji: true});\n  }\n}Flavor\nSet root flavor (Showdown flavors).\nimport { NgModel } from '@angular/core';\nimport { ShowdownModule } from 'ngx-showdown';\n\n@NgModel({\n  imports:[\n    ShowdownModule.forRoot({flavor: 'github'})\n  ]\n})\nexport class AppModule {}Note: If flavor is not set then the default value is 'vanilla' flavor.\nConverterOptions\nSet root ConverterOptions (Showdown options).\nimport { NgModel } from '@angular/core';\nimport { ShowdownModule } from 'ngx-showdown';\n\n@NgModel({\n  imports:[\n    ShowdownModule.forRoot({underline: true, emoji: false})\n  ]\n})\nexport class AppModule {}Extensions\nSet root Extensions (Showdown extensions).\nWith extension can be made changes to the Markdown input ('lang') and the Html output also listen to parse event, you can make extension or search in npm for existing extension.\nimport { NgModel } from '@angular/core';\nimport { ShowdownModule } from 'ngx-showdown';\nimport * as Showdown from 'showdown';\nimport * as highlightExtension from 'showdown-highlight';\nimport 'highlight.js/styles/default.css';\n\nlet someExtension: Showdown.ShowdownExtension = {\n  type: 'lang',\n  regex: new RegExp('markdown', 'g'),\n  replace: 'showdown'\n};\n\n\n@NgModel({\n  imports: [ \n    ShowdownModule.forRoot({extensions: [ someExtension, highlightExtension ]}) \n  ]\n})\nexport class AppModule {}Troubleshoot\nInterpolation\nUsing unescaped {} ({}) in template causes an template parse error (@angular/angular/#11859), \nThe solution is to use escape chars (html char code etc.), \nAnther solution is to override the default interpolation.\nWhitespaces\nAngular aot compiler remove whitespaces by default, use ngPreserveWhitespaces to preserve whitespaces. \n\n* a\n  * 1\n  * 2\n* b\nWith ngPreserveWhitespaces\n* a\n  * 1\n  * 2\n* bWithout ngPreserveWhitespaces\n* a * 1 * 2\n* bIndentation\nShowdown converter smartIndentationFix option can fix string indentation problems of es6 template and html. \ntext = `\n  # A\n  ## B\n`;With smartIndentationFix\n# A\n## BWithout smartIndentationFix\n  # A\n  ## BContribute\nPull requests are welcome!\nDevelopment\nThis project built with Angular Cli.\nInstall dependencies\n$ yarn installRun test\n$ yarn testBuild for release\n$ yarn buildLicense\nCopyright © Yisrael Eliav,\nLicensed under the MIT license.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"license.html":{"url":"license.html","title":"getting-started - license","body":"\n                   \n\nThe MIT License (MIT)\nCopyright © Yisrael Eliav\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n            \n                \n                    \n                        ShowdownModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n  \n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_ShowdownModule\n\n\n\ncluster_ShowdownModule_declarations\n\n\n\ncluster_ShowdownModule_exports\n\n\n\ncluster_ShowdownModule_providers\n\n\n\n\nDECLARATIONS\n\nDECLARATIONS\n\n\n\nShowdownModule\n\nShowdownModule\n\nShowdownModule -->\n\nDECLARATIONS->ShowdownModule\n\n\n\n\n\nDECLARATIONS \n\nDECLARATIONS \n\nDECLARATIONS  -->\n\nShowdownModule->DECLARATIONS \n\n\n\n\n\nShowdownConverter\n\nShowdownConverter\n\nShowdownModule -->\n\nShowdownConverter->ShowdownModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n  \n\n    \n        \n            \n                \n                    \n                    \n                        1 Module\n                    \n                \n            \n        \n        \n            \n                \n                    \n                    1 Component\n                \n            \n        \n        \n            \n                \n                    \n                    1 Directive\n                \n            \n        \n        \n            \n                \n                    \n                    2 Injectables\n                \n            \n        \n        \n            \n                \n                    \n                    1 Pipe\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
